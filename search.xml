<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>16 versus 21</title>
    <url>/blog/2015/09/24/16%20versus%2021/</url>
    <content><![CDATA[<p>16岁、我希望我能够开心一些—-<strong>21岁，我挺开心的</strong></p>
<p>16岁、我希望我能够成熟一些—-<strong>21岁，我对成熟没有定义</strong></p>
<br>



<p>我希望我能长得更高—-<strong>好像没长</strong></p>
<p>我希望我能长得更帅—-<strong>这我不知道，我妈说我丑了</strong></p>
<p>我希望我稍微长胖一点—-<strong>尚未实现</strong></p>
<p>我希望学习有所进步—-<strong>什么是进步</strong></p>
<p>我希望我能更有文采—-<strong>文采是什么</strong></p>
<p>我希望我能更有智慧—-<strong>哦</strong></p>
<p>我希望我字能写得更好看—-<strong>很久不写字了，目前是不用钢笔不好看</strong></p>
<p>我希望我吉他能弹得更好—-<strong>是更好了</strong></p>
<p>我希望我能学会编曲—-<strong>能编</strong></p>
<p>我希望我唱歌能更好听—-<strong>这不知道</strong></p>
<p>我希望我羽毛球打得更好—-<strong>经历了高三巅峰又废了</strong></p>
<p>我希望我希望我长跑更好—-<strong>水</strong></p>
<p>我希望我身体更棒—-<strong>还行吧</strong></p>
<p>我希望我做饭能更好吃—-<strong>更难吃了</strong></p>
<p>我希望我能努力考所好大学—-<strong>还行吧，被专业毁了</strong></p>
<p>我希望我能更博学多才—-<strong>那肯定</strong></p>
<p>我希望我能学到更多、不止是知识—-<strong>挺多的</strong></p>
<p>我希望我能挖掘出我更多的潜能—-<strong>发掘潜能是痛苦的过程，方向不对发掘错了也不一定</strong></p>
<br>



<p>我希望我能帮助到更多的人—-<strong>尽量吧</strong></p>
<p>我希望我能收获到更多的友情—-<strong>这我不知道</strong></p>
<p>我希望我的朋友们能够因我而快乐—-<strong>不清楚</strong></p>
<p>我希望我不会让任何一个朋友为了我而伤心—-<strong>哦，我不知道怎么说</strong></p>
<p>我希望我会珍惜每一个真心对我好的人—-<strong>哦好</strong></p>
<p>我希望在每一个生日都能收到满满的祝福—-<strong>嗯</strong></p>
<p>我希望偶尔也能收到几件小礼物、很贴心、也很开心—-<strong>哦</strong></p>
<p>我希望我们的小太阳永远不分离—-<strong>哦</strong></p>
<p>我希望我们可以完整的制作出一首真正只属于我们的歌—-<strong>完整做出来了三首自己的歌</strong></p>
<p>我希望我可以在立夏到夏至之间的某一个阳光明媚的晴天里、在一个葱绿的小角落、抱着吉他、唱《晴天》—-<strong>唱得不好，只会弹前奏</strong></p>
<p>我希望我们小太阳的愿望可以实现、我们可以在未来的某一个夏天看到我们在某一个山坡上亲手种下的向日葵—-<strong>本来是要种的，种的那天种子丢了，改种蒲公英了，隔年上山，未长</strong></p>
<p>我希望43路车在我考上大学之前不要换新车—-<strong>换了，现在都换第二次了</strong></p>
<p>我希望我家院子能很久以后才拆—-<strong>还没拆呢</strong></p>
<p>我希望我能坚持在妈妈上下班的时候替她扛自行车—-<strong>在家就扛，哦现在她不骑了</strong></p>
<p>我希望我爸爸能少生气、少骂我几句—-<strong>哄着点</strong></p>
<p>我希望我的爷爷奶奶姥姥姥爷可以健康长寿—-<strong>好</strong></p>
<p>我希望我的哥哥姐姐、我的弟弟妹妹、还有我家的猫咪、能够更快乐—-<strong>猫死了</strong></p>
<p>我希望我的家人平平安安—-<strong>好</strong></p>
<br>



<p>我希望我能再创作出几首好歌—-<strong>是不是好歌不知道，能听</strong></p>
<p>我希望我能拍到许多有感觉的好照片—-<strong>在拍</strong></p>
<p>我希望每天都有一点时间看一些自己喜欢的书、做一些自己喜欢的事、或者只是静静的听听歌、做白日梦—-<strong>你喜欢干啥</strong></p>
<p>我希望我能遇到更多喜欢的诗、喜欢的歌、以及文章—-<strong>经常有</strong></p>
<p>我希望我不要遗忘那些从前最单纯的快乐与悲伤—-<strong>没忘</strong></p>
<p>我希望我能不断的留下一些美好的记忆、给未来—-<strong>做的不错</strong></p>
<p>我希望我能开心地回忆过去、积极地面对未来—-<strong>好</strong></p>
<p>我希望无论遇到什么事我都能够平静地面对—-<strong>还能更好</strong></p>
<p>我希望我能够充实地过好每一天—-<strong>不管怎样度过，生命始终都是充实的</strong></p>
<p>我希望我不会因为寂寞而随便找女朋友—-<strong>这个我可以肯定地说你做到了</strong></p>
<p>我希望我即使一个人上学、一个人回家、一个人听着歌、一个人望着窗外、一个人走在校园、一个人路过人潮、也不会太孤单、也会开心的笑—-<strong>笑啥</strong></p>
<p>我希望我能够坚守我的独立人格—-<strong>不存在绝对独立人格</strong></p>
<p>我希望我能真正地享受一个人的快乐、不需要去羡慕别人的快乐—-<strong>享受了，就是我有时候还挺羡慕你的</strong></p>
<p>我希望我能一直相信着亲情、友情、爱情、以及其他的一切美好—-<strong>我保持沉默</strong></p>
<p>我希望能有一个真心喜欢我、并且我也真心喜欢的女孩子、然后在一起—-<strong>没</strong></p>
<p>我希望我会珍惜一切—-<strong>嗯</strong></p>
<p>我希望我能保持一颗纯粹的心—-<strong>嗯</strong></p>
<p>总之、我要做我自己、做一个优秀的人—-<strong>你是你自己，什么是优秀</strong></p>
<p>我相信、我能够努力让这些愿望实现—-<strong>16岁、我的愿望</strong></p>
]]></content>
      <categories>
        <category>生日</category>
      </categories>
  </entry>
  <entry>
    <title>16岁、我的愿望</title>
    <url>/blog/2010/09/24/16%E5%B2%81%E3%80%81%E6%88%91%E7%9A%84%E6%84%BF%E6%9C%9B/</url>
    <content><![CDATA[<p>16岁、我希望我能够开心一些­</p>
<p>16岁、我希望我能够成熟一些­</p>
<p>&nbsp;</p>
<p>我希望我能长得更高（也希望TT能长高）­</p>
<p>我希望我能长得更帅（啊哈哈哈哈）­</p>
<p>我希望我稍微长胖一点（也祝愿张荣减肥失败、哈哈）­</p>
<p>我希望学习有所进步­</p>
<p>我希望我能更有文采­</p>
<p>我希望我能更有智慧­</p>
<p>我希望我字能写得更好看（也祝张钰祥画画得更好）­</p>
<p>我希望我吉他能弹得更好（还有鹿浩也要弹得很棒）­</p>
<p>我希望我能学会编曲­</p>
<p>我希望我唱歌能更好听­</p>
<p>我希望我羽毛球打得更好­</p>
<p>我希望我希望我长跑更好­</p>
<p>我希望我身体更棒­</p>
<p>我希望我做饭能更好吃­</p>
<p>我希望我能努力考所好大学­</p>
<p>我希望我能更博学多才­</p>
<p>我希望我能学到更多、不止是知识­</p>
<p>我希望我能挖掘出我更多的潜能­</p>
<p>­&nbsp;</p>
<p>­</p>
<p>我希望我能帮助到更多的人­</p>
<p>我希望我能收获到更多的友情­</p>
<p>我希望我的朋友们能够因我而快乐­</p>
<p>我希望我不会让任何一个朋友为了我而伤心­</p>
<p>我希望我会珍惜每一个真心对我好的人­</p>
<p>我希望在每一个生日都能收到满满的祝福­</p>
<p>我希望偶尔也能收到几件小礼物、很贴心、也很开心­</p>
<p>我希望我们的小太阳永远不分离­</p>
<p>我希望我们可以完整的制作出一首真正只属于我们的歌（要学编曲啊、录音啊、混音啊、后期啊、、、、我晕了）­ </p>
<p>我希望我可以在立夏到夏至之间的某一个阳光明媚的晴天里、在一个葱绿的小角落、抱着吉他、唱《晴天》­</p>
<p>我希望我们小太阳的愿望可以实现、我们可以在未来的某一个夏天看到我们在某一个山坡上亲手种下的向日葵­</p>
<p>我希望43路车在我考上大学之前不要换新车­</p>
<p>我希望我家院子能很久以后才拆­</p>
<p>我希望我能坚持在妈妈上下班的时候替她扛自行车­</p>
<p>我希望我爸爸能少生气、少骂我几句­</p>
<p>我希望我的爷爷奶奶姥姥姥爷可以健康长寿­</p>
<p>我希望我的哥哥姐姐、我的弟弟妹妹、还有我家的猫咪、能够更快乐­</p>
<p>我希望我的家人平平安安­</p>
<p>&nbsp;</p>
<p>­</p>
<p>我希望我能再创作出几首好歌­</p>
<p>我希望我能拍到许多有感觉的好照片­</p>
<p>我希望每天都有一点时间看一些自己喜欢的书、做一些自己喜欢的事、或者只是静静的听听歌、做白日梦­</p>
<p>我希望我能遇到更多喜欢的诗、喜欢的歌、以及文章­</p>
<p>我希望我不要遗忘那些从前最单纯的快乐与悲伤­</p>
<p>我希望我能不断的留下一些美好的记忆、给未来­</p>
<p>我希望我能开心地回忆过去、积极地面对未来­</p>
<p>我希望无论遇到什么事我都能够平静地面对­</p>
<p>我希望我能够充实地过好每一天­</p>
<p>我希望我不会因为寂寞而随便找女朋友­</p>
<p>我希望我即使一个人上学、一个人回家、一个人听着歌、一个人望着窗外、一个人走在校园、一个人路过人潮、也不会太孤单、也会开心的笑­</p>
<p>我希望我能够坚守我的独立人格­</p>
<p>我希望我能真正地享受一个人的快乐、不需要去羡慕别人的快乐­</p>
<p>我希望我能一直相信着亲情、友情、爱情、以及其他的一切美好­</p>
<p>我希望能有一个真心喜欢我、并且我也真心喜欢的女孩子、然后在一起­</p>
<p>我希望我会珍惜一切­</p>
<p>我希望我能保持一颗纯粹的心­</p>
<p>总之、我要做我自己、做一个优秀的人­</p>
<p>&nbsp;</p>
<p>我相信、我能够努力让这些愿望实现</p>
]]></content>
      <categories>
        <category>生日</category>
      </categories>
  </entry>
  <entry>
    <title>2019年暑期实习笔记总结</title>
    <url>/blog/2020/04/15/2019%E5%B9%B4%E5%AE%9E%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p>2019年阿里游戏暑期实习时在本子上的笔记整理汇总，方便查找。</p>
<h3 id="Unity相关"><a href="#Unity相关" class="headerlink" title="Unity相关"></a>Unity相关</h3><h4 id="Difference-between-Color-Color32"><a href="#Difference-between-Color-Color32" class="headerlink" title="Difference between Color&amp;Color32"></a>Difference between Color&amp;Color32</h4><p>Color: 4 float (1.0, 1.0, 1.0, 1.0)</p>
<p>Color32: 4 byte (255, 255, 255, 255)</p>
<h4 id="Transform-InverseTransformDirection-Vector3-direction"><a href="#Transform-InverseTransformDirection-Vector3-direction" class="headerlink" title="Transform.InverseTransformDirection(Vector3 direction)"></a>Transform.InverseTransformDirection(Vector3 direction)</h4><p>Convert <strong>direction</strong> from <strong>worldspace</strong> to <strong>localspace</strong></p>
<h4 id="Transform-TransformPoint-Vector3-pos"><a href="#Transform-TransformPoint-Vector3-pos" class="headerlink" title="Transform.TransformPoint(Vector3 pos)"></a>Transform.TransformPoint(Vector3 pos)</h4><p>Convert <strong>position</strong> from <strong>localspace</strong> to <strong>worldspace</strong> </p>
<h4 id="Editor-EditorWindow"><a href="#Editor-EditorWindow" class="headerlink" title="Editor&amp;EditorWindow"></a>Editor&amp;EditorWindow</h4><p><strong>Editor</strong>：自定义Inspector中的组件显示，辅助脚本序列化。</p>
<p><strong>EditorWindow</strong>：自定义标签页面板，从菜单栏打开。</p>
<p><code>EditorWindow.GetWindow()</code>：创造面板</p>
<p><code>EditorGUILayout</code>：插件面板控制</p>
<p><code>Editor.OnInspectorGUI()</code>：自定义面板</p>
<p><code>Destroy()</code>不能在<code>Editor</code>中调用</p>
<h4 id="菜单验证函数"><a href="#菜单验证函数" class="headerlink" title="菜单验证函数"></a>菜单验证函数</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[MenuItem(&quot;...&quot;, true)]</span><br><span class="line">static bool func</span><br></pre></td></tr></table></figure>

<p>若返回<code>false</code>，则菜单项不显示。</p>
<h4 id="Selection-gameObject"><a href="#Selection-gameObject" class="headerlink" title="Selection.gameObject"></a>Selection.gameObject</h4><p>返回Editor中选择的对象。</p>
<h4 id="Unity脚本编译顺序"><a href="#Unity脚本编译顺序" class="headerlink" title="Unity脚本编译顺序"></a>Unity脚本编译顺序</h4><ol>
<li>Standard Assets&#x2F;Plugin下的脚本</li>
<li>Standard Assets&#x2F;Plugin&#x2F;Editor下的脚本</li>
<li>非Editor脚本</li>
<li>Editor脚本</li>
</ol>
<h4 id="ScriptableObject特点"><a href="#ScriptableObject特点" class="headerlink" title="ScriptableObject特点"></a>ScriptableObject特点</h4><ul>
<li>不同于MonoBehavior，不作为组件挂载</li>
<li>适用于保存配置文件</li>
<li>可以从JSON中读取</li>
</ul>
<h4 id="ScriptableObject保存为-asset文件"><a href="#ScriptableObject保存为-asset文件" class="headerlink" title="ScriptableObject保存为.asset文件"></a>ScriptableObject保存为.asset文件</h4><p>其中class必须标记为<code>[serializable]</code></p>
<p>即用到的所有自定义类均必须为“可序列化”</p>
<ul>
<li><strong>属性property</strong>和<strong>静态变量</strong>无法被序列化。</li>
<li>保存为.asset时，<code>ScriptableObject</code>只能在<strong>同名文件</strong>中定义。</li>
<li>属性<code>{get; set;}</code>，只是自动生成了匿名成员变量。</li>
</ul>
<table>
<thead>
<tr>
<th>需要API</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td><strong>ScriptableObject.CreateInstance()</strong></td>
<td>新建ScriptableObject</td>
</tr>
<tr>
<td><strong>AssetDatabase.CreateAsset()</strong></td>
<td>新建asset at path</td>
</tr>
<tr>
<td><strong>AssetDatabase.Refresh()</strong></td>
<td>刷新asset数据库</td>
</tr>
</tbody></table>
<ul>
<li>其中path为”Assets&#x2F;…”形式。</li>
</ul>
<h4 id="Mesh相关"><a href="#Mesh相关" class="headerlink" title="Mesh相关"></a>Mesh相关</h4><p><code>MeshFilter</code>：从资源中读取mesh，并传给<code>MeshRenderer</code></p>
<p><code>MeshRenderer</code>：Mesh渲染器</p>
<p><code>MeshFilter.mesh.bounds.size</code>：获取mesh尺寸</p>
<p><code>Mesh.CombineMeshes(CombineInstance[] combine)</code>：合并Mesh</p>
<p><code>MeshFilter.sharedMesh</code>：引用传递</p>
<p><code>MeshFilter.mesh</code>：值传递</p>
<h4 id="四元数相关"><a href="#四元数相关" class="headerlink" title="四元数相关"></a>四元数相关</h4><ul>
<li><code>Vector3 = Vector3 * Quaternion</code></li>
<li>四元数乘法顺序：从后往前<code>q = q3 * q2 * q1</code></li>
<li><code>Quaternion.eulerAngles</code>以欧拉角设置四元数（顺序zxy）</li>
</ul>
<h4 id="Debug日志等级"><a href="#Debug日志等级" class="headerlink" title="Debug日志等级"></a>Debug日志等级</h4><p>Log() &lt; Warning() &lt; Assertion() &lt; Error() &lt; Exception() </p>
<h4 id="其他API"><a href="#其他API" class="headerlink" title="其他API"></a>其他API</h4><table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td><strong>Vector3.Scale(a, b)</strong></td>
<td>两向量对应分量相乘</td>
</tr>
<tr>
<td><strong>Mathf.Approximately()</strong></td>
<td>近似相等，避免浮点数运算后的精读问题</td>
</tr>
<tr>
<td><strong>MonoBehaviour.OnDrawGizmos()</strong></td>
<td>若要绘制Gizmos，则实现此方法</td>
</tr>
<tr>
<td><strong>Camera.ScreenPointToRay()</strong></td>
<td>从相机近平面发出射线，用于鼠标选择物体</td>
</tr>
<tr>
<td><strong>Input.mousePosition</strong></td>
<td>鼠标在屏幕空间位置</td>
</tr>
<tr>
<td><strong>Application.dataPath</strong></td>
<td>游戏数据目录</td>
</tr>
<tr>
<td><strong>[CustomEditor(typeof(ScriptName))]</strong></td>
<td>自定义Inspector属性面板</td>
</tr>
<tr>
<td><strong>#if UNITY_EDITOR #endif</strong></td>
<td>根据平台编译</td>
</tr>
</tbody></table>
<h3 id="C-相关"><a href="#C-相关" class="headerlink" title="C#相关"></a>C#相关</h3><h4 id="运算符"><a href="#运算符" class="headerlink" title="?运算符"></a>?运算符</h4><table>
<thead>
<tr>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>??</td>
<td>空可并运算符</td>
<td><code>a ?? b</code>若<code>a != null</code>，则为<code>a</code>；若<code>a == null</code>，则为<code>b</code></td>
</tr>
<tr>
<td>?.和?[]</td>
<td>空条件运算符</td>
<td><code>a?[b]?.c</code>等同<code>(a == null) ? null : ((a[b] == null) ? null : a[b].c)</code></td>
</tr>
</tbody></table>
<p><code>bool?</code>为可空类型，可为null</p>
<h4 id="Lambda表达式与表达式主体定义"><a href="#Lambda表达式与表达式主体定义" class="headerlink" title="Lambda表达式与表达式主体定义"></a>Lambda表达式与表达式主体定义</h4><table>
<thead>
<tr>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td><strong>Lambda表达式</strong></td>
<td>左侧为输入参数，右侧为返回值</td>
<td><code>(x, y) =&gt; x + y</code></td>
</tr>
<tr>
<td><strong>表达式主体定义</strong></td>
<td>左侧为待定义函数，右侧为具体实现</td>
<td><code>f1(x) =&gt; f2(x, x+1) - x</code></td>
</tr>
</tbody></table>
<h4 id="List的几个查找方法"><a href="#List的几个查找方法" class="headerlink" title="List的几个查找方法"></a>List的几个查找方法</h4><table>
<thead>
<tr>
<th></th>
<th align="left"><em>input</em></th>
<th><em>output</em></th>
</tr>
</thead>
<tbody><tr>
<td><strong>Contains()</strong></td>
<td align="left">Object</td>
<td>bool</td>
</tr>
<tr>
<td><strong>Exists()</strong></td>
<td align="left">Function</td>
<td>bool</td>
</tr>
<tr>
<td><strong>Find()</strong></td>
<td align="left">Function</td>
<td>Object</td>
</tr>
<tr>
<td><strong>IndexOf()</strong></td>
<td align="left">Object</td>
<td>int</td>
</tr>
<tr>
<td><strong>FindIndex()</strong></td>
<td align="left">Function</td>
<td>int</td>
</tr>
</tbody></table>
<ul>
<li>The <em>Function</em> in the table means <code>delegate bool Predicate&lt;T&gt;</code></li>
</ul>
<p><code>System.IEquatable&lt;T&gt;</code> 类似于<code>IComparable&lt;T&gt;</code>，用于<code>List.Contains()</code>。必须实现<code>Equals(T)</code>，用于比较对象相等。</p>
<p><code>System.IEqualityComparer&lt;T&gt;</code>用于 <code>List.Distinct()</code>去重。</p>
<h4 id="IComparable接口"><a href="#IComparable接口" class="headerlink" title="IComparable接口"></a>IComparable接口</h4><p>必须实现<code>CompareTo</code>函数</p>
<table>
<thead>
<tr>
<th>this.CompareTo(obj)</th>
<th>return int</th>
</tr>
</thead>
<tbody><tr>
<td>this &lt; obj</td>
<td>return &lt; 0</td>
</tr>
<tr>
<td>this &#x3D; obj</td>
<td>return &#x3D; 0</td>
</tr>
<tr>
<td>this &gt; obj</td>
<td>return &gt; 0</td>
</tr>
</tbody></table>
<p><code>int.CompareTo(value)</code>同理。</p>
<h4 id="IEnumerable可枚举接口"><a href="#IEnumerable可枚举接口" class="headerlink" title="IEnumerable可枚举接口"></a>IEnumerable可枚举接口</h4><p><code>IEnumerable.Where()</code>：筛选器，返回<code>IEnumerable</code></p>
<p><code>IEnumerable.any()</code>：判断器，返回<code>bool</code></p>
<p><code>IEnumerable</code>接口包含<code>GetEnumerator</code>方法，实现时，需要另外实现一个<code>IEnumerator</code>接口供<code>GetEnumerator</code>返回。</p>
<p><code>IEnumerable</code>实现后可用于<code>foreach</code></p>
<h4 id="int的最大最小值"><a href="#int的最大最小值" class="headerlink" title="int的最大最小值"></a>int的最大最小值</h4><p><code>int.MaxValue = 2147483647(0x7FFFFFFF)</code></p>
<p><code>int.MinValue = -2147483647(0x80000000)</code></p>
<h4 id="Parse-TryParse"><a href="#Parse-TryParse" class="headerlink" title="Parse&amp;TryParse"></a>Parse&amp;TryParse</h4><p><code>float.Parse(string s)</code> return <code>float</code></p>
<p><code>float.TryParse(string s, out float f)</code> return <code>bool</code></p>
<h4 id="打开文件流"><a href="#打开文件流" class="headerlink" title="打开文件流"></a>打开文件流</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">File.Open(String, FileMode, FileAccess)</span><br><span class="line">return FileStream</span><br></pre></td></tr></table></figure>

<h4 id="将对象序列化到指定文件流"><a href="#将对象序列化到指定文件流" class="headerlink" title="将对象序列化到指定文件流"></a>将对象序列化到指定文件流</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">BinaryFormatter.Serialize(fs, Object)</span><br><span class="line">XmlSerializer.Serialize(fs, Object)</span><br></pre></td></tr></table></figure>

<h4 id="其他API-1"><a href="#其他API-1" class="headerlink" title="其他API"></a>其他API</h4><table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td><strong>Math.Sign()</strong></td>
<td>取符号</td>
</tr>
<tr>
<td><strong>Enumerable.Distinct()</strong>  [System.Linq]</td>
<td>返回去重后数组</td>
</tr>
<tr>
<td><strong>Enumerable.Concat()</strong></td>
<td>连接数组</td>
</tr>
<tr>
<td><strong>关键字async&amp;await</strong></td>
<td>异步线程同步化编程</td>
</tr>
<tr>
<td><strong>关键字params</strong></td>
<td>函数参数数量任意化，参数类型必为一维数组</td>
</tr>
<tr>
<td><strong>Math.Log()</strong></td>
<td>默认为ln()</td>
</tr>
<tr>
<td><strong>Random.NextDouble()</strong></td>
<td>[0.0, 1.0)区间随机数</td>
</tr>
<tr>
<td><strong>Random.Next(a, b)</strong></td>
<td>[a, b)区间随机数</td>
</tr>
<tr>
<td><strong>Array.GetLength(int dimension)</strong></td>
<td>多维数组取长度</td>
</tr>
<tr>
<td><strong>TypeDescriptor.GetConverter(typeof(T))</strong></td>
<td>类型转换器</td>
</tr>
<tr>
<td><strong>System.Diagnostics.Stopwatch</strong></td>
<td>性能计时工具类</td>
</tr>
<tr>
<td><strong>参数中的关键字this</strong></td>
<td>扩展方法（静态类内静态方法）</td>
</tr>
<tr>
<td><strong>default(T)</strong></td>
<td>T类型默认值</td>
</tr>
<tr>
<td><strong>StringSplitOptions.RemoveEmptyEntries</strong></td>
<td><code>String.Split</code>方法返回中去除空字符串</td>
</tr>
<tr>
<td><strong>Func&lt;T1, T2, TResult&gt;</strong></td>
<td>函数委托</td>
</tr>
</tbody></table>
<h3 id="算法相关"><a href="#算法相关" class="headerlink" title="算法相关"></a><strong>算法相关</strong></h3><h4 id="博弈树与决策树的区别"><a href="#博弈树与决策树的区别" class="headerlink" title="博弈树与决策树的区别"></a><strong>博弈树与决策树的区别</strong></h4><p><strong>博弈树（极大极小树）- α-β剪枝（基于DFS）：</strong></p>
<p>已知叶子结点（结果值）倒推出根节点的值与路径</p>
<p><strong>决策树：</strong></p>
<p>一种ML算法，不存在双人博弈</p>
<h4 id="动态规划的特征"><a href="#动态规划的特征" class="headerlink" title="动态规划的特征"></a><strong>动态规划的特征</strong></h4><ol>
<li><p>无后效性</p>
</li>
<li><p>最优子结构</p>
</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>19</title>
    <url>/blog/2013/09/24/19/</url>
    <content><![CDATA[<p>19，每一次生日都有要写一篇日志的习惯，到现在已经是第四年了吧，从高一时的傻里傻气、无畏无邪到高二高三的阳光耀眼、精彩辉煌，再到大一时的沉郁孤寂、昏暗无华。现在的我，已经好久找不到，那种积累起每一天路途上的灵感，来拼凑起一篇日志的感觉了，于是，我只能像是应付差事地在生日前一天，在这图书馆里，写下这些随口就说的文字。</p>
<p>之前的每一篇生日日志都是要生日当天发出来的，为此也费了不少周折。我家一直没电脑，当然我说的是钟家河。16岁那次是到跟我关系极好的发小小兄弟家打的，17岁是在丁一，就吧台后面那片，具体哪台我也记不清了，18岁就已经是在大学机房了，这次也不知道要去哪发，估计是南京的哪个网吧吧。</p>
<p>还记得16岁的那篇日志，好像是我想，想了很多的事情要做，当然其中有很多现在都没能做成，也有很多没做成但是依然在做，这是我当初早就料到的结果，现在还留下的应该是真正的渴望了吧，17岁的好像是一个勉励自己的，因为当初感觉自己要失恋，结果后来就真失恋了，当然这都是后话了，我这人有个特点，每次感觉“她喜欢我”，那肯定是一个错觉，而每次感觉“我要失恋”，然后就准了，18岁《再见王子》，写完后好像就真的和王子再见了，找不到一点原来自己的样子，过得很黑暗。</p>
<p>之所以说到这些，是因为现在回过头来，就感觉这一切离现在的我都很遥远，不知道是不是离家1764km的原因，感觉自己与原来的自己处在完全不同的两个世界，也就是传说中的“恍如隔世”。又提到南京，总感觉我真的是不大喜欢这座城市，但是也谈不上讨厌，毕竟是我现在每天生活着的地方，这里的人民待你也不错，也有着不少好人，不喜欢，完全是性情所致。如果要给个综合评价，那就是我觉得“还不错”，就是不适合。</p>
<p>关于“恍如隔世”，我觉得这确实是对我大一一年最准确的解释，用我口头些的一句话就是“这差距有些大”，我在南京和兰州的表现简直是判若两人，这和气候有一定的关系，但终究是多方面因素造成的，没养成一个适合自己的良好习惯，应该是根源所在。以前，每天的作息都很规律，所以也过得很开心，至少是很扎实，6:30起床，赖到40，起来狂穿衣服洗脸，坐45或50或55的43，到的早就门口买个鸡柳夹馍或者菜夹馍，到得晚就下了车一路狂奔进教室，至于中午就是两趟43，晚上回家又是一趟43，在车站还有很多朋友在那谝啊谝，动不动还会来句“人太多等下辆”，然后又是五分钟。现在想起来那生活真是无比的安逸，主要是歌听的比较多，每天4次43，就是两个小时，而且还是在车上听歌，感觉那真的是当初每天最好的享受，也是最好的调节，听着歌，然后什么坏情绪都忘记。我真的很喜欢这样的生活节奏，其实，离开了才发现，西固区更像是一个世外桃源，不止一个人对我这样说过。到了南京以后，首先公交车是没机会坐了，偶尔想坐个公交车，又发现南京的公交系统极度的混乱，而且还比较贵，大街上总是停着那么多自行车电动车，大概南京的市民是不怎么坐公交车的。这只是一个小小的例子，总之，一切都与以往不同，于是，生活变得混乱，什么都开始变得不顺心，而且再也没有从前那样一个发泄情绪的出口，一切都变得天昏地暗。不断袭来的，一方面是偌大的世界仿佛只剩我一人的孤独感，一方面是没有习惯的混乱的恶性循环，感觉真的很艰难。</p>
<p>前段时间把电脑上游戏全删了，把手机上的社交软件也全删了，其实就是想找到一个适合自己的节奏，把手机装满了以前p3上的歌，发现有很多歌一两年来再也没有听过，把钢笔灌满了水，才发现里面早就堵住了，很多的好习惯，丢掉了就再没有拾起。从前，没有电脑，拿个mp3加个上网功能基本上算作废的国产200块钱小手机，怎么能那么开心，而现在，开手机刷这个刷那个刷这个刷那个，要不然就是对着电脑屏幕发上半天呆，不知道怎样才能高兴点，这或许就是关键所在。</p>
<p>那天，马哲老师说，现在的许多所谓的大师都教导着人们怎样怎样才能成功，功成名就，达到自己的目标，而孔子呢，则是教导人们如何“心安”。我一下就觉得这节课好像也不是很水，孔子总是为我们讲述什么是君子，怎样做一个君子，因为做一个君子，则心中自然安定平和。而且孔子提倡一种“风乎舞雩，咏而归”的生活追求，其实我也一直很赞同他，就像我很喜欢坐43，坐后排吹着风听着歌，这样就已经足够，那种感觉无法用言语来形容。</p>
<p>至于“心安”与成功，他们完全不是什么对立的东西。要成功，“心安”会使成功更加容易，而成功又是为了什么呢，为了“心安”，至少我这么认为。总是会看到空间里，有人又喝了星巴克，又吃了哈根达斯，我一开始就想，真有钱，然后我就问自己，这是你想要的生活么？然后答案就很明了了，我就算喝十杯星巴克，吃十个哈根达斯，也比不上我吃完牛肉面坐上43听歌的感觉好。我们很容易去追求一些虚拟的虚荣的东西而忽略了心灵的本真。我们总是刷手机而不和身边的世界沟通，我们总是坐在电脑前而不去选择出去走走，网上总有些人在那发着些什么瞎胡扯的东西，就像以前玩LOL总有些人在那骂来骂去。后来想想，那都是些什么人呢，无非是整日无事，没有大脑，泡在网上想要找点乐子的人，你想和他们一样么？不想，那么我想你已经知道该怎么做了。</p>
<p>其实，有很多话想对自己说，只是说了太多我想也会疲惫，每次写日志都会配上一首歌，16岁的《小时候》和《再见小时候》，17岁的《生还者》，18岁的《再见王子》，19岁呢？一首《初爱》致从前的自己，一首《稻香》给现在的我。</p>
<p>刚翻了一下以前的那三篇日志，真的有很多的宝贵的东西已经遗失了呢，还好，我现在已经有勇气找回他们了。</p>
<p>你一定可以的。</p>
<p>一定可以的。</p>
<br>

<p>加油，小太阳</p>
]]></content>
      <categories>
        <category>生日</category>
      </categories>
  </entry>
  <entry>
    <title>2017-05 DIARY日报</title>
    <url>/blog/2017/05/05/2017-05-diary-e6-97-a5-e6-8a-a5/</url>
    <content><![CDATA[<h1 id="2017-05-04"><a href="#2017-05-04" class="headerlink" title="2017-05-04"></a>2017-05-04</h1><h2 id="SUMMARY"><a href="#SUMMARY" class="headerlink" title="SUMMARY"></a>SUMMARY</h2><p>今天继续羽毛球，遇见两个好搭档，成功霸场，大臂继续疑似拉伤。最近很安逸，处于舒适区，需要搞点事情。</p>
<h2 id="SKILL-TREE"><a href="#SKILL-TREE" class="headerlink" title="SKILL TREE"></a>SKILL TREE</h2><h3 id="健身"><a href="#健身" class="headerlink" title="健身"></a>健身</h3><ul>
<li>羽毛球 2h</li>
</ul>
<h5 id="核心加强计划"><a href="#核心加强计划" class="headerlink" title="核心加强计划"></a>核心加强计划</h5><ul>
<li>卷腹 15*2</li>
<li>平板支撑 30s*2</li>
</ul>
<h2 id="STATISTIC"><a href="#STATISTIC" class="headerlink" title="STATISTIC"></a>STATISTIC</h2><ul>
<li>体重 59.05kg</li>
</ul>
<p>   </p>
<h1 id="2017-05-05"><a href="#2017-05-05" class="headerlink" title="2017-05-05"></a>2017-05-05</h1><h2 id="SUMMARY-1"><a href="#SUMMARY-1" class="headerlink" title="SUMMARY"></a>SUMMARY</h2><p>今天没忍住继续打球，手臂终于坚持不住了，今天起必须休养半个月。</p>
<h2 id="SKILL-TREE-1"><a href="#SKILL-TREE-1" class="headerlink" title="SKILL TREE"></a>SKILL TREE</h2><h3 id="英语"><a href="#英语" class="headerlink" title="英语"></a>英语</h3><ul>
<li>扇贝新闻 3篇</li>
</ul>
<h3 id="健身-1"><a href="#健身-1" class="headerlink" title="健身"></a>健身</h3><ul>
<li>跑步机 2000m 12.5km&#x2F;h</li>
<li>羽毛球 1.5h</li>
</ul>
<h5 id="核心加强计划-1"><a href="#核心加强计划-1" class="headerlink" title="核心加强计划"></a>核心加强计划</h5><ul>
<li>平板支撑 45s*4</li>
</ul>
<h2 id="STATISTIC-1"><a href="#STATISTIC-1" class="headerlink" title="STATISTIC"></a>STATISTIC</h2><ul>
<li>体重 59.40kg</li>
</ul>
<p>   </p>
<h1 id="2017-05-06"><a href="#2017-05-06" class="headerlink" title="2017-05-06"></a>2017-05-06</h1><h2 id="SUMMARY-2"><a href="#SUMMARY-2" class="headerlink" title="SUMMARY"></a>SUMMARY</h2><p>成功掌握了焊接机械键盘轴的技能，还挺好玩的，需要细心</p>
<h2 id="SKILL-TREE-2"><a href="#SKILL-TREE-2" class="headerlink" title="SKILL TREE"></a>SKILL TREE</h2><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul>
<li>学会机械键盘换轴</li>
</ul>
<h3 id="英语-1"><a href="#英语-1" class="headerlink" title="英语"></a>英语</h3><ul>
<li>扇贝新闻 2篇</li>
</ul>
<h2 id="STATISTIC-2"><a href="#STATISTIC-2" class="headerlink" title="STATISTIC"></a>STATISTIC</h2><ul>
<li>体重 59.90kg</li>
</ul>
<p>   </p>
<h1 id="2017-05-07"><a href="#2017-05-07" class="headerlink" title="2017-05-07"></a>2017-05-07</h1><h2 id="SUMMARY-3"><a href="#SUMMARY-3" class="headerlink" title="SUMMARY"></a>SUMMARY</h2><p>吃饱喝足休息一天</p>
<h2 id="SKILL-TREE-3"><a href="#SKILL-TREE-3" class="headerlink" title="SKILL TREE"></a>SKILL TREE</h2><h3 id="电影"><a href="#电影" class="headerlink" title="电影"></a>电影</h3><ul>
<li>《摔跤吧！爸爸》</li>
</ul>
<h3 id="烹饪"><a href="#烹饪" class="headerlink" title="烹饪"></a>烹饪</h3><ul>
<li>柠檬黄油煎鸡胸</li>
</ul>
<p> </p>
<h2 id="STATISTIC-3"><a href="#STATISTIC-3" class="headerlink" title="STATISTIC"></a>STATISTIC</h2><ul>
<li>体重 59.90kg</li>
</ul>
<p>   </p>
<h1 id="2017-05-08"><a href="#2017-05-08" class="headerlink" title="2017-05-08"></a>2017-05-08</h1><h2 id="SUMMARY-4"><a href="#SUMMARY-4" class="headerlink" title="SUMMARY"></a>SUMMARY</h2><p>发现软件SwitchHosts。公司代码上线CDN试验成功。</p>
<h2 id="SKILL-TREE-4"><a href="#SKILL-TREE-4" class="headerlink" title="SKILL TREE"></a>SKILL TREE</h2><h3 id="健身-2"><a href="#健身-2" class="headerlink" title="健身"></a>健身</h3><ul>
<li>跑步机 2000m 12.5km&#x2F;h</li>
</ul>
<h2 id="STATISTIC-4"><a href="#STATISTIC-4" class="headerlink" title="STATISTIC"></a>STATISTIC</h2><ul>
<li>体重 59.15kg</li>
</ul>
<p>   </p>
<h1 id="2017-05-09"><a href="#2017-05-09" class="headerlink" title="2017-05-09"></a>2017-05-09</h1><h2 id="SUMMARY-5"><a href="#SUMMARY-5" class="headerlink" title="SUMMARY"></a>SUMMARY</h2><p>今天买了想买很久的3DS，一个限量版xbox one s 蓝牙手柄，还有一张闪迪的32G SD卡。最近买的东西有点多，要努力点别浪费时间啊。今天别的事啥事没干，真是废柴啊，要积极利落起来啊。 发现一个很厉害的网盘搜索<a href="http://www.panc.cc./" target="_blank" rel="noopener">http://www.panc.cc。</a></p>
<h2 id="SKILL-TREE-5"><a href="#SKILL-TREE-5" class="headerlink" title="SKILL TREE"></a>SKILL TREE</h2><h3 id="烹饪-1"><a href="#烹饪-1" class="headerlink" title="烹饪"></a>烹饪</h3><ul>
<li>基础版味噌汤</li>
</ul>
<h2 id="STATISTIC-5"><a href="#STATISTIC-5" class="headerlink" title="STATISTIC"></a>STATISTIC</h2><ul>
<li>体重 59.15kg</li>
</ul>
<p>   </p>
<h1 id="2017-05-10"><a href="#2017-05-10" class="headerlink" title="2017-05-10"></a>2017-05-10</h1><h2 id="SUMMARY-6"><a href="#SUMMARY-6" class="headerlink" title="SUMMARY"></a>SUMMARY</h2><p>找了一些3DS游戏</p>
<h2 id="SKILL-TREE-6"><a href="#SKILL-TREE-6" class="headerlink" title="SKILL TREE"></a>SKILL TREE</h2><h2 id="STATISTIC-6"><a href="#STATISTIC-6" class="headerlink" title="STATISTIC"></a>STATISTIC</h2><ul>
<li>体重 60.25kg</li>
</ul>
<p>   </p>
<h1 id="2017-05-11"><a href="#2017-05-11" class="headerlink" title="2017-05-11"></a>2017-05-11</h1><h2 id="SUMMARY-7"><a href="#SUMMARY-7" class="headerlink" title="SUMMARY"></a>SUMMARY</h2><p>3DS到货了，成色略差，但是功能很好。手柄有些问题，准备退货。至于3DS破解，就是跟着有人总结的pdf文件一步一步做下来就行，还是挺佩服这些写破解文件的开发人员的。</p>
<h2 id="SKILL-TREE-7"><a href="#SKILL-TREE-7" class="headerlink" title="SKILL TREE"></a>SKILL TREE</h2><h3 id="其他-1"><a href="#其他-1" class="headerlink" title="其他"></a>其他</h3><ul>
<li>A9破解3DS</li>
</ul>
<h2 id="STATISTIC-7"><a href="#STATISTIC-7" class="headerlink" title="STATISTIC"></a>STATISTIC</h2><ul>
<li>体重 60.25kg</li>
</ul>
<p>   </p>
<h1 id="2017-05-12"><a href="#2017-05-12" class="headerlink" title="2017-05-12"></a>2017-05-12</h1><h2 id="SUMMARY-8"><a href="#SUMMARY-8" class="headerlink" title="SUMMARY"></a>SUMMARY</h2><p>改BUG改的头大，结果发现是数据问题，还是我定位问题的方法有问题，应该更快速发现BUG的原因。  </p>
<h2 id="SKILL-TREE-8"><a href="#SKILL-TREE-8" class="headerlink" title="SKILL TREE"></a>SKILL TREE</h2><h2 id="STATISTIC-8"><a href="#STATISTIC-8" class="headerlink" title="STATISTIC"></a>STATISTIC</h2><ul>
<li>体重 59.75kg</li>
</ul>
<p>   </p>
<h1 id="2017-05-13"><a href="#2017-05-13" class="headerlink" title="2017-05-13"></a>2017-05-13</h1><h2 id="SUMMARY-9"><a href="#SUMMARY-9" class="headerlink" title="SUMMARY"></a>SUMMARY</h2><p>约拍了一个妹子，还行，因为妹子人很憨厚很不错。我还应该表现得更专业和自信一些。玩了一下午游戏，没好好吃饭，不应该这样。也可能是玩上了一直以来想玩的游戏掌机，小时候爸妈不可能给买，所以弥补了儿时的渴望，就像小时候玩游戏一样疯狂啊，还是要控制自己。称重一下瘦了4斤，有点夸张，以后一个人也要好好吃饭。</p>
<h2 id="SKILL-TREE-9"><a href="#SKILL-TREE-9" class="headerlink" title="SKILL TREE"></a>SKILL TREE</h2><h3 id="摄影"><a href="#摄影" class="headerlink" title="摄影"></a>摄影</h3><ul>
<li>人像约拍99元</li>
</ul>
<h2 id="STATISTIC-9"><a href="#STATISTIC-9" class="headerlink" title="STATISTIC"></a>STATISTIC</h2><ul>
<li>体重 58.25kg</li>
</ul>
<p>   </p>
<h1 id="2017-05-14"><a href="#2017-05-14" class="headerlink" title="2017-05-14"></a>2017-05-14</h1><h2 id="SUMMARY-10"><a href="#SUMMARY-10" class="headerlink" title="SUMMARY"></a>SUMMARY</h2><p>今天去拿到了900块买的新大三，发现非常的划算，32G SD + 64G SD + GW卡 + new 3DSLL，而且还基本装满了游戏，感觉这配置很豪华。但是我手贱点了一下升级系统，GW虚拟系统就不能启动了，很郁闷，搞了半天没办法了。以后没有问题的时候还是不要瞎折腾，就算要瞎折腾也应该在充分了解信息的情况下，分析利弊，再做决定。冲动往往导致一些不好的结果。</p>
<h2 id="SKILL-TREE-10"><a href="#SKILL-TREE-10" class="headerlink" title="SKILL TREE"></a>SKILL TREE</h2><h2 id="STATISTIC-10"><a href="#STATISTIC-10" class="headerlink" title="STATISTIC"></a>STATISTIC</h2><p>   </p>
<h1 id="2017-05-15"><a href="#2017-05-15" class="headerlink" title="2017-05-15"></a>2017-05-15</h1><h2 id="SUMMARY-11"><a href="#SUMMARY-11" class="headerlink" title="SUMMARY"></a>SUMMARY</h2><p>今天状态还行，下面要开始抓紧办理离职手续了。3DS的系统再不想折腾了，毕竟买游戏机的初衷是玩想玩的那几个游戏，而不是装很多游戏装逼，更不是折腾系统什么的，感觉折腾系统已经花费了很多时间了，还是静待GW官网更新吧。今天记录了一下在公司时发现的一些好用的software：<a href="http://diaryfun.info/2017/05/%E8%AE%B0%E5%BD%95%E4%B8%80%E4%BA%9B%E5%A5%BD%E7%94%A8%E7%9A%84%E8%BD%AF%E4%BB%B6/" target="_blank" rel="noopener">http://diaryfun.info/2017/05/记录一些好用的软件/</a></p>
<h2 id="SKILL-TREE-11"><a href="#SKILL-TREE-11" class="headerlink" title="SKILL TREE"></a>SKILL TREE</h2><h3 id="健身-3"><a href="#健身-3" class="headerlink" title="健身"></a>健身</h3><ul>
<li>跑步机2000m 11km&#x2F;h</li>
</ul>
<h3 id="烹饪-2"><a href="#烹饪-2" class="headerlink" title="烹饪"></a>烹饪</h3><ul>
<li>红焖牛肉</li>
<li>海鲜菇牛腩汤</li>
</ul>
<h2 id="STATISTIC-11"><a href="#STATISTIC-11" class="headerlink" title="STATISTIC"></a>STATISTIC</h2><ul>
<li>体重 58.25kg</li>
</ul>
]]></content>
      <categories>
        <category>日报</category>
      </categories>
  </entry>
  <entry>
    <title>2019腾讯游戏开发工程师笔试题</title>
    <url>/blog/2019/03/09/2019%E8%85%BE%E8%AE%AF%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%AC%94%E8%AF%95%E9%A2%98/</url>
    <content><![CDATA[<h4 id="第一题"><a href="#第一题" class="headerlink" title="第一题"></a>第一题</h4><p><img src="https://i.postimg.cc/SsjYGJ8D/1-1.png" alt="img"><br><img src="https://i.postimg.cc/zfxRWnLy/1-2.png" alt="img"><br><img src="https://i.postimg.cc/MT4M3qmx/1-3.png" alt="img"><br><img src="https://i.postimg.cc/NFHyWSdX/1-4.png" alt="img"></p>
<h4 id="第二题"><a href="#第二题" class="headerlink" title="第二题"></a>第二题</h4><p><img src="https://i.postimg.cc/sDW03Jx9/2-1.png" alt="img"><br><img src="https://i.postimg.cc/K4hKFfWH/2-2.png" alt="img"><br><img src="https://i.postimg.cc/sfvNNzRL/2-3.png" alt="img"></p>
<h4 id="第三题"><a href="#第三题" class="headerlink" title="第三题"></a>第三题</h4><p><img src="https://i.postimg.cc/sgRHxZZF/3-1.png" alt="img"><br><img src="https://i.postimg.cc/59TRcr42/3-2.png" alt="img"></p>
<h4 id="第四题"><a href="#第四题" class="headerlink" title="第四题"></a>第四题</h4><p><img src="https://i.postimg.cc/W4N96LnX/4-1.png" alt="img"><br><img src="https://i.postimg.cc/DwdjXyqS/4-2.png" alt="img"></p>
<h4 id="第五题"><a href="#第五题" class="headerlink" title="第五题"></a>第五题</h4><p><img src="https://i.postimg.cc/6QMMMjbw/5-1.png" alt="img"><br><img src="https://i.postimg.cc/qRgjSsWK/5-2.png" alt="img"></p>
]]></content>
  </entry>
  <entry>
    <title>24岁小结</title>
    <url>/blog/2018/09/24/24%E5%B2%81%E5%B0%8F%E7%BB%93/</url>
    <content><![CDATA[<p>24岁，这一年经历了几个对我而言很重要的事件，也度过了一段比较难受的日子。</p>
<p>没有明白什么新的道理，不再像年少时那样进步飞速，一年有一年新的样子，更多时候是在实践中反复摸索。</p>
<p>已经不再习惯在生日时写一些长篇壮志。只是这一年，使我更加确定的是，人生无常，一定要明白自己生命中真正最想要的是什么，假如下一秒即将死亡，你最遗憾的事会是什么。即使暂时得不到，暂时无法做自己想要做的事，也至少理应明晰自己的方向。</p>
<p>关于我最想要的，在我22岁时已说过，愿矢志不渝。</p>
<p>愿乘长风破万里浪。</p>
]]></content>
      <categories>
        <category>生日</category>
      </categories>
  </entry>
  <entry>
    <title>25岁生日来不及写的文章</title>
    <url>/blog/2019/10/24/25%E5%B2%81%E7%94%9F%E6%97%A5%E6%9D%A5%E4%B8%8D%E5%8F%8A%E5%86%99%E7%9A%84%E6%96%87%E7%AB%A0/</url>
    <content><![CDATA[<p>今年生日时没有来得及写文章，在第十年的这个节骨眼上打破了从16岁开始延续9年的习惯，一直在找一个时间补上。</p>
<br>

<p>不知是时代的原因还是我的原因，生活的节奏越来越快，感觉文字越来越匮乏。本来打算写一些“25了，四舍五入就是30岁了”的玩笑话，后来顿时感到无味。不知道是觉没睡够还是觉睡太多，大脑越来越不灵活，思考的时间也被压缩。</p>
<br>

<p>当今多数人类奋斗的本质是资源分配问题，尤其在科技进步放缓的当下，蛋糕变大放缓，分蛋糕问题就显得尤为重要。如何前赴后继的剥削与避免被剥削，是精致利己主义者心中的小算盘，也是广大劳苦群众无奈的被动选择。利用不限于粉丝经济的信息流量和以抽卡盲盒为代表的赌徒心理收割快钱，再用微博抖音奶头乐营造消费主义盛世幻象，不便多说。</p>
<br>

<p>幸福来源于生活中微小感觉的积累，有一天我想到我家猫的同时也想到了这一点。大概因为我在失去猫咪之后，觉得有猫的人都是幸福的。被忽略的不起眼细节，而不是一些表象，经常影响生活质量和幸福水平。有一天夜晚我躺在床上，突然就理解了“老婆孩子热炕头”一家人其乐融融的平凡幸福。生活的大部由平凡琐事构成，如果一天中多数时间的感觉是正向的，那么通常会感到幸福而满足。</p>
<br>

<p>在生日那天我受到了几个陌生人的微小帮助，爸妈打电话过来祝福，再到最后离别时看见为我过生日的女朋友在公交车上朝下面的我疯狂挥手，我突然有点感动。真实而回味绵长的幸福往往不来源于消费，而是来源于你妈做了顿红烧肉而其中的酯类物质比例刚刚好。</p>
<br>

<p>慢而坚实比较好，不是什么都要立见成效。</p>
<br>

<p>不要忘了学习主要是为了开心。</p>
<br>

<p>最近一年都没怎么听音乐，怀念那个43路车上每天戴耳机的少年。</p>
<br>

<p>2019.9.24 生日<br>2019.10.9 完稿<br>2019.10.24 发送</p>
]]></content>
      <categories>
        <category>生日</category>
      </categories>
  </entry>
  <entry>
    <title>2019网易游戏引擎工程师笔试题</title>
    <url>/blog/2019/03/09/2019%E7%BD%91%E6%98%93%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%AC%94%E8%AF%95%E9%A2%98/</url>
    <content><![CDATA[<h4 id="第一题"><a href="#第一题" class="headerlink" title="第一题"></a>第一题</h4><p><img src="https://i.postimg.cc/pLJyH2kR/1-1.png" alt="img"><br><img src="https://i.postimg.cc/KcC17pRS/1-2.png" alt="img"><br><img src="https://i.postimg.cc/tCPYBdx1/1-3.png" alt="img"></p>
<h4 id="第二题"><a href="#第二题" class="headerlink" title="第二题"></a>第二题</h4><p><img src="https://i.postimg.cc/bwhdWGxm/2-1.png" alt="img"><br><img src="https://i.postimg.cc/k5j42fkH/2-2.png" alt="img"><br><img src="https://i.postimg.cc/j5LjPyTS/2-3.png" alt="img"><br><img src="https://i.postimg.cc/25jyjPXv/2-4.png" alt="img"></p>
<h4 id="第三题"><a href="#第三题" class="headerlink" title="第三题"></a>第三题</h4><p><img src="https://i.postimg.cc/XNBJvKx2/3-1.png" alt="img"><br><img src="https://i.postimg.cc/xCh1Rqjy/3-2.png" alt="img"><br><img src="https://i.postimg.cc/yxRYrBkq/3-3.png" alt="img"></p>
]]></content>
  </entry>
  <entry>
    <title>一些关于焦虑的思考</title>
    <url>/blog/2021/09/24/27/</url>
    <content><![CDATA[<p>43路公交车，从水厂到牟家堡之间需要3分钟，这路段车比较少，所以司机一般开得很快。或许是车比较破旧的原因，总感觉车框一直在摇动。这段路虽然很短，但是却是我每天内心最平静祥和的时光。那时候我经常会戴上耳机，专门切换到漂移和一路向北，打开车窗，在这一段路上，享受这片刻的安宁。</p>
<p>现如今，只有在打车回家的高速上，才能找回一点点当初的感觉。什么也不想，直面风声，让汽车行驶的白噪音填充一切，这是我最喜欢的时刻，我不知道为什么。或许每个人都需要有一种方式，让自己重新充满某种难以描述的平和的能量，梳理思绪，然后重新回归生活，又或许只有我需要。</p>
<p>我这个人对独处有所依恋。这不意味着逃避社交，但是一段时间的缺乏独处必定会使我不安与烦躁。我很需要自己与自己对话的时间，屏蔽一切声音，脑内对话的时间，这让我感到舒适。</p>
<p>很久没有写文章，但是写文章的过程于我而言是一种很重要的方式，在一个系统的框架下发散思维，与自己对话，整理思维，然后收敛在某些主题与结论，虽然很可能是絮絮叨叨。</p>
<p>这一年来我明显感到自己的焦虑，原因很复杂，有外部环境的因素，但是我觉得还是应该先和自己的内心达成共识。</p>
<p>“暮春者，春服既成，冠者五六人，童子六七人，浴乎沂，风乎舞雩，咏而归。”有一天我在楼下超市买菜，忽然想起这句话。不应该忘记自己想成为的样子，正如我会一直记得这篇高一时的课文一样。据说子路最后战死沙场，冉有也成为一国之相，而曾皙也确实放浪形骸俨然一副吟游诗人的模样。整个高中年代，我也因为这篇课文立曾皙为同伴，从来没有跟他人攀比过，而现在呢？</p>
<p>我已经很久没和自己对话了，而在27岁夜里的这一次对话，让我感到安心，我似乎还没有完全失去这种能力。</p>
<p>焦虑的本源，不过是急于求成，强迫自己脱离自我节奏去追求过高的目标，从而抛弃了活在当下的本心。</p>
<p>这种状态其实反而阻碍了稳定的进步，短期的急躁并不利于长期的目标，却使思绪纷乱，冲昏头脑，让人无法沉下心来完成手头的每一件事。</p>
<p>回想起自己高三时的状态，对一切毫不担心，充满自信，让一切水到渠成。</p>
<p>或许这就是对抗焦虑的核心。</p>
<p>而实操层面对抗焦虑的途径，我想大致可以为自己做个总结：</p>
<ul>
<li>专注当下所做的事，专注才可以产生心流，产生稳定的愉悦。</li>
<li>少看手机，少让大脑接触过多不必要的信息。</li>
<li>给自己一些什么也不用想的时间，不是每时每刻都必须做点什么。</li>
<li>还有一点就是需要自信。</li>
<li>多睡觉。</li>
</ul>
<p>27岁，或许可以先从多睡觉开始。</p>
]]></content>
      <categories>
        <category>生日</category>
      </categories>
  </entry>
  <entry>
    <title>43、我的43</title>
    <url>/blog/2011/01/21/43%E3%80%81%E6%88%91%E7%9A%8443/</url>
    <content><![CDATA[<p>也有人问过，我的幸运数字是几，其实我也不太清楚，没有多想，我告诉他，是43。</p>
<p>&nbsp;</p>
<p>说到43，这个对我来说再熟悉不过的数字，我不想说太多，只想表达一下自己心中最真实而温暖的感受。可以这么说，43成为了我的习惯，前一阵子吃过一段时间的小饭桌，中午不回家，这本是为了更好的午休，而我却常常觉得不爽，尤其是在看到43在马路对面的车站停靠时，我总是有一种想要冲上车去的冲动。每天坐的次数由原来的四次变为了两次，按常理来说本应该觉得轻松的，但恰恰相反，有点累，或者说，总有些疲惫的感觉。吃了快两个月，我对我妈说，我中午想回家了，理由是：“我想坐43了。”有时候觉得这个理由有点傻，但是真的。</p>
<p>&nbsp;</p>
<p>有一次听到同学谈论一些关于私家车的问题，我说，我家有自行车，他们打趣地说，43不是你家的么，哈哈，就是，有时候真的觉得43是我一个不可失去的拥有，它属于我，至少在心灵层面上，它对我来说是一个类似于家一样的存在，不想多说，其实也没有什么可说，就是，很温暖，像它那暖和的皮垫子一样。</p>
<p>&nbsp;</p>
<p>43的皮座位，好像是它所特有的，看上去感觉就很好，有一种说不上的很适合喝奶茶的气息，至于在椅背上胡写乱画，比如说“XXX喜欢XXX”“XXX是个二百五”之类的，那些都是小时候的事了，我写的应该，不是应该，是肯定早九辈子没有了。有一次，听到一个刚上车的陌生人说，你瞧，这43这破车都烂成什么样了，我心里什么滋味，涩涩的。我曾经在我的生日愿望里写下，希望43不要换新车，毕竟从小到大坐得久了。</p>
<p>&nbsp;</p>
<p>听音乐，更准确的来说应该是听歌。一上车，站着，等有双人的座位空下后，再坐在靠窗的位置上，从口袋里笨兮兮的掏出来一个MP3，解开缠绕的耳机线，短线为左，长线为右，塞在耳朵里，耳机的海绵套蓬蓬的很有厚重感。调大音量，盖过43发动机的轰鸣声，不知道为什么，在车上听歌总是比其他情况下听歌更有感觉，或许是因为车的轰鸣声使低音更加充实，或许是因为车的开动使节奏更加清晰，或许都不是，有时候听歌，就感觉是自己在唱，就这样一句一句地在心里唱出歌词，才会被感动，其实，也就是被自己感动。</p>
<p>&nbsp;</p>
<p>写文章，每次的灵感似乎都是在做43时产生的，不知道为什么，就是这样，喜欢把车窗向前推开，风吹进来，大脑空空的，进入了一种自动读取自己心灵的状态，然后文字就源源不断的流淌出来，貌似是在对别人诉说，也许就是在对自己诉说，其实就是独白。当然，不知不觉流出来太多文字，就一时难以记录，于是就一个人静静地走回家（不敢跑、因为害怕加速遗忘），用铅笔，不停的回忆，找回并记录下那些文字，不过总是会有些遗憾，因为大部分的文字还是被快速地遗忘，如同褪色，今天也一样。</p>
<p>&nbsp;</p>
<p>坐在43上心情总是平静的。似乎没有什么事可以扰乱这个定律，总感觉43有一种奇特的力量，一种使人清醒且安静的力量，一种使人无法也无暇去感受孤独的力量。我不知道为什么，但确实是这样。坐在43上，任风把一切的烦恼吹到时光之外，散落在某个未知的荒原，在这一段短暂的行程中，就再也不去拾起，这未尝不是一种最好的享受。车厢内仿佛是一个独立的时空，身在其中，感觉不到忧伤，心灵可以小憩。淡泊以明志，宁静以致远，最近很喜欢这句话，坐在43上的时候，应该就是我最宁静的时间，可以淡泊了一切，可以看清的更多，我想，这就是所谓的思考。每天都有两个小时花在43上，除了困倦的时候用来睡觉，剩下的时间，大概都在重复着这种广泛的思考。有的时候也会思考得很深，但一下车便忘了，偶尔也会拼命地去回忆，浓缩几句，就记在我的那个大本子上。至于使人无法去感受孤独，倒不如说是使人感受到了独处的美妙，一个人，没人打扰，尽情思考，也不错。</p>
<p>&nbsp;</p>
<p>最喜欢坐着43冲过那一段树林旁的路，也就是所谓的西固苗圃，里面有着大片大片不同种类的树苗。天气好的时候，总觉得这里的空气会比较清新，于是打开窗户，扑面而来的空气，淡淡的，似乎也没有什么特别的味道，但是那种风扑在脸上的感觉，很惬意，或者说是一种轻快感，尤其是在回家的时候，这种感觉更为强烈。曾经写了一首诗，写到冲向死亡的夏天，那种感觉坐在43上才能够更好地有所感受。顶风前行，或许会使人更容易联想到飞翔，而坐在飞驰的43上，则有一种飞速奔跑的感觉，尤其在黑夜，感受到快要凝止的呼吸，感受到快要喷涌而出的血液，此刻，用呼吸让自己沉浸其中，脑海就像被抽成了真空，时间、空间，以及其他的一切，仿佛都在这一瞬间与我无关，只有耳边的音乐，还有紧皱的眉头，深邃而锐利的目光。被融化的感觉。</p>
<p>&nbsp;</p>
<p>突然想说说在车上爱听的歌了。我习惯于通过每一首歌的时间凭经验计算好它所经过的路程，于是，我就完全可以在某个时间某个路段，根据某一种心情，播放某一首歌。就这样，每首歌都有了它最适合的环境，都只喜欢在特定的环境下被按下播放。一直如此，我也乐此不疲。</p>
<p>&nbsp;</p>
<p>感受最深的一首歌就是周杰伦的《飘移》。“找只笔写下日期记录勇气，我可以对着墙壁让拳头叛逆。”回家的时候听，就在车开得最快的那一段听，风声、43的发动机声、车轮的飞转声，以及音乐里的风声、发动机声、超车声、刹车声、飘移声，混杂在一起，感觉整颗心、整个世界、整个闭上眼后偌大的空间，都在一起飘移。同时有一种向前冲的感觉，至于冲向什么，放空眼前，不知道，只觉得心里充斥着无穷的力量，等待爆发。感受很相似的一首歌是他的《一路向北》，再不多说，然而碰巧的是，这一段路，恰好是一路向北。</p>
<p>&nbsp;</p>
<p>而他的《晴天》《园游会》《稻香》和南拳妈妈的《香草吧噗》《橘子汽水》《河流•午后•我经过》则适合在一个阳光充足的大晴天，坐在向阳的车窗边，打开窗，听。当然最好是在回家的路上听，那样会感到更轻松。到冬天，晚上放学天就全黑了，在车上听《夜曲》，特别有感觉。灯光在车厢内流动，光影交错，那些明的、暗的，参差着、交织着，更像是一幅华丽的乐章。静静地，看椅背的影子投射在前一个椅背上，渐渐升高、变淡、随着新的影子的出现而褪去、消失，再升高、变淡、褪去、消失，如此循环，车就这样走过了一个又一个橘色的路灯。在这样光与影的和弦进行下，也适合听石头剪子布的《时间》，诡秘的节奏，容易引发诡秘的思考。可以说的歌太多，看来是说不完了，我想，每一首歌都有着它特有的意象，而我只是对这些意象做出了相似的还原。</p>
<p>&nbsp;</p>
<p>未来，有时候真的不敢想未来，等到高中毕业之后，去外地上大学，就再也坐不了43了，或许心里会有些空荡荡的。从小时候拉着爷爷奶奶的手去逛菜市场坐43不用买票，到后来每天坐43上初中、高中，43路车一直都没有变。倘若每次坐车都给座位上扎个洞，那我估计43二十几辆车，每辆车的后三排座位都得让我给扎穿，或者直接扎没了都有可能，嘿嘿。想象到时候放假回家看到43，应该会是特激动吧，或者就是温暖得无话可说？43承载了些什么，太多了以至于我说也说不清，反正我一看到43就知道，我到家了。</p>
<p>&nbsp;</p>
<p>43，我的43。</p>
<p> &nbsp;</p>
<p>2010.11.09</p>
<p>&nbsp;</p>
<p><strong>后记：</strong></p>
<p> &nbsp;</p>
<p>就在2010年12月23日（冬至后一日），43换新车了。再也没有那朴实亲切的红白条纹了，再也没有那平实温暖的皮质座位了，再也没有那庞大的噪声做我听歌时厚重的低音了，取而代之的，是看起来更加“现代”的一切。从前的43，带着它所承载的我所寄予的一切，从我的世界里突然消失。当我再次站在车站，看到新的43那副冰冷的、陌生的外壳时，我感到一种巨大的、生硬的缺失，我想，我应该知道那是什么，我与43十年来潜存的默契，就此而终结。我不知道我是否应该感到无奈，但我知道我必须接受这改变。没有什么是一成不变的，我所做的，应该只是珍惜与释然。就这样。</p>
<p>&nbsp;</p>
<p>还有记忆。还有我。</p>
<p>还有我的43。</p>
<p>​                                                                                    </p>
<p> &nbsp;</p>
<p><strong>以下照片转自bbs.xbus.com，拍摄于2008年</strong></p>
<p><img src="http://r.photo.store.qq.com/psb?/dab198f8-463e-4f73-82ef-fd284ba9efd6/FIs0i8LPtlRwHrfAzExmRxAhWsbTWqkdUeM50ccxYgw!/o/dPIJ3pNhDwAA&bo=VQOAAigEHgMBAMI!" alt="图片"></p>
<p><img src="http://r.photo.store.qq.com/psb?/dab198f8-463e-4f73-82ef-fd284ba9efd6/FNt0KU0ctZt4XMKKzdG80C7eIYUG8Hm69K2MCid5RCE!/o/dE*MeZTvDwAA&bo=VQOAAigEHgMBAMI!" alt="图片"></p>
<p><img src="http://r.photo.store.qq.com/psb?/dab198f8-463e-4f73-82ef-fd284ba9efd6/U9REdct*qSXCb7REH2rKUwg9py6NXCx9BKQz1FHAg.A!/o/dDGC1pNZDwAA&bo=VQOAAigEHgMBAMI!" alt="图片"></p>
<p>&nbsp;</p>
<p><strong>（增补于2014.3.23）</strong> </p>
]]></content>
  </entry>
  <entry>
    <title>A Simple Understanding of Gamma Space and Linear Space</title>
    <url>/blog/2020/08/18/A-simple-understanding-of-Gamma-space-&amp;-linear-space/</url>
    <content><![CDATA[<p>首先，我们来看一下这张图，其中 <strong>CRT gamma</strong> 曲线表示了老式CRT显示器中电压与亮度的关系，其中2.2为1953年确定的电视编码标准中的gamma值，接近大多数CRT显示器的原生gamma值，而现代 LCD 显示器已经不再具有这个特性，但是生产厂商仍旧会加入模拟 Gamma 曲线的硬件功能。<strong>gamma correction</strong> 曲线则是为了色彩正确显示而提出的gamma校正曲线，在图像保存时，颜色通常经过一次gamma校正以保存为一个较大数值，当显示时，由于显示器特性，会正好转换回校正前的物理亮度显示。</p>
<p><img src="https://raw.githubusercontent.com/DiaryChris/typora-image/master/typora/202008/18/114654-494309.jpeg" alt="gamma curve"></p>
<p>接下来，介绍一个重要的韦伯-费希纳定理（Weber-Fechner law），描述了物理刺激中的实际变化与感知变化之间的关系，即人眼对于亮度的感知是非线性的。</p>
<p>如下图所示，人眼对于暗部的感知更加精细，所以暗部亮度应当使用更细的精度保存。</p>
<p>结合这两点，HP与Microsoft 1996 年巧妙地结合了人眼感知的经验曲线与老式显示器的行业标准，选取gamma &#x3D; 2.2的校正曲线，提出了sRGB color space，所以sRGB空间为gamma空间中应用最广泛的一种。</p>
<p><img src="https://raw.githubusercontent.com/DiaryChris/typora-image/master/typora/202008/19/131452-613153.png" alt="detected light"></p>
<p><img src="https://raw.githubusercontent.com/DiaryChris/typora-image/master/typora/202008/19/105005-986928.png" alt="gamma_correction_brightness"></p>
<p>我们来看一下两种典型的中灰是如何被保存并进行光照计算与显示的。</p>
<p>第一种是物理亮度意义上的中灰，即物理亮度为0.5，也称为线性空间中的0.5灰。</p>
<p>假设在线性空间下的调色版（如PS中32位&#x2F;通道模式下的调色板）中，美术选取了值为0.5的灰色（并不是人眼感知的0.5灰），保存到sRGB空间时，会经过gamma校正保存为0.72。之后我们将其转换回线性空间值0.5进行光照计算，若光照计算后结果仍为0.5，那么我们转回sRGB空间继续保存为0.72。当显示器显示时，会将0.72作为输出电压（老式CRT显示器）或者进行CRT gamma模拟（现代LCD显示器），显示出0.5物理亮度的灰色。</p>
<p><img src="https://raw.githubusercontent.com/DiaryChris/typora-image/master/typora/202008/19/104152-906103.png" alt="a1"></p>
<p><img src="https://raw.githubusercontent.com/DiaryChris/typora-image/master/typora/202008/19/104135-825367.png" alt="a1"></p>
<p>第二种是人眼感知意义上的中灰，即在人眼感知曲线上的灰度值为0.5，也称为sRGB空间中的0.5灰，实际物理亮度其实仅有0.218。</p>
<p>假设在sRGB空间下的调色版（如PS中8位&#x2F;通道模式下的调色板）中，美术选取了值为0.5的灰色（也是人眼感知的0.5灰），保存到sRGB空间时，会直接保存为0.5。之后我们将其转换回线性空间0.218值进行光照计算，若光照计算后结果仍为0.218，那么我们转回sRGB空间会继续保存为0.5。当显示器显示时，会将0.5作为输出电压（老式CRT显示器）或者进行CRT gamma模拟（现代LCD显示器），显示出0.218物理亮度的灰色，而这个颜色正好是人眼感知的0.5中灰。</p>
<p><img src="https://raw.githubusercontent.com/DiaryChris/typora-image/master/typora/202008/19/104212-535350.png" alt="b1"></p>
<p><img src="https://raw.githubusercontent.com/DiaryChris/typora-image/master/typora/202008/19/104210-164728.png" alt="b2"></p>
<p>除了以上两种中灰，还有其他不同意义上的中灰，其物理亮度与sRGB值如下表所示。</p>
<p><img src="https://raw.githubusercontent.com/DiaryChris/typora-image/master/typora/202008/20/120038-909013.png" alt="image-20200820120434150"></p>
<p>而之前详述的两种中灰分别为表中的Absolute whiteness与sRGB行</p>
<p><img src="https://raw.githubusercontent.com/DiaryChris/typora-image/master/typora/202008/20/120354-670520.png" alt="image-20200820120037579"></p>
<p>有趣的是Absolute whiteness行中的图中图放大后如下，黑色为0%，白色为100%时，下图平均物理亮度应为50%，而从远处看到与sRGB(188, 188, 188)的物理亮度完全一致，这使用Dither的方法证明了sRGB(188, 188, 188)的物理亮度确实是50%。</p>
<p><img src="https://raw.githubusercontent.com/DiaryChris/typora-image/master/typora/202008/20/120655-209615.png" alt="Black-white-1px-checkers.svg"></p>
<p>最终我们发现，之所以有sRGB色彩空间存在，其根本原因是人眼感知的经验曲线和 CRT 显示器的物理响应曲线能够基本吻合，而sRGB巧妙地将人眼感知的经验曲线设定为gamma &#x3D; 2.2的gamma correction curve，兼顾了人眼感知精度与老式行业标准，不得不说这是一个美妙的Trick。</p>
]]></content>
  </entry>
  <entry>
    <title>Dijkstra和A*算法异同</title>
    <url>/blog/2020/06/02/Dijkstra%E5%92%8CA-%E7%AE%97%E6%B3%95%E5%BC%82%E5%90%8C/</url>
    <content><![CDATA[<p>1.Dijkstra算法计算源点到其他所有点的最短路径长度，A*关注点到点的最短具体路径。<br>2.Dijkstra算法建立在较为抽象的图论层面，A*算法可以更轻松地用在诸如游戏地图寻路中。<br>3.Dijkstra算法的实质是广度优先搜索，是一种发散式的搜索，所以空间复杂度和时间复杂度都比较高。对路径上的当前点，A*算法不但记录其到源点的代价，还计算当前点到目标点的期望代价，是一种启发式算法，也可以认为是一种深度优先的算法。<br>4.由第一点，当目标点很多时，A*算法会带入大量重复数据和复杂的估价函数，所以如果不要求获得具体路径而只比较路径长度时，Dijkstra算法会成为更好的选择。</p>
]]></content>
  </entry>
  <entry>
    <title>I wanna write down the dream</title>
    <url>/blog/2013/04/27/I%20wanna%20write%20down%20the%20dream/</url>
    <content><![CDATA[<p>我们在一个陌生的实验室大楼外围转来转去，我的同伴的身份在梦中还很模糊，我们终于找到了坐在办公桌前的有机化学老师，她穿着白大褂，对我们说了些什么。之后我看到一辆大巴，上面有我爸，我坐了上去，大巴开啊开，跨过了一个很长很长的大桥，下面的河我感觉像是黄河，因为那河的黄色和岸边的树我都让我觉得很眼熟。</p>
<br>

<p>又过了一段时间，我突然出现在炼二的教学楼里，我抬头望着“高三二班”的班牌，迟迟不敢进去，我觉得里面应该都是学弟学妹了，我很难受，决定下楼买吃的，我下楼，走到一楼发现从这个楼梯出不去，出口被一个玻璃橱窗挡住了，外面的学弟对着我笑，我觉得很尴尬，我想学校的变化我都已经不知道，这把人丢完了。</p>
<br>


<p>于是我回到楼上，准备绕向另一边，不知不觉却遇见了陈辉，身边也多出了两个人，陈俊儒和李柏杭，一白一黑的衣服，只有我穿的校服。陈辉让我们每三天一起做一张语文卷子，每做完一张来找她取下一张，陈俊儒拿出一张做完的卷子给她看（什么时候做的），她给了我们新的一张，看样子好像是群力还是楚星，然后我们就一起下楼，边下楼边讨论按陈辉要求这样做卷子对成绩的提高有没有帮助，我说我挺懒，我可能没时间做，他们好像没说话，我说，好吧，做吧。</p>
<br>

<p>然后陈俊儒就消失了，我和李柏杭从教学楼出来往大门走，走着走着，身后跑来个小学妹，拿了个礼物好像，我就暗自想，估计又是哪个学妹喜欢我了，正开心呢，结果小学妹是把东西送给了李柏杭，我很不爽啊，李柏杭看出来了，问我“你是不是特不爽，我刚也还以为她跑过来是找你的一个。”他长满痘痘的脸就是堆满了那种说不上来的笑。他打开礼物跟我晒，原来是个小本子，然后他又拿出几个小本子来甩啊甩，我顺手抢过来最大的一本绿皮的翻开看，发现好像是窦一秀送给他的，前几页写满了鼓励的话，我继续往后翻，发现了李柏杭的听写，不多，十几个单词标着序号，可他只错了一个。然后我就拿出我的听写本给他看，只对了三四个，有些单词不会直接写的汉语，我就问他这个词咋写，他说corper，我说这么简单我都不会，就问他，你说英语怎么学呢，“就那么学呗，我也不知道”然后稀里糊涂讲了一大堆。他突然说他要回安宁了，我问，明天还来呗？“当然了，不是要一起做语文卷子么。”然后他就走了，我一个人在校门口的台阶上收拾书包。</p>
<br>

<p>过了一会一个眼睛大大的特心疼的妹子穿校服从学校里走出来，然后我就盯着她看，她发现了我，也盯着我看，然后她越走越近，越走越近，直直地就要走到我面前了，然后嘎嘣一声，她踩到了我还没装进书包放在地上的铅笔，“对不起”，然后她就走了。。。</p>
<br>


<p>又过了一会儿，又有一大波学弟学妹们从学校里出来，我心想他们这是才下课么。突然，人群中高出别人一头像一根大葱一样的张钰祥，没穿校服穿着个蓝棉袄就向我径直冲来，他说，你怎么来了，然后我还没来得及回答他他就不见了，我愣了一下，等我回过神来发现他已经在一边被学妹在脸上挖了几道子，脸上还贴着酒精棉。。我说，你这是怎么惹人家学妹了，是不是因为你抓癞蛤蟆那个事，这不毁容么。然后学妹在人群中被簇拥着到了马路对面，我和张钰祥也跟了过去，然后我就说了学妹几句，学妹也没理我，就是不说话，然后张钰祥就上前用手横过来砍她脖子（就你当年说要对张明刚做的那姿势，张钰祥你懂的），然后又轻轻扇了学妹两饼子，我看着就感觉不疼，他对学妹说，“我这只是意思一下”。然后呢，然后我就醒了。。。  </p>
<br>

<p>这梦说明了什么，我也不知道。</p>
]]></content>
  </entry>
  <entry>
    <title>An Outline of the UE4 Deferred Shading Pipeline</title>
    <url>/blog/2020/11/16/An%20Outline%20of%20the%20UE4%20Deferred%20Shading%20Pipeline/</url>
    <content><![CDATA[<p>这几天研究了UE4的延迟渲染管线，一直进度很慢，最终发现了一个很清晰的系列文章，所以依据这一系列文章的思路总结一篇<strong>UE4延迟渲染管线概览</strong>。</p>
<p>参考文章：<a href="https://medium.com/@lordned" target="_blank" rel="noopener">https://medium.com/@lordned</a></p>
<p>此文章基于UE4的较老版本，所以本文会基于4.25版本的源码对于一些改动进行修改。</p>
<br>

<hr>
<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>UE4中存在三种主要的渲染管线，分别为<em>deferred shading pipeline</em>，<em>forward shading pipeline</em>和用于移动端的<em>tile-based deferred rendering pipeline</em>。</p>
<p>本文只涵盖<em>deferred shading pipeline</em></p>
<br>

<hr>
<h2 id="Shaders-and-Vertex-Data"><a href="#Shaders-and-Vertex-Data" class="headerlink" title="Shaders and Vertex Data"></a>Shaders and Vertex Data</h2><h3 id="Shaders"><a href="#Shaders" class="headerlink" title="Shaders"></a>Shaders</h3><p>首先，<code>FShader</code>是所有Shader的基类。</p>
<p>UE4主要有2种Shader，<code>FGlobalShader</code>和<code>FMaterialShader</code>。其中<code>FGlobalShader</code>仅存在一个全局着色器实例，这意味每个实例不能拥有各自的参数，只具有全局参数。<code>FMaterialShader</code>是所有需要材质参数的Shader的基类，允许<code>SetParameters</code>函数从C++侧改变HLSL中的材质参数。</p>
<p>其中值得注意的是继承自<code>FMaterialShader</code>的<code>FMeshMaterialShader</code>，它允许在渲染每个Mesh前设定材质参数，是所有需要材质和顶点工厂参数的着色器的基类。</p>
<p>将C++中的Shader类与HLSL中的Function进行绑定的语句为：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">IMPLEMENT_MATERIAL_SHADER_TYPE(TemplatePrefix, ShaderClass, SourceFilename, FunctionName, Frequency)</span><br></pre></td></tr></table></figure>

<p>或者包装过<code>IMPLEMENT_SHADER_TYPE</code>的这种语句：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">IMPLEMENT_GLOBAL_SHADER(ShaderClass,SourceFilename,FunctionName,Frequency)</span><br></pre></td></tr></table></figure>

<p>其中<code>Frequency</code>参数从Vertex, Hull, Domain, Geometry, Pixel, Compute中指定了着色器的类型。</p>
<p>例如：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">IMPLEMENT_MATERIAL_SHADER_TYPE(,FDepthOnlyPS,TEXT(“/Engine/Private/DepthOnlyPixelShader.usf”),TEXT(“Main”),SF_Pixel);</span><br></pre></td></tr></table></figure>

<br>

<h3 id="Caching-and-Compilation-Environments"><a href="#Caching-and-Compilation-Environments" class="headerlink" title="Caching and Compilation Environments"></a>Caching and Compilation Environments</h3><p>修改材质时，UE4将自动为Shader编译许多种可能的permutation。</p>
<p>此时<code>ShouldCompilePermutation</code>函数可以用于指定Permutation是否被编译。</p>
<p>而<code>ModifyCompilationEnvironment</code>函数则用于在编译着色器之前修改HLSL中的预处理定义。</p>
<br>

<h3 id="Vertex-Factory"><a href="#Vertex-Factory" class="headerlink" title="Vertex Factory"></a>Vertex Factory</h3><p>Vertex Factory封装顶点源数据，并且传递到到顶点着色器中。</p>
<p>首先，UE4使用<code>FPrimitiveSceneProxy</code>来指定Mesh所使用的Vertex Factory。<code>FPrimitiveSceneProxy</code>类似一个渲染线程版本的<code>UPrimitiveComponent</code>，由于UE4中的游戏线程和渲染线程数据不互通，所以使用<code>FPrimitiveSceneProxy</code>与<code>UPrimitiveComponent</code>连接来使渲染线程获取游戏数据。<code>FPrimitiveSceneProxy</code>可以在适当的时间查询游戏线程，并将数据从游戏线程获取到渲染线程上，以便可以对其进行处理并将其放置于GPU。</p>
<p>接下来将C++中的Vertex Factory与特定HLSL文件相绑定，语法为：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">IMPLEMENT_VERTEX_FACTORY_TYPE(FactoryClass, ShaderFilename, bUsedWithmaterials, bSupportsStaticLighting, bSupportsDynamicLighting, bPrecisePrevWorldPos, bSupportsPositionOnly)</span><br></pre></td></tr></table></figure>

<p>例如：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">IMPLEMENT_VERTEX_FACTORY_TYPE(FLocalVertexFactory,”/Engine/Private/LocalVertexFactory.ush”,<span class="literal">true</span>,<span class="literal">true</span>,<span class="literal">true</span>,<span class="literal">true</span>,<span class="literal">true</span>);</span><br></pre></td></tr></table></figure>

<p>之后，在使用这些顶点数据时，顶点着色器（VS）中均接受统一的<code>FVertexFactoryInput</code>结构体作为输入，而在各个*…VertexFactory.ush<em>文件中，其对<code>FVertexFactoryInput</code>定义各不相同，UE4中通过<code>include</code>不同的</em>…VertexFactory.ush*来达成对VS的不同输入。</p>
<br>

<hr>
<h2 id="Rendering-Dependency-Graph"><a href="#Rendering-Dependency-Graph" class="headerlink" title="Rendering Dependency Graph"></a>Rendering Dependency Graph</h2><p>在原文中，UE4使用Drawing Policy来为绘制指定正确的着色器Permutation，使用Drawing Policy Factory来创建Drawing Policy并将其添加到适当的列表中。最后，通过一个很长的继承链<code>FDeferredShadingRenderer::Render</code>循环遍历各种列表并调用它们的绘制函数。</p>
<p>但是，在4.23版本之后，UE4逐渐采用Rendering Dependency Graph(RDG)，或称Render Graph来代替这个流程。</p>
<p>关于RDG，可以参见：<a href="https://docs.unrealengine.com/en-US/Programming/Rendering/RenderDependencyGraph/index.html" target="_blank" rel="noopener">https://docs.unrealengine.com/en-US/Programming/Rendering/RenderDependencyGraph/index.html</a></p>
<p>渲染依赖图，是一个基于图的调度系统，旨在执行渲染管线的整帧优化，利用DirectX12等现代API的优势，通过使用自动的异步计算调度以及更有效的内存管理来提高性能。大体思路就是构建一个渲染表，最后执行图表中的渲染逻辑。</p>
<p>主要的两个类是<code>FRDGBuilder</code>和<code>FRDGResource</code>，分别负责构建Render Graph和派生Render Graph中的资源。</p>
<p>当需要在RDG最终添加渲染逻辑时，通过<code>GraphBuilder.AddPass</code>传入一个硬编码的Lambda函数来实现，同时传入的还有Pass名称&#x2F;参数结构体&#x2F;Pass类型。其中<code>GraphBuilder</code>是<code>FRDGBuilder</code>的一个实例。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> ParameterStructType, <span class="keyword">typename</span> ExecuteLambdaType&gt;</span><br><span class="line"><span class="keyword">void</span> AddPass</span><br><span class="line">(</span><br><span class="line">    FRDGEventName &amp;&amp; Name,</span><br><span class="line">    ParameterStructType * ParameterStruct,</span><br><span class="line">    ERDGPassFlags Flags,</span><br><span class="line">    ExecuteLambdaType &amp;&amp; ExecuteLambda</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>最后调用<code>FRDGBuilder::Execute()</code>，来执行整个RDG</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GraphBuilder.Execute();</span><br></pre></td></tr></table></figure>

<br>

<hr>
<h2 id="The-Deferred-Shading-Pipeline"><a href="#The-Deferred-Shading-Pipeline" class="headerlink" title="The Deferred Shading Pipeline"></a>The Deferred Shading Pipeline</h2><h3 id="The-Deferred-Shading-Base-Pass"><a href="#The-Deferred-Shading-Base-Pass" class="headerlink" title="The Deferred Shading Base Pass"></a>The Deferred Shading Base Pass</h3><p>之后就是延迟渲染管线的重点GPU部分，首先是Base Pass，也就是渲染到GBuffer的部分。</p>
<h4 id="Base-Pass-Vertex-Shader"><a href="#Base-Pass-Vertex-Shader" class="headerlink" title="Base Pass Vertex Shader"></a>Base Pass Vertex Shader</h4><p>UE4为减少代码量，使用同一个顶点着色器入口来处理多种不同的<code>FVertexFactoryInput</code>，此时，同时<code>include</code>多个*…VertexFactory.ush*显然并不能达到想要的效果，于是UE4采用了动态指定的方式。</p>
<p>在<em>BasePassVertexCommon.ush</em>中有一句：</p>
<figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line"><span class="meta">#include "/Engine/Generated/VertexFactory.ush"</span></span><br></pre></td></tr></table></figure>

<p>当编译着色器时，会将其设置为正确的Vertex Factory，以使引擎知道要使用<code>FVertexFactoryInput</code>的哪种实现。</p>
<p>然而对于不同的Vertex Factory，需要不同的VS进行处理，此时<em>BasePassVertexShader.usf</em> 中的处理方式是调用<code>GetVertexFactoryIntermediates</code>，<code>VertexFactoryGetWorldPosition</code>，<code>GetMaterialVertexParameters</code>这些分别在不同*…VertexFactory.ush*中定义的方法，巧妙地解决了这一问题。</p>
<p>接下来对于VS的输出，由于管线中可能具有或不具有Tessellation阶段，所以需要不同的输出。在<em>BasePassVertexCommon.ush</em>中可以看到，UE4使用<code>#define</code>预编译时更改<code>FBasePassVSOutput</code>的含义，可以将其定义为简单的<code>FBasePassVSToPS</code>结构，也可以将其定义为<code>FBasePassVSToDS</code>供Tessellation阶段使用。</p>
<p>这样一来，等于UE4将不同的VS集中在一起共用了同一个入口，即<em>BasePassVertexShader.usf</em> 中的<code>Main</code>函数。</p>
<h4 id="Base-Pass-Pixel-Shader"><a href="#Base-Pass-Pixel-Shader" class="headerlink" title="Base Pass Pixel Shader"></a>Base Pass Pixel Shader</h4><p>在UE4中写自定义Shader通常是使用Material Graph连节点图，那么UE4内部需要首先将节点图翻译为HLSL代码。</p>
<p>在<em>MaterialTemplate.ush</em>中我们可以发现<code>FPixelMaterialInputs</code>结构体和很多函数体中都只有一个<code>%s</code>，这些就是字符串占位符，UE4会根据Material Graph将其替换为翻译后的代码。</p>
<p>Base Pass像素着色器（PS）的主入口在 <em>BasePassPixelShader.usf</em> 中的<code>FPixelShaderInOut_MainPS</code>函数，其中有以下一段：</p>
<figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Store the results in local variables and reuse instead of calling the functions multiple times.</span></span><br><span class="line">half3 BaseColor = GetMaterialBaseColor(PixelMaterialInputs);</span><br><span class="line">half  Metallic = GetMaterialMetallic(PixelMaterialInputs);</span><br><span class="line">half  Specular = GetMaterialSpecular(PixelMaterialInputs);</span><br><span class="line"></span><br><span class="line"><span class="type">float</span> MaterialAO = GetMaterialAmbientOcclusion(PixelMaterialInputs);</span><br><span class="line"><span class="type">float</span> Roughness = GetMaterialRoughness(PixelMaterialInputs);</span><br><span class="line"><span class="type">float</span> Anisotropy = GetMaterialAnisotropy(PixelMaterialInputs);</span><br><span class="line"><span class="type">uint</span> ShadingModel = GetMaterialShadingModel(PixelMaterialInputs);</span><br><span class="line"></span><br><span class="line">half Opacity = GetMaterialOpacity(PixelMaterialInputs);</span><br></pre></td></tr></table></figure>

<p>其中<code>GetMaterialBaseColor</code>这些函数在<em>MaterialTemplate.ush</em>中定义，用于拿到在Material Graph中输出的信息。</p>
<p>然后在这个PS中会根据不同的Shading Model所需的数据做一些特殊的计算，例如SubsurfaceColor；如果启用了DBuffer Decal，那么也会对GBuffer数据做一些相关修改。</p>
<p>之后新建一个<code>FGBufferData</code>用于存入所有GBuffer信息：</p>
<figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line">FGBufferData GBuffer = (FGBufferData)<span class="number">0</span>;</span><br></pre></td></tr></table></figure>

<p>然后调用定义在<em>ShadingModelMaterials.ush</em>中的<code>SetGBufferForShadingModel</code>函数，其中全是一些根据不同Shading Model对所需<code>GBuffer.CustomData</code>所做的写入。另外有一个很重要的点是<code>GBuffer.ShadingModelID</code>是在这个函数中最终确定，因为其中有一些可能会修改最终Shading Model的分支判断，所以传入的Shading Model可能与写入GBuffer中的不同：</p>
<figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Use GBuffer.ShadingModelID after SetGBufferForShadingModel(..) because the ShadingModel input might not be the same as the output</span></span><br><span class="line">SetGBufferForShadingModel(</span><br><span class="line">	GBuffer,</span><br><span class="line">	MaterialParameters,</span><br><span class="line">	Opacity,</span><br><span class="line">	BaseColor,</span><br><span class="line">	Metallic,</span><br><span class="line">	Specular,</span><br><span class="line">	Roughness,</span><br><span class="line">	Anisotropy,</span><br><span class="line">	SubsurfaceColor,</span><br><span class="line">	SubsurfaceProfile,</span><br><span class="line">	GBufferDither,</span><br><span class="line">	ShadingModel</span><br><span class="line">	);</span><br></pre></td></tr></table></figure>

<p>这里有一个需要注意的点是，如果你需要自定义Shading Model并且存储<code>GBuffer.CustomData</code>，需要在<em>BasePassCommon.ush</em> 中修改这一语句，添加你的自定义Shading Model：</p>
<figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line"><span class="meta">#define WRITES_CUSTOMDATA_TO_GBUFFER		(USES_GBUFFER &amp;&amp; (MATERIAL_SHADINGMODEL_SUBSURFACE || MATERIAL_SHADINGMODEL_PREINTEGRATED_SKIN || MATERIAL_SHADINGMODEL_SUBSURFACE_PROFILE || MATERIAL_SHADINGMODEL_CLEAR_COAT || MATERIAL_SHADINGMODEL_TWOSIDED_FOLIAGE || MATERIAL_SHADINGMODEL_HAIR || MATERIAL_SHADINGMODEL_CLOTH || MATERIAL_SHADINGMODEL_EYE))</span></span><br></pre></td></tr></table></figure>

<p>我们回到主PS中，最终调用了<em>DeferredShadingCommon.ush</em>中定义的<code>EncodeGBuffer</code>根据不同Shading Model对于GBuffer数据进行了编码：</p>
<figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line">EncodeGBuffer(GBuffer, Out.MRT[<span class="number">1</span>], Out.MRT[<span class="number">2</span>], Out.MRT[<span class="number">3</span>], OutGBufferD, OutGBufferE, OutGBufferF, OutVelocity, QuantizationBias);</span><br></pre></td></tr></table></figure>

<p>最终输出了A-F与Velocity共7张GBuffer textures，Base Pass目标达成。</p>
<br>

<h3 id="Deferred-Light-Pixel-Shader"><a href="#Deferred-Light-Pixel-Shader" class="headerlink" title="Deferred Light Pixel Shader"></a>Deferred Light Pixel Shader</h3><p>UE4接下来将对像素进行光照计算，计算分为3个阶段，分别为Non shadow-casting lights，Indirect lighting，Shadow casting lights。</p>
<p>对于每个光源，UE4都会根据GBuffer与像素深度计算一个<code>ScreenShadowMaskTexture</code>，用于在屏幕空间表示场景中在其阴影中的像素。</p>
<p>光照计算的主入口在<em>DeferredLightPixelShaders.usf</em>中的<code>DeferredLightPixelMain</code>函数，其中计算光照的主要函数为<code>GetDynamicLighting</code>：</p>
<figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> float4 Radiance = GetDynamicLighting(DerivedParams.WorldPosition, DerivedParams.CameraVector, ScreenSpaceData.GBuffer, ScreenSpaceData.AmbientOcclusion, ScreenSpaceData.GBuffer.ShadingModelID, LightData, GetPerPixelLightAttenuation(InputParams.ScreenUV), Dither, uint2(InputParams.PixelPos), RectTexture, SurfaceShadow);</span><br></pre></td></tr></table></figure>

<h4 id="Get-Dynamic-Lighting"><a href="#Get-Dynamic-Lighting" class="headerlink" title="Get Dynamic Lighting"></a>Get Dynamic Lighting</h4><p>我们可以在<em>DeferredLightingCommon.ush</em>中找到<code>GetDynamicLighting</code>和<code>GetDynamicLightingSplit</code>函数，其中前者调用了后者，分别计算了光照的Diffuse分量和Specular分量并且加和。</p>
<p>在<code>GetDynamicLightingSplit</code>函数中我们可以发现调用了<code>GetShadowTerms</code>，<code>IntegrateBxDF</code>和<code>LightAccumulator_AddSplit</code>这三个主要函数。其中<code>IntegrateBxDF</code>在<em>ShadingModels.ush</em>中定义，有一个大分支，用于计算不同Shading Model的光照。</p>
<figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line">FDirectLighting IntegrateBxDF( FGBufferData GBuffer, half3 N, half3 V, half3 L, <span class="type">float</span> Falloff, <span class="type">float</span> NoL, FAreaLight AreaLight, FShadowTerms Shadow )</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">switch</span>( GBuffer.ShadingModelID )</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">case</span> SHADINGMODELID_DEFAULT_LIT:</span><br><span class="line">		<span class="keyword">case</span> SHADINGMODELID_SINGLELAYERWATER:</span><br><span class="line">		<span class="keyword">case</span> SHADINGMODELID_THIN_TRANSLUCENT:</span><br><span class="line">			<span class="keyword">return</span> DefaultLitBxDF( GBuffer, N, V, L, Falloff, NoL, AreaLight, Shadow );</span><br><span class="line">		<span class="keyword">case</span> SHADINGMODELID_SUBSURFACE:</span><br><span class="line">			<span class="keyword">return</span> SubsurfaceBxDF( GBuffer, N, V, L, Falloff, NoL, AreaLight, Shadow );</span><br><span class="line">		<span class="keyword">case</span> SHADINGMODELID_PREINTEGRATED_SKIN:</span><br><span class="line">			<span class="keyword">return</span> PreintegratedSkinBxDF( GBuffer, N, V, L, Falloff, NoL, AreaLight, Shadow );</span><br><span class="line">		<span class="keyword">case</span> SHADINGMODELID_CLEAR_COAT:</span><br><span class="line">			<span class="keyword">return</span> ClearCoatBxDF( GBuffer, N, V, L, Falloff, NoL, AreaLight, Shadow );</span><br><span class="line">		<span class="keyword">case</span> SHADINGMODELID_SUBSURFACE_PROFILE:</span><br><span class="line">			<span class="keyword">return</span> SubsurfaceProfileBxDF( GBuffer, N, V, L, Falloff, NoL, AreaLight, Shadow );</span><br><span class="line">		<span class="keyword">case</span> SHADINGMODELID_TWOSIDED_FOLIAGE:</span><br><span class="line">			<span class="keyword">return</span> TwoSidedBxDF( GBuffer, N, V, L, Falloff, NoL, AreaLight, Shadow );</span><br><span class="line">		<span class="keyword">case</span> SHADINGMODELID_HAIR:</span><br><span class="line">			<span class="keyword">return</span> HairBxDF( GBuffer, N, V, L, Falloff, NoL, AreaLight, Shadow );</span><br><span class="line">		<span class="keyword">case</span> SHADINGMODELID_CLOTH:</span><br><span class="line">			<span class="keyword">return</span> ClothBxDF( GBuffer, N, V, L, Falloff, NoL, AreaLight, Shadow );</span><br><span class="line">		<span class="keyword">case</span> SHADINGMODELID_EYE:</span><br><span class="line">			<span class="keyword">return</span> EyeBxDF( GBuffer, N, V, L, Falloff, NoL, AreaLight, Shadow );</span><br><span class="line">		<span class="keyword">default</span>:</span><br><span class="line">			<span class="keyword">return</span> (FDirectLighting)<span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中需要传入的<code>Shadow</code>是由之前调用的<code>GetShadowTerms</code>得到：</p>
<figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line">FShadowTerms Shadow;</span><br><span class="line">Shadow.SurfaceShadow = AmbientOcclusion;</span><br><span class="line">Shadow.TransmissionShadow = <span class="number">1</span>;</span><br><span class="line">Shadow.TransmissionThickness = <span class="number">1</span>;</span><br><span class="line">GetShadowTerms(GBuffer, LightData, WorldPosition, L, LightAttenuation, Dither, Shadow);</span><br></pre></td></tr></table></figure>

<p>可以看出<code>SurfaceShadow</code>和<code>TransmissionShadow</code>分量分别被初始化为<code>AmbientOcclusion</code>和<code>1</code>，即像素不在阴影中时值为<code>1</code>，如果在阴影中，则该值将小于<code>1</code>。</p>
<p>在<code>GetShadowTerms</code>中，<code>LightAttenuation</code>被读取用于计算，对其进行追踪就会发现，其来源于<em>ShadowRendering.cpp</em>中渲染的<code>ScreenShadowMaskTexture</code>，可以在<code>FSceneRenderer::RenderShadowProjections</code>函数中找到写入<code>ScreenShadowMaskTexture</code>的<code>RenderPass</code>：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Normal deferred shadows render to the shadow mask</span></span><br><span class="line"><span class="function">FRHIRenderPassInfo <span class="title">RPInfo</span><span class="params">(ScreenShadowMaskTexture-&gt;GetRenderTargetItem().TargetableTexture, ERenderTargetActions::Load_Store)</span></span>;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">TransitionRenderPassTargets(RHICmdList, RPInfo);</span><br><span class="line">RHICmdList.BeginRenderPass(RPInfo, TEXT(<span class="string">"RenderShadowProjection"</span>));</span><br><span class="line">RenderShadowMask(<span class="literal">nullptr</span>);</span><br><span class="line">RHICmdList.SetScissorRect(<span class="literal">false</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">RHICmdList.EndRenderPass();</span><br></pre></td></tr></table></figure>

<p>该函数在<em>LightRendering.cpp</em>中的<code>FDeferredShadingSceneRenderer::RenderLights</code>函数中被循环调用：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">RenderShadowProjections(RHICmdList, &amp;LightSceneInfo, ScreenShadowMaskTexture, ScreenShadowMaskSubPixelTexture, HairDatas, bInjectedTranslucentVolume);</span><br></pre></td></tr></table></figure>

<p>对于每个光源，都会渲染一张<code>ScreenShadowMaskTexture</code>，其中方向光渲染出的图使用<code>RG</code>通道，Point Light和Spot Light渲染出的图使用<code>BA</code>通道。</p>
<p><em>ShadowRendering.cpp</em>的注释中也解释了<code>ScreenShadowMaskTexture</code>各个通道的含义：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Light Attenuation channel assignment:</span></span><br><span class="line"><span class="comment">//  R:     WholeSceneShadows, non SSS</span></span><br><span class="line"><span class="comment">//  G:     WholeSceneShadows,     SSS</span></span><br><span class="line"><span class="comment">//  B: non WholeSceneShadows, non SSS</span></span><br><span class="line"><span class="comment">//  A: non WholeSceneShadows,     SSS</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// SSS: SubsurfaceScattering materials</span></span><br><span class="line"><span class="comment">// non SSS: shadow for opaque materials</span></span><br><span class="line"><span class="comment">// WholeSceneShadows: directional light CSM</span></span><br><span class="line"><span class="comment">// non WholeSceneShadows: spotlight, per object shadows, translucency lighting, omni-directional lights</span></span><br></pre></td></tr></table></figure>

<p><code>GetShadowTerms</code>调用<code>DistanceFromCameraFade</code>之后将其与静态阴影混合并存入<code>Shadow</code>的各个分量，这一步被叫做Remapping the light attenuation buffer。</p>
<p>另外UE4计算了Radial Light的的光能衰减，保存在<code>LightMask</code>中。</p>
<p>最后定义在<em>LightAccumulator.ush</em>中的<code>LightAccumulator_AddSplit</code>被调用，可以看到用到了<code>Shadow</code>和<code>LightMask</code>：</p>
<figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line">LightAccumulator_AddSplit( LightAccumulator, Lighting.Diffuse, Lighting.Specular, Lighting.Diffuse, LightColor * LightMask * Shadow.SurfaceShadow, bNeedsSeparateSubsurfaceLightAccumulation );</span><br><span class="line">LightAccumulator_AddSplit( LightAccumulator, Lighting.Transmission, <span class="number">0.0</span>f, Lighting.Transmission, LightColor * LightMask * Shadow.TransmissionShadow, bNeedsSeparateSubsurfaceLightAccumulation );</span><br></pre></td></tr></table></figure>

<p>可以看出，两次调用分别是计算Surface和Subsurface的光照。</p>
<p>最后<code>GetDynamicLightingSplit</code>返回光照累加的结果：</p>
<figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> LightAccumulator_GetResultSplit(LightAccumulator);</span><br></pre></td></tr></table></figure>

<h4 id="IES-light-profile"><a href="#IES-light-profile" class="headerlink" title="IES light profile"></a>IES light profile</h4><p>我们回到<code>DeferredLightPixelMain</code>，可以发现我们得到的<code>Radiance</code>之后乘了个<code>Attenuation</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">OutColor += (Radiance * Attenuation) * OpaqueVisibility;</span><br></pre></td></tr></table></figure>

<p>这里的<code>Attenuation</code>其实和之前的<code>LightAttenuation</code>不同，是由<code>ComputeLightProfileMultiplier</code>函数计算得到，是为了考虑IES light profile对于光照的影响。</p>
<p>关于IES light profile，参见：<a href="https://docs.unrealengine.com/en-US/Engine/Rendering/LightingAndShadows/IESLightProfiles/index.html" target="_blank" rel="noopener">https://docs.unrealengine.com/en-US/Engine/Rendering/LightingAndShadows/IESLightProfiles/index.html</a></p>
<br>

<h3 id="ResolveSceneColor"><a href="#ResolveSceneColor" class="headerlink" title="ResolveSceneColor"></a>ResolveSceneColor</h3><p>由于<code>DeferredLightPixelMain</code>会对影响对象的每一个光源运行，所以UE4会累积该光照结果并将其存储在Buffer中，这个Buffer在多步之后的<code>ResolveSceneColor</code>中才被绘制。</p>
<br>

]]></content>
  </entry>
  <entry>
    <title>LearnOpenGL练习</title>
    <url>/blog/2019/03/12/LearnOpenGL%E7%BB%83%E4%B9%A0/</url>
    <content><![CDATA[<h4 id="你好，三角形"><a href="#你好，三角形" class="headerlink" title="你好，三角形"></a>你好，三角形</h4><h5 id="添加更多顶点到数据中，使用glDrawArrays，尝试绘制两个彼此相连的三角形"><a href="#添加更多顶点到数据中，使用glDrawArrays，尝试绘制两个彼此相连的三角形" class="headerlink" title="添加更多顶点到数据中，使用glDrawArrays，尝试绘制两个彼此相连的三角形"></a>添加更多顶点到数据中，使用glDrawArrays，尝试绘制两个彼此相连的三角形</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"pch.h"</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;GL/glew.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;GLFW/glfw3.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Function prototypes</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">key_callback</span><span class="params">(GLFWwindow* window, <span class="keyword">int</span> key, <span class="keyword">int</span> scancode, <span class="keyword">int</span> action, <span class="keyword">int</span> mode)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Window dimensions</span></span><br><span class="line"><span class="keyword">const</span> GLuint WIDTH = <span class="number">800</span>, HEIGHT = <span class="number">600</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Shaders</span></span><br><span class="line"><span class="keyword">const</span> GLchar* vertexShaderSource = <span class="string">"#version 330 core\n"</span></span><br><span class="line"><span class="string">"layout (location = 0) in vec3 position;\n"</span></span><br><span class="line"><span class="string">"void main()\n"</span></span><br><span class="line"><span class="string">"&#123;\n"</span></span><br><span class="line"><span class="string">"gl_Position = vec4(position.x, position.y, position.z, 1.0);\n"</span></span><br><span class="line"><span class="string">"&#125;\0"</span>;</span><br><span class="line"><span class="keyword">const</span> GLchar* fragmentShaderSource = <span class="string">"#version 330 core\n"</span></span><br><span class="line"><span class="string">"out vec4 color;\n"</span></span><br><span class="line"><span class="string">"void main()\n"</span></span><br><span class="line"><span class="string">"&#123;\n"</span></span><br><span class="line"><span class="string">"color = vec4(1.0f, 0.7f, 0.3f, 0.8f);\n"</span></span><br><span class="line"><span class="string">"&#125;\n\0"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// The MAIN function, from here we start the application and run the game loop</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Starting GLFW context, OpenGL 3.3"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">	<span class="comment">// Init GLFW</span></span><br><span class="line">	glfwInit();</span><br><span class="line">	<span class="comment">// Set all the required options for GLFW</span></span><br><span class="line">	glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, <span class="number">3</span>);</span><br><span class="line">	glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, <span class="number">3</span>);</span><br><span class="line">	glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);</span><br><span class="line">	glfwWindowHint(GLFW_RESIZABLE, GL_FALSE);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Create a GLFWwindow object that we can use for GLFW's functions</span></span><br><span class="line">	GLFWwindow* window = glfwCreateWindow(WIDTH, HEIGHT, <span class="string">"LearnOpenGL"</span>, <span class="literal">nullptr</span>, <span class="literal">nullptr</span>);</span><br><span class="line">	glfwMakeContextCurrent(window);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Set the required callback functions</span></span><br><span class="line">	glfwSetKeyCallback(window, key_callback);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Set this to true so GLEW knows to use a modern approach to retrieving function pointers and extensions</span></span><br><span class="line">	glewExperimental = GL_TRUE;</span><br><span class="line">	<span class="comment">// Initialize GLEW to setup the OpenGL Function pointers</span></span><br><span class="line">	glewInit();</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Define the viewport dimensions</span></span><br><span class="line">	<span class="keyword">int</span> width, height;</span><br><span class="line">	glfwGetFramebufferSize(window, &amp;width, &amp;height);</span><br><span class="line">	glViewport(<span class="number">0</span>, <span class="number">0</span>, width, height);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">// Build and compile our shader program</span></span><br><span class="line">	<span class="comment">// Vertex shader</span></span><br><span class="line">	GLuint vertexShader = glCreateShader(GL_VERTEX_SHADER);</span><br><span class="line">	glShaderSource(vertexShader, <span class="number">1</span>, &amp;vertexShaderSource, <span class="literal">NULL</span>);</span><br><span class="line">	glCompileShader(vertexShader);</span><br><span class="line">	<span class="comment">// Check for compile time errors</span></span><br><span class="line">	GLint success;</span><br><span class="line">	GLchar infoLog[<span class="number">512</span>];</span><br><span class="line">	glGetShaderiv(vertexShader, GL_COMPILE_STATUS, &amp;success);</span><br><span class="line">	<span class="keyword">if</span> (!success)</span><br><span class="line">	&#123;</span><br><span class="line">		glGetShaderInfoLog(vertexShader, <span class="number">512</span>, <span class="literal">NULL</span>, infoLog);</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"ERROR::SHADER::VERTEX::COMPILATION_FAILED\n"</span> &lt;&lt; infoLog &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// Fragment shader</span></span><br><span class="line">	GLuint fragmentShader = glCreateShader(GL_FRAGMENT_SHADER);</span><br><span class="line">	glShaderSource(fragmentShader, <span class="number">1</span>, &amp;fragmentShaderSource, <span class="literal">NULL</span>);</span><br><span class="line">	glCompileShader(fragmentShader);</span><br><span class="line">	<span class="comment">// Check for compile time errors</span></span><br><span class="line">	glGetShaderiv(fragmentShader, GL_COMPILE_STATUS, &amp;success);</span><br><span class="line">	<span class="keyword">if</span> (!success)</span><br><span class="line">	&#123;</span><br><span class="line">		glGetShaderInfoLog(fragmentShader, <span class="number">512</span>, <span class="literal">NULL</span>, infoLog);</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"ERROR::SHADER::FRAGMENT::COMPILATION_FAILED\n"</span> &lt;&lt; infoLog &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// Link shaders</span></span><br><span class="line">	GLuint shaderProgram = glCreateProgram();</span><br><span class="line">	glAttachShader(shaderProgram, vertexShader);</span><br><span class="line">	glAttachShader(shaderProgram, fragmentShader);</span><br><span class="line">	glLinkProgram(shaderProgram);</span><br><span class="line">	<span class="comment">// Check for linking errors</span></span><br><span class="line">	glGetProgramiv(shaderProgram, GL_LINK_STATUS, &amp;success);</span><br><span class="line">	<span class="keyword">if</span> (!success) &#123;</span><br><span class="line">		glGetProgramInfoLog(shaderProgram, <span class="number">512</span>, <span class="literal">NULL</span>, infoLog);</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"ERROR::SHADER::PROGRAM::LINKING_FAILED\n"</span> &lt;&lt; infoLog &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	glDeleteShader(vertexShader);</span><br><span class="line">	glDeleteShader(fragmentShader);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">// Set up vertex data (and buffer(s)) and attribute pointers</span></span><br><span class="line">	<span class="comment">//GLfloat vertices[] = &#123;</span></span><br><span class="line">	<span class="comment">//  // First triangle</span></span><br><span class="line">	<span class="comment">//   0.5f,  0.5f,  // Top Right</span></span><br><span class="line">	<span class="comment">//   0.5f, -0.5f,  // Bottom Right</span></span><br><span class="line">	<span class="comment">//  -0.5f,  0.5f,  // Top Left </span></span><br><span class="line">	<span class="comment">//  // Second triangle</span></span><br><span class="line">	<span class="comment">//   0.5f, -0.5f,  // Bottom Right</span></span><br><span class="line">	<span class="comment">//  -0.5f, -0.5f,  // Bottom Left</span></span><br><span class="line">	<span class="comment">//  -0.5f,  0.5f   // Top Left</span></span><br><span class="line">	<span class="comment">//&#125;; </span></span><br><span class="line">	GLfloat vertices[] = &#123;</span><br><span class="line">		<span class="number">0.5f</span>,  <span class="number">0.5f</span>, <span class="number">0.0f</span>,  <span class="comment">// Top Right</span></span><br><span class="line">		<span class="number">0.5f</span>, <span class="number">-0.5f</span>, <span class="number">0.0f</span>,  <span class="comment">// Bottom Right</span></span><br><span class="line">		<span class="number">-0.5f</span>, <span class="number">-0.5f</span>, <span class="number">0.0f</span>,  <span class="comment">// Bottom Left</span></span><br><span class="line">		<span class="number">-0.5f</span>,  <span class="number">0.5f</span>, <span class="number">0.0f</span>   <span class="comment">// Top Left </span></span><br><span class="line">	&#125;;</span><br><span class="line">	GLuint indices[] = &#123;  <span class="comment">// Note that we start from 0!</span></span><br><span class="line">		<span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>,  <span class="comment">// First Triangle</span></span><br><span class="line">		<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>   <span class="comment">// Second Triangle</span></span><br><span class="line">	&#125;;</span><br><span class="line">	GLuint VBO, VAO, EBO;</span><br><span class="line">	glGenVertexArrays(<span class="number">1</span>, &amp;VAO);</span><br><span class="line">	glGenBuffers(<span class="number">1</span>, &amp;VBO);</span><br><span class="line">	glGenBuffers(<span class="number">1</span>, &amp;EBO);</span><br><span class="line">	<span class="comment">// Bind the Vertex Array Object first, then bind and set vertex buffer(s) and attribute pointer(s).</span></span><br><span class="line">	glBindVertexArray(VAO);</span><br><span class="line"></span><br><span class="line">	glBindBuffer(GL_ARRAY_BUFFER, VBO);</span><br><span class="line">	glBufferData(GL_ARRAY_BUFFER, <span class="keyword">sizeof</span>(vertices), vertices, GL_STATIC_DRAW);</span><br><span class="line"></span><br><span class="line">	glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, EBO);</span><br><span class="line">	glBufferData(GL_ELEMENT_ARRAY_BUFFER, <span class="keyword">sizeof</span>(indices), indices, GL_STATIC_DRAW);</span><br><span class="line"></span><br><span class="line">	glVertexAttribPointer(<span class="number">0</span>, <span class="number">3</span>, GL_FLOAT, GL_FALSE, <span class="number">3</span> * <span class="keyword">sizeof</span>(GLfloat), (GLvoid*)<span class="number">0</span>);</span><br><span class="line">	glEnableVertexAttribArray(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">	glBindBuffer(GL_ARRAY_BUFFER, <span class="number">0</span>); <span class="comment">// Note that this is allowed, the call to glVertexAttribPointer registered VBO as the currently bound vertex buffer object so afterwards we can safely unbind</span></span><br><span class="line"></span><br><span class="line">	glBindVertexArray(<span class="number">0</span>); <span class="comment">// Unbind VAO (it's always a good thing to unbind any buffer/array to prevent strange bugs), remember: do NOT unbind the EBO, keep it bound to this VAO</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">// Uncommenting this call will result in wireframe polygons.</span></span><br><span class="line">	glPolygonMode(GL_FRONT_AND_BACK, GL_FILL);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Game loop</span></span><br><span class="line">	<span class="keyword">while</span> (!glfwWindowShouldClose(window))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">// Check if any events have been activiated (key pressed, mouse moved etc.) and call corresponding response functions</span></span><br><span class="line">		glfwPollEvents();</span><br><span class="line"></span><br><span class="line">		<span class="comment">// Render</span></span><br><span class="line">		<span class="comment">// Clear the colorbuffer</span></span><br><span class="line">		glClearColor(<span class="number">0.2f</span>, <span class="number">0.3f</span>, <span class="number">0.3f</span>, <span class="number">1.0f</span>);</span><br><span class="line">		glClear(GL_COLOR_BUFFER_BIT);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// Draw our first triangle</span></span><br><span class="line">		glUseProgram(shaderProgram);</span><br><span class="line">		glBindVertexArray(VAO);</span><br><span class="line">		<span class="comment">//glDrawArrays(GL_TRIANGLES, 0, 6);</span></span><br><span class="line">		glDrawElements(GL_TRIANGLES, <span class="number">6</span>, GL_UNSIGNED_INT, <span class="number">0</span>);</span><br><span class="line">		glBindVertexArray(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// Swap the screen buffers</span></span><br><span class="line">		glfwSwapBuffers(window);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// Properly de-allocate all resources once they've outlived their purpose</span></span><br><span class="line">	glDeleteVertexArrays(<span class="number">1</span>, &amp;VAO);</span><br><span class="line">	glDeleteBuffers(<span class="number">1</span>, &amp;VBO);</span><br><span class="line">	glDeleteBuffers(<span class="number">1</span>, &amp;EBO);</span><br><span class="line">	<span class="comment">// Terminate GLFW, clearing any resources allocated by GLFW.</span></span><br><span class="line">	glfwTerminate();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Is called whenever a key is pressed/released via GLFW</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">key_callback</span><span class="params">(GLFWwindow* window, <span class="keyword">int</span> key, <span class="keyword">int</span> scancode, <span class="keyword">int</span> action, <span class="keyword">int</span> mode)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (key == GLFW_KEY_ESCAPE &amp;&amp; action == GLFW_PRESS)</span><br><span class="line">		glfwSetWindowShouldClose(window, GL_TRUE);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="创建相同的两个三角形，但对它们的数据使用不同的VAO和VBO"><a href="#创建相同的两个三角形，但对它们的数据使用不同的VAO和VBO" class="headerlink" title="创建相同的两个三角形，但对它们的数据使用不同的VAO和VBO"></a>创建相同的两个三角形，但对它们的数据使用不同的VAO和VBO</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"pch.h"</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;GL/glew.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;GLFW/glfw3.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Function prototypes</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">key_callback</span><span class="params">(GLFWwindow* window, <span class="keyword">int</span> key, <span class="keyword">int</span> scancode, <span class="keyword">int</span> action, <span class="keyword">int</span> mode)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Window dimensions</span></span><br><span class="line"><span class="keyword">const</span> GLuint WIDTH = <span class="number">800</span>, HEIGHT = <span class="number">600</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Shaders</span></span><br><span class="line"><span class="keyword">const</span> GLchar* vertexShaderSource = <span class="string">"#version 330 core\n"</span></span><br><span class="line"><span class="string">"layout (location = 0) in vec3 position;\n"</span></span><br><span class="line"><span class="string">"void main()\n"</span></span><br><span class="line"><span class="string">"&#123;\n"</span></span><br><span class="line"><span class="string">"gl_Position = vec4(position.x, position.y, position.z, 1.0);\n"</span></span><br><span class="line"><span class="string">"&#125;\0"</span>;</span><br><span class="line"><span class="keyword">const</span> GLchar* fragmentShaderSource = <span class="string">"#version 330 core\n"</span></span><br><span class="line"><span class="string">"out vec4 color;\n"</span></span><br><span class="line"><span class="string">"void main()\n"</span></span><br><span class="line"><span class="string">"&#123;\n"</span></span><br><span class="line"><span class="string">"color = vec4(1.0f, 0.7f, 0.3f, 0.8f);\n"</span></span><br><span class="line"><span class="string">"&#125;\n\0"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// The MAIN function, from here we start the application and run the game loop</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Starting GLFW context, OpenGL 3.3"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">	<span class="comment">// Init GLFW</span></span><br><span class="line">	glfwInit();</span><br><span class="line">	<span class="comment">// Set all the required options for GLFW</span></span><br><span class="line">	glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, <span class="number">3</span>);</span><br><span class="line">	glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, <span class="number">3</span>);</span><br><span class="line">	glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);</span><br><span class="line">	glfwWindowHint(GLFW_RESIZABLE, GL_FALSE);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Create a GLFWwindow object that we can use for GLFW's functions</span></span><br><span class="line">	GLFWwindow* window = glfwCreateWindow(WIDTH, HEIGHT, <span class="string">"LearnOpenGL"</span>, <span class="literal">nullptr</span>, <span class="literal">nullptr</span>);</span><br><span class="line">	glfwMakeContextCurrent(window);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Set the required callback functions</span></span><br><span class="line">	glfwSetKeyCallback(window, key_callback);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Set this to true so GLEW knows to use a modern approach to retrieving function pointers and extensions</span></span><br><span class="line">	glewExperimental = GL_TRUE;</span><br><span class="line">	<span class="comment">// Initialize GLEW to setup the OpenGL Function pointers</span></span><br><span class="line">	glewInit();</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Define the viewport dimensions</span></span><br><span class="line">	<span class="keyword">int</span> width, height;</span><br><span class="line">	glfwGetFramebufferSize(window, &amp;width, &amp;height);</span><br><span class="line">	glViewport(<span class="number">0</span>, <span class="number">0</span>, width, height);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">// Build and compile our shader program</span></span><br><span class="line">	<span class="comment">// Vertex shader</span></span><br><span class="line">	GLuint vertexShader = glCreateShader(GL_VERTEX_SHADER);</span><br><span class="line">	glShaderSource(vertexShader, <span class="number">1</span>, &amp;vertexShaderSource, <span class="literal">NULL</span>);</span><br><span class="line">	glCompileShader(vertexShader);</span><br><span class="line">	<span class="comment">// Check for compile time errors</span></span><br><span class="line">	GLint success;</span><br><span class="line">	GLchar infoLog[<span class="number">512</span>];</span><br><span class="line">	glGetShaderiv(vertexShader, GL_COMPILE_STATUS, &amp;success);</span><br><span class="line">	<span class="keyword">if</span> (!success)</span><br><span class="line">	&#123;</span><br><span class="line">		glGetShaderInfoLog(vertexShader, <span class="number">512</span>, <span class="literal">NULL</span>, infoLog);</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"ERROR::SHADER::VERTEX::COMPILATION_FAILED\n"</span> &lt;&lt; infoLog &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// Fragment shader</span></span><br><span class="line">	GLuint fragmentShader = glCreateShader(GL_FRAGMENT_SHADER);</span><br><span class="line">	glShaderSource(fragmentShader, <span class="number">1</span>, &amp;fragmentShaderSource, <span class="literal">NULL</span>);</span><br><span class="line">	glCompileShader(fragmentShader);</span><br><span class="line">	<span class="comment">// Check for compile time errors</span></span><br><span class="line">	glGetShaderiv(fragmentShader, GL_COMPILE_STATUS, &amp;success);</span><br><span class="line">	<span class="keyword">if</span> (!success)</span><br><span class="line">	&#123;</span><br><span class="line">		glGetShaderInfoLog(fragmentShader, <span class="number">512</span>, <span class="literal">NULL</span>, infoLog);</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"ERROR::SHADER::FRAGMENT::COMPILATION_FAILED\n"</span> &lt;&lt; infoLog &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// Link shaders</span></span><br><span class="line">	GLuint shaderProgram = glCreateProgram();</span><br><span class="line">	glAttachShader(shaderProgram, vertexShader);</span><br><span class="line">	glAttachShader(shaderProgram, fragmentShader);</span><br><span class="line">	glLinkProgram(shaderProgram);</span><br><span class="line">	<span class="comment">// Check for linking errors</span></span><br><span class="line">	glGetProgramiv(shaderProgram, GL_LINK_STATUS, &amp;success);</span><br><span class="line">	<span class="keyword">if</span> (!success) &#123;</span><br><span class="line">		glGetProgramInfoLog(shaderProgram, <span class="number">512</span>, <span class="literal">NULL</span>, infoLog);</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"ERROR::SHADER::PROGRAM::LINKING_FAILED\n"</span> &lt;&lt; infoLog &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	glDeleteShader(vertexShader);</span><br><span class="line">	glDeleteShader(fragmentShader);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">// Set up vertex data (and buffer(s)) and attribute pointers</span></span><br><span class="line">	</span><br><span class="line">	GLfloat rect0[] = &#123;</span><br><span class="line">		<span class="number">0.5f</span>,  <span class="number">0.5f</span>, <span class="number">0.0f</span>,  <span class="comment">// Top Right</span></span><br><span class="line">		<span class="number">0.5f</span>, <span class="number">-0.5f</span>, <span class="number">0.0f</span>,  <span class="comment">// Bottom Right</span></span><br><span class="line">		<span class="number">-0.5f</span>, <span class="number">-0.5f</span>, <span class="number">0.0f</span>,  <span class="comment">// Bottom Left</span></span><br><span class="line">		<span class="number">-0.5f</span>,  <span class="number">0.5f</span>, <span class="number">0.0f</span>   <span class="comment">// Top Left </span></span><br><span class="line">	&#125;;</span><br><span class="line">	GLfloat rect1[] = &#123;</span><br><span class="line">		<span class="number">1.0f</span>,  <span class="number">0.0f</span>, <span class="number">0.0f</span>,  <span class="comment">// Top Right</span></span><br><span class="line">		<span class="number">1.0f</span>, <span class="number">-1.0f</span>, <span class="number">0.0f</span>,  <span class="comment">// Bottom Right</span></span><br><span class="line">		<span class="number">0.5f</span>, <span class="number">-1.0f</span>, <span class="number">0.0f</span>,  <span class="comment">// Bottom Left</span></span><br><span class="line">		<span class="number">0.5f</span>,  <span class="number">0.0f</span>, <span class="number">0.0f</span>   <span class="comment">// Top Left </span></span><br><span class="line">	&#125;;</span><br><span class="line"></span><br><span class="line">	GLuint indices0[] = &#123;  <span class="comment">// Note that we start from 0!</span></span><br><span class="line">		<span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>,  <span class="comment">// First Triangle</span></span><br><span class="line">		<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>   <span class="comment">// Second Triangle</span></span><br><span class="line">	&#125;;</span><br><span class="line"></span><br><span class="line">	GLuint indices1[] = &#123;  <span class="comment">// Note that we start from 0!</span></span><br><span class="line">		<span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>,  <span class="comment">// First Triangle</span></span><br><span class="line">		<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>   <span class="comment">// Second Triangle</span></span><br><span class="line">	&#125;;</span><br><span class="line"></span><br><span class="line">	GLuint VBO[<span class="number">2</span>], VAO[<span class="number">2</span>], EBO[<span class="number">2</span>];</span><br><span class="line">	glGenVertexArrays(<span class="number">2</span>, VAO);</span><br><span class="line">	glGenBuffers(<span class="number">2</span>, VBO);</span><br><span class="line">	glGenBuffers(<span class="number">2</span>, EBO);</span><br><span class="line">	<span class="comment">// Bind the Vertex Array Object first, then bind and set vertex buffer(s) and attribute pointer(s).</span></span><br><span class="line">	glBindVertexArray(VAO[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">	glBindBuffer(GL_ARRAY_BUFFER, VBO[<span class="number">0</span>]);</span><br><span class="line">	glBufferData(GL_ARRAY_BUFFER, <span class="keyword">sizeof</span>(rect0), rect0, GL_STATIC_DRAW);</span><br><span class="line"></span><br><span class="line">	glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, EBO[<span class="number">0</span>]);</span><br><span class="line">	glBufferData(GL_ELEMENT_ARRAY_BUFFER, <span class="keyword">sizeof</span>(indices0), indices0, GL_STATIC_DRAW);</span><br><span class="line"></span><br><span class="line">	glVertexAttribPointer(<span class="number">0</span>, <span class="number">3</span>, GL_FLOAT, GL_FALSE, <span class="number">0</span>, (GLvoid*)<span class="number">0</span>);</span><br><span class="line">	glEnableVertexAttribArray(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">	glBindBuffer(GL_ARRAY_BUFFER, <span class="number">0</span>); <span class="comment">// Note that this is allowed, the call to glVertexAttribPointer registered VBO as the currently bound vertex buffer object so afterwards we can safely unbind</span></span><br><span class="line"></span><br><span class="line">	glBindVertexArray(<span class="number">0</span>); <span class="comment">// Unbind VAO (it's always a good thing to unbind any buffer/array to prevent strange bugs), remember: do NOT unbind the EBO, keep it bound to this VAO</span></span><br><span class="line">	glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Bind the Vertex Array Object first, then bind and set vertex buffer(s) and attribute pointer(s).</span></span><br><span class="line">	glBindVertexArray(VAO[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">	glBindBuffer(GL_ARRAY_BUFFER, VBO[<span class="number">1</span>]);</span><br><span class="line">	glBufferData(GL_ARRAY_BUFFER, <span class="keyword">sizeof</span>(rect1), rect1, GL_STATIC_DRAW);</span><br><span class="line"></span><br><span class="line">	glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, EBO[<span class="number">1</span>]);</span><br><span class="line">	glBufferData(GL_ELEMENT_ARRAY_BUFFER, <span class="keyword">sizeof</span>(indices1), indices1, GL_STATIC_DRAW);</span><br><span class="line"></span><br><span class="line">	glVertexAttribPointer(<span class="number">0</span>, <span class="number">3</span>, GL_FLOAT, GL_FALSE, <span class="number">0</span>, (GLvoid*)<span class="number">0</span>);</span><br><span class="line">	glEnableVertexAttribArray(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">	glBindBuffer(GL_ARRAY_BUFFER, <span class="number">0</span>); <span class="comment">// Note that this is allowed, the call to glVertexAttribPointer registered VBO as the currently bound vertex buffer object so afterwards we can safely unbind</span></span><br><span class="line"></span><br><span class="line">	glBindVertexArray(<span class="number">0</span>); <span class="comment">// Unbind VAO (it's always a good thing to unbind any buffer/array to prevent strange bugs), remember: do NOT unbind the EBO, keep it bound to this VAO</span></span><br><span class="line">	glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">// Uncommenting this call will result in wireframe polygons.</span></span><br><span class="line">	glPolygonMode(GL_FRONT_AND_BACK, GL_LINE);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Game loop</span></span><br><span class="line">	<span class="keyword">while</span> (!glfwWindowShouldClose(window))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">// Check if any events have been activiated (key pressed, mouse moved etc.) and call corresponding response functions</span></span><br><span class="line">		glfwPollEvents();</span><br><span class="line"></span><br><span class="line">		<span class="comment">// Render</span></span><br><span class="line">		<span class="comment">// Clear the colorbuffer</span></span><br><span class="line">		glClearColor(<span class="number">0.2f</span>, <span class="number">0.3f</span>, <span class="number">0.3f</span>, <span class="number">1.0f</span>);</span><br><span class="line">		glClear(GL_COLOR_BUFFER_BIT);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// Draw our first triangle</span></span><br><span class="line">		glUseProgram(shaderProgram);</span><br><span class="line">		glBindVertexArray(VAO[<span class="number">0</span>]);</span><br><span class="line">		<span class="comment">//glDrawArrays(GL_TRIANGLES, 0, 6);</span></span><br><span class="line">		glDrawElements(GL_TRIANGLES, <span class="number">6</span>, GL_UNSIGNED_INT, <span class="number">0</span>);</span><br><span class="line">		glBindVertexArray(VAO[<span class="number">1</span>]);</span><br><span class="line">		glDrawElements(GL_TRIANGLES, <span class="number">6</span>, GL_UNSIGNED_INT, <span class="number">0</span>);</span><br><span class="line">		glBindVertexArray(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// Swap the screen buffers</span></span><br><span class="line">		glfwSwapBuffers(window);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// Properly de-allocate all resources once they've outlived their purpose</span></span><br><span class="line">	glDeleteVertexArrays(<span class="number">2</span>, VAO);</span><br><span class="line">	glDeleteBuffers(<span class="number">2</span>, VBO);</span><br><span class="line">	glDeleteBuffers(<span class="number">2</span>, EBO);</span><br><span class="line">	<span class="comment">// Terminate GLFW, clearing any resources allocated by GLFW.</span></span><br><span class="line">	glfwTerminate();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Is called whenever a key is pressed/released via GLFW</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">key_callback</span><span class="params">(GLFWwindow* window, <span class="keyword">int</span> key, <span class="keyword">int</span> scancode, <span class="keyword">int</span> action, <span class="keyword">int</span> mode)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (key == GLFW_KEY_ESCAPE &amp;&amp; action == GLFW_PRESS)</span><br><span class="line">		glfwSetWindowShouldClose(window, GL_TRUE);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="创建两个着色器程序，第二个程序使用与第一个不同的片段着色器，输出黄色；再次绘制这两个三角形，其中一个输出为黄色"><a href="#创建两个着色器程序，第二个程序使用与第一个不同的片段着色器，输出黄色；再次绘制这两个三角形，其中一个输出为黄色" class="headerlink" title="创建两个着色器程序，第二个程序使用与第一个不同的片段着色器，输出黄色；再次绘制这两个三角形，其中一个输出为黄色"></a>创建两个着色器程序，第二个程序使用与第一个不同的片段着色器，输出黄色；再次绘制这两个三角形，其中一个输出为黄色</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"pch.h"</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;GL/glew.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;GLFW/glfw3.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Function prototypes</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">key_callback</span><span class="params">(GLFWwindow* window, <span class="keyword">int</span> key, <span class="keyword">int</span> scancode, <span class="keyword">int</span> action, <span class="keyword">int</span> mode)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Window dimensions</span></span><br><span class="line"><span class="keyword">const</span> GLuint WIDTH = <span class="number">800</span>, HEIGHT = <span class="number">600</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Shaders</span></span><br><span class="line"><span class="keyword">const</span> GLchar* vertexShaderSource = <span class="string">"#version 330 core\n"</span></span><br><span class="line"><span class="string">"layout (location = 0) in vec3 position;\n"</span></span><br><span class="line"><span class="string">"void main()\n"</span></span><br><span class="line"><span class="string">"&#123;\n"</span></span><br><span class="line"><span class="string">"gl_Position = vec4(position.x, position.y, position.z, 1.0);\n"</span></span><br><span class="line"><span class="string">"&#125;\0"</span>;</span><br><span class="line"><span class="keyword">const</span> GLchar* fragmentShaderSourceY = <span class="string">"#version 330 core\n"</span></span><br><span class="line"><span class="string">"out vec4 color;\n"</span></span><br><span class="line"><span class="string">"void main()\n"</span></span><br><span class="line"><span class="string">"&#123;\n"</span></span><br><span class="line"><span class="string">"color = vec4(1.0f, 0.7f, 0.3f, 0.8f);\n"</span></span><br><span class="line"><span class="string">"&#125;\n\0"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> GLchar* fragmentShaderSourceG = <span class="string">"#version 330 core\n"</span></span><br><span class="line"><span class="string">"out vec4 color;\n"</span></span><br><span class="line"><span class="string">"void main()\n"</span></span><br><span class="line"><span class="string">"&#123;\n"</span></span><br><span class="line"><span class="string">"color = vec4(0.2f, 0.8f, 0.6f, 0.8f);\n"</span></span><br><span class="line"><span class="string">"&#125;\n\0"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// The MAIN function, from here we start the application and run the game loop</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Starting GLFW context, OpenGL 3.3"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">	<span class="comment">// Init GLFW</span></span><br><span class="line">	glfwInit();</span><br><span class="line">	<span class="comment">// Set all the required options for GLFW</span></span><br><span class="line">	glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, <span class="number">3</span>);</span><br><span class="line">	glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, <span class="number">3</span>);</span><br><span class="line">	glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);</span><br><span class="line">	glfwWindowHint(GLFW_RESIZABLE, GL_FALSE);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Create a GLFWwindow object that we can use for GLFW's functions</span></span><br><span class="line">	GLFWwindow* window = glfwCreateWindow(WIDTH, HEIGHT, <span class="string">"LearnOpenGL"</span>, <span class="literal">nullptr</span>, <span class="literal">nullptr</span>);</span><br><span class="line">	glfwMakeContextCurrent(window);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Set the required callback functions</span></span><br><span class="line">	glfwSetKeyCallback(window, key_callback);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Set this to true so GLEW knows to use a modern approach to retrieving function pointers and extensions</span></span><br><span class="line">	glewExperimental = GL_TRUE;</span><br><span class="line">	<span class="comment">// Initialize GLEW to setup the OpenGL Function pointers</span></span><br><span class="line">	glewInit();</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Define the viewport dimensions</span></span><br><span class="line">	<span class="keyword">int</span> width, height;</span><br><span class="line">	glfwGetFramebufferSize(window, &amp;width, &amp;height);</span><br><span class="line">	glViewport(<span class="number">0</span>, <span class="number">0</span>, width, height);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">// Build and compile our shader program</span></span><br><span class="line">	<span class="comment">// Vertex shader</span></span><br><span class="line">	GLuint vertexShader = glCreateShader(GL_VERTEX_SHADER);</span><br><span class="line">	glShaderSource(vertexShader, <span class="number">1</span>, &amp;vertexShaderSource, <span class="literal">NULL</span>);</span><br><span class="line">	glCompileShader(vertexShader);</span><br><span class="line">	<span class="comment">// Check for compile time errors</span></span><br><span class="line">	GLint success;</span><br><span class="line">	GLchar infoLog[<span class="number">512</span>];</span><br><span class="line">	glGetShaderiv(vertexShader, GL_COMPILE_STATUS, &amp;success);</span><br><span class="line">	<span class="keyword">if</span> (!success)</span><br><span class="line">	&#123;</span><br><span class="line">		glGetShaderInfoLog(vertexShader, <span class="number">512</span>, <span class="literal">NULL</span>, infoLog);</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"ERROR::SHADER::VERTEX::COMPILATION_FAILED\n"</span> &lt;&lt; infoLog &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// Fragment shader Y</span></span><br><span class="line">	GLuint fragmentShader = glCreateShader(GL_FRAGMENT_SHADER);</span><br><span class="line">	glShaderSource(fragmentShader, <span class="number">1</span>, &amp;fragmentShaderSourceY, <span class="literal">NULL</span>);</span><br><span class="line">	glCompileShader(fragmentShader);</span><br><span class="line">	<span class="comment">// Check for compile time errors</span></span><br><span class="line">	glGetShaderiv(fragmentShader, GL_COMPILE_STATUS, &amp;success);</span><br><span class="line">	<span class="keyword">if</span> (!success)</span><br><span class="line">	&#123;</span><br><span class="line">		glGetShaderInfoLog(fragmentShader, <span class="number">512</span>, <span class="literal">NULL</span>, infoLog);</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"ERROR::SHADER::FRAGMENT::COMPILATION_FAILED\n"</span> &lt;&lt; infoLog &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Link shaders Y</span></span><br><span class="line">	GLuint shaderProgramY = glCreateProgram();</span><br><span class="line">	glAttachShader(shaderProgramY, vertexShader);</span><br><span class="line">	glAttachShader(shaderProgramY, fragmentShader);</span><br><span class="line">	glLinkProgram(shaderProgramY);</span><br><span class="line">	<span class="comment">// Check for linking errors</span></span><br><span class="line">	glGetProgramiv(shaderProgramY, GL_LINK_STATUS, &amp;success);</span><br><span class="line">	<span class="keyword">if</span> (!success) &#123;</span><br><span class="line">		glGetProgramInfoLog(shaderProgramY, <span class="number">512</span>, <span class="literal">NULL</span>, infoLog);</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"ERROR::SHADER::PROGRAM::LINKING_FAILED\n"</span> &lt;&lt; infoLog &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Fragment shader G</span></span><br><span class="line">	fragmentShader = glCreateShader(GL_FRAGMENT_SHADER);</span><br><span class="line">	glShaderSource(fragmentShader, <span class="number">1</span>, &amp;fragmentShaderSourceG, <span class="literal">NULL</span>);</span><br><span class="line">	glCompileShader(fragmentShader);</span><br><span class="line">	<span class="comment">// Check for compile time errors</span></span><br><span class="line">	glGetShaderiv(fragmentShader, GL_COMPILE_STATUS, &amp;success);</span><br><span class="line">	<span class="keyword">if</span> (!success)</span><br><span class="line">	&#123;</span><br><span class="line">		glGetShaderInfoLog(fragmentShader, <span class="number">512</span>, <span class="literal">NULL</span>, infoLog);</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"ERROR::SHADER::FRAGMENT::COMPILATION_FAILED\n"</span> &lt;&lt; infoLog &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Link shaders G</span></span><br><span class="line">	GLuint shaderProgramG = glCreateProgram();</span><br><span class="line">	glAttachShader(shaderProgramG, vertexShader);</span><br><span class="line">	glAttachShader(shaderProgramG, fragmentShader);</span><br><span class="line">	glLinkProgram(shaderProgramG);</span><br><span class="line">	<span class="comment">// Check for linking errors</span></span><br><span class="line">	glGetProgramiv(shaderProgramG, GL_LINK_STATUS, &amp;success);</span><br><span class="line">	<span class="keyword">if</span> (!success) &#123;</span><br><span class="line">		glGetProgramInfoLog(shaderProgramG, <span class="number">512</span>, <span class="literal">NULL</span>, infoLog);</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"ERROR::SHADER::PROGRAM::LINKING_FAILED\n"</span> &lt;&lt; infoLog &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	glDeleteShader(vertexShader);</span><br><span class="line">	glDeleteShader(fragmentShader);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">// Set up vertex data (and buffer(s)) and attribute pointers</span></span><br><span class="line">	GLfloat rect0[] = &#123;</span><br><span class="line">		<span class="number">0.5f</span>,  <span class="number">0.5f</span>, <span class="number">0.0f</span>,  <span class="comment">// Top Right</span></span><br><span class="line">		<span class="number">0.5f</span>, <span class="number">-0.5f</span>, <span class="number">0.0f</span>,  <span class="comment">// Bottom Right</span></span><br><span class="line">		<span class="number">-0.5f</span>, <span class="number">-0.5f</span>, <span class="number">0.0f</span>,  <span class="comment">// Bottom Left</span></span><br><span class="line">		<span class="number">-0.5f</span>,  <span class="number">0.5f</span>, <span class="number">0.0f</span>   <span class="comment">// Top Left </span></span><br><span class="line">	&#125;;</span><br><span class="line">	GLfloat rect1[] = &#123;</span><br><span class="line">		<span class="number">1.0f</span>,  <span class="number">0.0f</span>, <span class="number">0.0f</span>,  <span class="comment">// Top Right</span></span><br><span class="line">		<span class="number">1.0f</span>, <span class="number">-1.0f</span>, <span class="number">0.0f</span>,  <span class="comment">// Bottom Right</span></span><br><span class="line">		<span class="number">0.5f</span>, <span class="number">-1.0f</span>, <span class="number">0.0f</span>,  <span class="comment">// Bottom Left</span></span><br><span class="line">		<span class="number">0.5f</span>,  <span class="number">0.0f</span>, <span class="number">0.0f</span>   <span class="comment">// Top Left </span></span><br><span class="line">	&#125;;</span><br><span class="line"></span><br><span class="line">	GLuint indices0[] = &#123;  <span class="comment">// Note that we start from 0!</span></span><br><span class="line">		<span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>,  <span class="comment">// First Triangle</span></span><br><span class="line">		<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>   <span class="comment">// Second Triangle</span></span><br><span class="line">	&#125;;</span><br><span class="line"></span><br><span class="line">	GLuint indices1[] = &#123;  <span class="comment">// Note that we start from 0!</span></span><br><span class="line">		<span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>,  <span class="comment">// First Triangle</span></span><br><span class="line">		<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>   <span class="comment">// Second Triangle</span></span><br><span class="line">	&#125;;</span><br><span class="line"></span><br><span class="line">	GLuint VBO[<span class="number">2</span>], VAO[<span class="number">2</span>], EBO[<span class="number">2</span>];</span><br><span class="line">	glGenVertexArrays(<span class="number">2</span>, VAO);</span><br><span class="line">	glGenBuffers(<span class="number">2</span>, VBO);</span><br><span class="line">	glGenBuffers(<span class="number">2</span>, EBO);</span><br><span class="line">	<span class="comment">// Bind the Vertex Array Object first, then bind and set vertex buffer(s) and attribute pointer(s).</span></span><br><span class="line">	glBindVertexArray(VAO[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">	glBindBuffer(GL_ARRAY_BUFFER, VBO[<span class="number">0</span>]);</span><br><span class="line">	glBufferData(GL_ARRAY_BUFFER, <span class="keyword">sizeof</span>(rect0), rect0, GL_STATIC_DRAW);</span><br><span class="line"></span><br><span class="line">	glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, EBO[<span class="number">0</span>]);</span><br><span class="line">	glBufferData(GL_ELEMENT_ARRAY_BUFFER, <span class="keyword">sizeof</span>(indices0), indices0, GL_STATIC_DRAW);</span><br><span class="line"></span><br><span class="line">	glVertexAttribPointer(<span class="number">0</span>, <span class="number">3</span>, GL_FLOAT, GL_FALSE, <span class="number">0</span>, (GLvoid*)<span class="number">0</span>);</span><br><span class="line">	glEnableVertexAttribArray(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">	glBindBuffer(GL_ARRAY_BUFFER, <span class="number">0</span>); <span class="comment">// Note that this is allowed, the call to glVertexAttribPointer registered VBO as the currently bound vertex buffer object so afterwards we can safely unbind</span></span><br><span class="line"></span><br><span class="line">	glBindVertexArray(<span class="number">0</span>); <span class="comment">// Unbind VAO (it's always a good thing to unbind any buffer/array to prevent strange bugs), remember: do NOT unbind the EBO, keep it bound to this VAO</span></span><br><span class="line">	glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Bind the Vertex Array Object first, then bind and set vertex buffer(s) and attribute pointer(s).</span></span><br><span class="line">	glBindVertexArray(VAO[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">	glBindBuffer(GL_ARRAY_BUFFER, VBO[<span class="number">1</span>]);</span><br><span class="line">	glBufferData(GL_ARRAY_BUFFER, <span class="keyword">sizeof</span>(rect1), rect1, GL_STATIC_DRAW);</span><br><span class="line"></span><br><span class="line">	glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, EBO[<span class="number">1</span>]);</span><br><span class="line">	glBufferData(GL_ELEMENT_ARRAY_BUFFER, <span class="keyword">sizeof</span>(indices1), indices1, GL_STATIC_DRAW);</span><br><span class="line"></span><br><span class="line">	glVertexAttribPointer(<span class="number">0</span>, <span class="number">3</span>, GL_FLOAT, GL_FALSE, <span class="number">0</span>, (GLvoid*)<span class="number">0</span>);</span><br><span class="line">	glEnableVertexAttribArray(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">	glBindBuffer(GL_ARRAY_BUFFER, <span class="number">0</span>); <span class="comment">// Note that this is allowed, the call to glVertexAttribPointer registered VBO as the currently bound vertex buffer object so afterwards we can safely unbind</span></span><br><span class="line"></span><br><span class="line">	glBindVertexArray(<span class="number">0</span>); <span class="comment">// Unbind VAO (it's always a good thing to unbind any buffer/array to prevent strange bugs), remember: do NOT unbind the EBO, keep it bound to this VAO</span></span><br><span class="line">	glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">// Uncommenting this call will result in wireframe polygons.</span></span><br><span class="line">	glPolygonMode(GL_FRONT_AND_BACK, GL_FILL);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Game loop</span></span><br><span class="line">	<span class="keyword">while</span> (!glfwWindowShouldClose(window))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">// Check if any events have been activiated (key pressed, mouse moved etc.) and call corresponding response functions</span></span><br><span class="line">		glfwPollEvents();</span><br><span class="line"></span><br><span class="line">		<span class="comment">// Render</span></span><br><span class="line">		<span class="comment">// Clear the colorbuffer</span></span><br><span class="line">		glClearColor(<span class="number">0.2f</span>, <span class="number">0.3f</span>, <span class="number">0.3f</span>, <span class="number">1.0f</span>);</span><br><span class="line">		glClear(GL_COLOR_BUFFER_BIT);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// Draw our first rect</span></span><br><span class="line">		glUseProgram(shaderProgramY);</span><br><span class="line">		glBindVertexArray(VAO[<span class="number">0</span>]);</span><br><span class="line">		<span class="comment">//glDrawArrays(GL_TRIANGLES, 0, 6);</span></span><br><span class="line">		glDrawElements(GL_TRIANGLES, <span class="number">6</span>, GL_UNSIGNED_INT, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// Draw our second rect</span></span><br><span class="line">		glUseProgram(shaderProgramG);</span><br><span class="line">		glBindVertexArray(VAO[<span class="number">1</span>]);</span><br><span class="line">		glDrawElements(GL_TRIANGLES, <span class="number">6</span>, GL_UNSIGNED_INT, <span class="number">0</span>);</span><br><span class="line">		glBindVertexArray(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// Swap the screen buffers</span></span><br><span class="line">		glfwSwapBuffers(window);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// Properly de-allocate all resources once they've outlived their purpose</span></span><br><span class="line">	glDeleteVertexArrays(<span class="number">2</span>, VAO);</span><br><span class="line">	glDeleteBuffers(<span class="number">2</span>, VBO);</span><br><span class="line">	glDeleteBuffers(<span class="number">2</span>, EBO);</span><br><span class="line">	<span class="comment">// Terminate GLFW, clearing any resources allocated by GLFW.</span></span><br><span class="line">	glfwTerminate();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Is called whenever a key is pressed/released via GLFW</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">key_callback</span><span class="params">(GLFWwindow* window, <span class="keyword">int</span> key, <span class="keyword">int</span> scancode, <span class="keyword">int</span> action, <span class="keyword">int</span> mode)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (key == GLFW_KEY_ESCAPE &amp;&amp; action == GLFW_PRESS)</span><br><span class="line">		glfwSetWindowShouldClose(window, GL_TRUE);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="着色器"><a href="#着色器" class="headerlink" title="着色器"></a>着色器</h4><h5 id="使用uniform定义一个水平偏移量，在顶点着色器中使用这个偏移量把三角形移动到屏幕右侧"><a href="#使用uniform定义一个水平偏移量，在顶点着色器中使用这个偏移量把三角形移动到屏幕右侧" class="headerlink" title="使用uniform定义一个水平偏移量，在顶点着色器中使用这个偏移量把三角形移动到屏幕右侧"></a>使用uniform定义一个水平偏移量，在顶点着色器中使用这个偏移量把三角形移动到屏幕右侧</h5><p><em>xOffsetShader.cpp</em></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"pch.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;GL/glew.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;GLFW/glfw3.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Other includes</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Shader.h"</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Function prototypes</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">key_callback</span><span class="params">(GLFWwindow* window, <span class="keyword">int</span> key, <span class="keyword">int</span> scancode, <span class="keyword">int</span> action, <span class="keyword">int</span> mode)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Window dimensions</span></span><br><span class="line"><span class="keyword">const</span> GLuint WIDTH = <span class="number">800</span>, HEIGHT = <span class="number">600</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// The MAIN function, from here we start the application and run the game loop</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// Init GLFW</span></span><br><span class="line">	glfwInit();</span><br><span class="line">	<span class="comment">// Set all the required options for GLFW</span></span><br><span class="line">	glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, <span class="number">3</span>);</span><br><span class="line">	glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, <span class="number">3</span>);</span><br><span class="line">	glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);</span><br><span class="line">	glfwWindowHint(GLFW_RESIZABLE, GL_FALSE);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Create a GLFWwindow object that we can use for GLFW's functions</span></span><br><span class="line">	GLFWwindow* window = glfwCreateWindow(WIDTH, HEIGHT, <span class="string">"LearnOpenGL"</span>, <span class="literal">nullptr</span>, <span class="literal">nullptr</span>);</span><br><span class="line">	glfwMakeContextCurrent(window);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Set the required callback functions</span></span><br><span class="line">	glfwSetKeyCallback(window, key_callback);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Set this to true so GLEW knows to use a modern approach to retrieving function pointers and extensions</span></span><br><span class="line">	glewExperimental = GL_TRUE;</span><br><span class="line">	<span class="comment">// Initialize GLEW to setup the OpenGL Function pointers</span></span><br><span class="line">	glewInit();</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Define the viewport dimensions</span></span><br><span class="line">	glViewport(<span class="number">0</span>, <span class="number">0</span>, WIDTH, HEIGHT);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">// Build and compile our shader program</span></span><br><span class="line">	<span class="function">Shader <span class="title">ourShader</span><span class="params">(<span class="string">"../shaders/xOffset.vs"</span>, <span class="string">"../shaders/default.frag"</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">// Set up vertex data (and buffer(s)) and attribute pointers</span></span><br><span class="line">	GLfloat vertices[] = &#123;</span><br><span class="line">		<span class="comment">// Positions         // Colors</span></span><br><span class="line">		<span class="number">0.5f</span>, <span class="number">-0.5f</span>, <span class="number">0.0f</span>,   <span class="number">1.0f</span>, <span class="number">0.0f</span>, <span class="number">0.0f</span>,  <span class="comment">// Bottom Right</span></span><br><span class="line">	    <span class="number">-0.5f</span>, <span class="number">-0.5f</span>, <span class="number">0.0f</span>,   <span class="number">0.0f</span>, <span class="number">1.0f</span>, <span class="number">0.0f</span>,  <span class="comment">// Bottom Left</span></span><br><span class="line">		<span class="number">0.0f</span>,  <span class="number">0.5f</span>, <span class="number">0.0f</span>,   <span class="number">0.0f</span>, <span class="number">0.0f</span>, <span class="number">1.0f</span>   <span class="comment">// Top </span></span><br><span class="line">	&#125;;</span><br><span class="line">	GLuint VBO, VAO;</span><br><span class="line">	glGenVertexArrays(<span class="number">1</span>, &amp;VAO);</span><br><span class="line">	glGenBuffers(<span class="number">1</span>, &amp;VBO);</span><br><span class="line">	<span class="comment">// Bind the Vertex Array Object first, then bind and set vertex buffer(s) and attribute pointer(s).</span></span><br><span class="line">	glBindVertexArray(VAO);</span><br><span class="line"></span><br><span class="line">	glBindBuffer(GL_ARRAY_BUFFER, VBO);</span><br><span class="line">	glBufferData(GL_ARRAY_BUFFER, <span class="keyword">sizeof</span>(vertices), vertices, GL_STATIC_DRAW);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Position attribute</span></span><br><span class="line">	glVertexAttribPointer(<span class="number">0</span>, <span class="number">3</span>, GL_FLOAT, GL_FALSE, <span class="number">6</span> * <span class="keyword">sizeof</span>(GLfloat), (GLvoid*)<span class="number">0</span>);</span><br><span class="line">	glEnableVertexAttribArray(<span class="number">0</span>);</span><br><span class="line">	<span class="comment">// Color attribute</span></span><br><span class="line">	glVertexAttribPointer(<span class="number">1</span>, <span class="number">3</span>, GL_FLOAT, GL_FALSE, <span class="number">6</span> * <span class="keyword">sizeof</span>(GLfloat), (GLvoid*)(<span class="number">3</span> * <span class="keyword">sizeof</span>(GLfloat)));</span><br><span class="line">	glEnableVertexAttribArray(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">	glBindVertexArray(<span class="number">0</span>); <span class="comment">// Unbind VAO</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">float</span> xOffset = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Game loop</span></span><br><span class="line">	<span class="keyword">while</span> (!glfwWindowShouldClose(window))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">// Check if any events have been activiated (key pressed, mouse moved etc.) and call corresponding response functions</span></span><br><span class="line">		glfwPollEvents();</span><br><span class="line"></span><br><span class="line">		<span class="comment">// Render</span></span><br><span class="line">		<span class="comment">// Clear the colorbuffer</span></span><br><span class="line">		glClearColor(<span class="number">0.2f</span>, <span class="number">0.3f</span>, <span class="number">0.3f</span>, <span class="number">1.0f</span>);</span><br><span class="line">		glClear(GL_COLOR_BUFFER_BIT);</span><br><span class="line"></span><br><span class="line">		xOffset += <span class="number">0.0001</span>;</span><br><span class="line">		ourShader.SetUniformFloat(<span class="string">"xOffset"</span>, xOffset);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// Draw the triangle</span></span><br><span class="line">		ourShader.Use();</span><br><span class="line">		glBindVertexArray(VAO);</span><br><span class="line">		glDrawArrays(GL_TRIANGLES, <span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line">		glBindVertexArray(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// Swap the screen buffers</span></span><br><span class="line">		glfwSwapBuffers(window);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// Properly de-allocate all resources once they've outlived their purpose</span></span><br><span class="line">	glDeleteVertexArrays(<span class="number">1</span>, &amp;VAO);</span><br><span class="line">	glDeleteBuffers(<span class="number">1</span>, &amp;VBO);</span><br><span class="line">	<span class="comment">// Terminate GLFW, clearing any resources allocated by GLFW.</span></span><br><span class="line">	glfwTerminate();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Is called whenever a key is pressed/released via GLFW</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">key_callback</span><span class="params">(GLFWwindow* window, <span class="keyword">int</span> key, <span class="keyword">int</span> scancode, <span class="keyword">int</span> action, <span class="keyword">int</span> mode)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (key == GLFW_KEY_ESCAPE &amp;&amp; action == GLFW_PRESS)</span><br><span class="line">		glfwSetWindowShouldClose(window, GL_TRUE);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>xOffset.vs</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#version 330 core</span><br><span class="line">layout (location = 0) in vec3 position;</span><br><span class="line">layout (location = 1) in vec3 color;</span><br><span class="line"></span><br><span class="line">out vec3 ourColor;</span><br><span class="line"></span><br><span class="line">uniform float xOffset;</span><br><span class="line"></span><br><span class="line">void main()</span><br><span class="line">&#123;</span><br><span class="line">    gl_Position = vec4(position.x + xOffset, position.yz, 1.0f);</span><br><span class="line">    ourColor = color;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>default.frag</em></p>
<figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line"><span class="meta">#version 330 core</span></span><br><span class="line"><span class="keyword">in</span> <span class="type">vec3</span> ourColor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">out</span> <span class="type">vec4</span> color;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> main()</span><br><span class="line">&#123;</span><br><span class="line">    color = <span class="type">vec4</span>(ourColor, <span class="number">1.0</span>f);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>shader.h</em></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> SHADER_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SHADER_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;GL/glew.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Shader</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	GLuint Program;</span><br><span class="line">	<span class="comment">// Constructor generates the shader on the fly</span></span><br><span class="line">	Shader(<span class="keyword">const</span> GLchar* vertexPath, <span class="keyword">const</span> GLchar* fragmentPath)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">// 1. Retrieve the vertex/fragment source code from filePath</span></span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">string</span> vertexCode;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">string</span> fragmentCode;</span><br><span class="line">		<span class="built_in">std</span>::ifstream vShaderFile;</span><br><span class="line">		<span class="built_in">std</span>::ifstream fShaderFile;</span><br><span class="line">		<span class="comment">// ensures ifstream objects can throw exceptions:</span></span><br><span class="line">		vShaderFile.exceptions(<span class="built_in">std</span>::ifstream::badbit);</span><br><span class="line">		fShaderFile.exceptions(<span class="built_in">std</span>::ifstream::badbit);</span><br><span class="line">		<span class="keyword">try</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="comment">// Open files</span></span><br><span class="line">			vShaderFile.open(vertexPath);</span><br><span class="line">			fShaderFile.open(fragmentPath);</span><br><span class="line">			<span class="built_in">std</span>::<span class="built_in">stringstream</span> vShaderStream, fShaderStream;</span><br><span class="line">			<span class="comment">// Read file's buffer contents into streams</span></span><br><span class="line">			vShaderStream &lt;&lt; vShaderFile.rdbuf();</span><br><span class="line">			fShaderStream &lt;&lt; fShaderFile.rdbuf();</span><br><span class="line">			<span class="comment">// close file handlers</span></span><br><span class="line">			vShaderFile.close();</span><br><span class="line">			fShaderFile.close();</span><br><span class="line">			<span class="comment">// Convert stream into string</span></span><br><span class="line">			vertexCode = vShaderStream.str();</span><br><span class="line">			fragmentCode = fShaderStream.str();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">catch</span> (<span class="built_in">std</span>::ifstream::failure e)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"ERROR::SHADER::FILE_NOT_SUCCESFULLY_READ"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">const</span> GLchar* vShaderCode = vertexCode.c_str();</span><br><span class="line">		<span class="keyword">const</span> GLchar * fShaderCode = fragmentCode.c_str();</span><br><span class="line">		<span class="comment">// 2. Compile shaders</span></span><br><span class="line">		GLuint vertex, fragment;</span><br><span class="line">		GLint success;</span><br><span class="line">		GLchar infoLog[<span class="number">512</span>];</span><br><span class="line">		<span class="comment">// Vertex Shader</span></span><br><span class="line">		vertex = glCreateShader(GL_VERTEX_SHADER);</span><br><span class="line">		glShaderSource(vertex, <span class="number">1</span>, &amp;vShaderCode, <span class="literal">NULL</span>);</span><br><span class="line">		glCompileShader(vertex);</span><br><span class="line">		<span class="comment">// Print compile errors if any</span></span><br><span class="line">		glGetShaderiv(vertex, GL_COMPILE_STATUS, &amp;success);</span><br><span class="line">		<span class="keyword">if</span> (!success)</span><br><span class="line">		&#123;</span><br><span class="line">			glGetShaderInfoLog(vertex, <span class="number">512</span>, <span class="literal">NULL</span>, infoLog);</span><br><span class="line">			<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"ERROR::SHADER::VERTEX::COMPILATION_FAILED\n"</span> &lt;&lt; infoLog &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// Fragment Shader</span></span><br><span class="line">		fragment = glCreateShader(GL_FRAGMENT_SHADER);</span><br><span class="line">		glShaderSource(fragment, <span class="number">1</span>, &amp;fShaderCode, <span class="literal">NULL</span>);</span><br><span class="line">		glCompileShader(fragment);</span><br><span class="line">		<span class="comment">// Print compile errors if any</span></span><br><span class="line">		glGetShaderiv(fragment, GL_COMPILE_STATUS, &amp;success);</span><br><span class="line">		<span class="keyword">if</span> (!success)</span><br><span class="line">		&#123;</span><br><span class="line">			glGetShaderInfoLog(fragment, <span class="number">512</span>, <span class="literal">NULL</span>, infoLog);</span><br><span class="line">			<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"ERROR::SHADER::FRAGMENT::COMPILATION_FAILED\n"</span> &lt;&lt; infoLog &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// Shader Program</span></span><br><span class="line">		<span class="keyword">this</span>-&gt;Program = glCreateProgram();</span><br><span class="line">		glAttachShader(<span class="keyword">this</span>-&gt;Program, vertex);</span><br><span class="line">		glAttachShader(<span class="keyword">this</span>-&gt;Program, fragment);</span><br><span class="line">		glLinkProgram(<span class="keyword">this</span>-&gt;Program);</span><br><span class="line">		<span class="comment">// Print linking errors if any</span></span><br><span class="line">		glGetProgramiv(<span class="keyword">this</span>-&gt;Program, GL_LINK_STATUS, &amp;success);</span><br><span class="line">		<span class="keyword">if</span> (!success)</span><br><span class="line">		&#123;</span><br><span class="line">			glGetProgramInfoLog(<span class="keyword">this</span>-&gt;Program, <span class="number">512</span>, <span class="literal">NULL</span>, infoLog);</span><br><span class="line">			<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"ERROR::SHADER::PROGRAM::LINKING_FAILED\n"</span> &lt;&lt; infoLog &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// Delete the shaders as they're linked into our program now and no longer necessery</span></span><br><span class="line">		glDeleteShader(vertex);</span><br><span class="line">		glDeleteShader(fragment);</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// Uses the current shader</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">Use</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		glUseProgram(<span class="keyword">this</span>-&gt;Program);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">SetUniformFloat</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* name, <span class="keyword">float</span> value)</span> </span>&#123;</span><br><span class="line">		GLint uniformLocation = glGetUniformLocation(Program, name);</span><br><span class="line">		glUseProgram(Program);</span><br><span class="line">		glUniform1f(uniformLocation, value);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>LeetCode算法练习</title>
    <url>/blog/2019/03/11/LeetCode%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/</url>
    <content><![CDATA[<h4 id="Two-Sum"><a href="#Two-Sum" class="headerlink" title="Two Sum"></a>Two Sum</h4><h5 id="Approach-1-Brute-Force"><a href="#Approach-1-Brute-Force" class="headerlink" title="Approach 1: Brute Force"></a>Approach 1: Brute Force</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">twoSum</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; result;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; nums.size() ; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span> ; j &lt; nums.size() ; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[i] + nums[j] == target)</span><br><span class="line">                &#123;</span><br><span class="line">                    result = &#123;i, j&#125;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">        <span class="keyword">throw</span> <span class="string">"No solution"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>$$<br>T(n)&#x3D;O(n^2)<br>\<br>S(n)&#x3D;O(1)<br>$$</p>
<h5 id="Approach-2-One-pass-Hash-Table"><a href="#Approach-2-One-pass-Hash-Table" class="headerlink" title="Approach 2: One-pass Hash Table"></a>Approach 2: One-pass Hash Table</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">twoSum</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; result;</span><br><span class="line">        <span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; hash;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.size(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> complement = target - nums[i];</span><br><span class="line">            <span class="keyword">if</span>(hash.count(complement))</span><br><span class="line">            &#123;</span><br><span class="line">                result = &#123;hash[complement], i&#125;;</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">            hash[nums[i]] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="string">"No solution"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>$$<br>T(n)&#x3D;O(n) \ S(n)&#x3D;O(n)<br>$$</p>
<p><em>Runtime: 12 ms, faster than 94.28% of C++ online submissions for Two Sum.</em></p>
<p><em>Memory Usage: 10.4 MB, less than 32.76% of C++ online submissions for Two Sum.</em></p>
<h4 id="Add-Two-Numbers"><a href="#Add-Two-Numbers" class="headerlink" title="Add Two Numbers"></a>Add Two Numbers</h4><h5 id="Approach-1-Elementary-Math"><a href="#Approach-1-Elementary-Math" class="headerlink" title="Approach 1: Elementary Math"></a>Approach 1: Elementary Math</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function">ListNode* <span class="title">addTwoNumbers</span><span class="params">(ListNode* l1, ListNode* l2)</span> </span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            ListNode* result = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">            ListNode* head = result;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">while</span>(l1 || l2)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(l1)</span><br><span class="line">                &#123;</span><br><span class="line">                    result-&gt;val += l1-&gt;val;</span><br><span class="line">                    l1 = l1-&gt;next;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(l2)</span><br><span class="line">                &#123;</span><br><span class="line">                    result-&gt;val += l2-&gt;val;</span><br><span class="line">                    l2 = l2-&gt;next;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(result-&gt;val &gt; <span class="number">9</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    result-&gt;val = result-&gt;val % <span class="number">10</span>;</span><br><span class="line">                    result-&gt;next = <span class="keyword">new</span> ListNode(<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(l1 || l2)</span><br><span class="line">                    &#123;</span><br><span class="line">                        result-&gt;next = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                result = result-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>$$<br>T(n)&#x3D;O(max(m, n)) \ S(n)&#x3D;O(max(m, n))<br>$$</p>
<p><em>Runtime: 40 ms, faster than 96.35% of C++ online submissions for Add Two Numbers.</em></p>
<p><em>Memory Usage: 19.1 MB, less than 61.79% of C++ online submissions for Add Two Numbers.</em></p>
<h4 id="Longest-Substring-Without-Repeating-Characters"><a href="#Longest-Substring-Without-Repeating-Characters" class="headerlink" title="Longest Substring Without Repeating Characters"></a>Longest Substring Without Repeating Characters</h4><h5 id="Approach-1-Sliding-Window"><a href="#Approach-1-Sliding-Window" class="headerlink" title="Approach 1: Sliding Window"></a>Approach 1: Sliding Window</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(<span class="built_in">string</span> s)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> maxLength = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> lastStart = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">map</span>&lt;<span class="keyword">char</span>, <span class="keyword">int</span>&gt; charIndex;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.size(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(charIndex.count(s[i]) &amp;&amp; charIndex[s[i]] &gt;= lastStart)</span><br><span class="line">            &#123;</span><br><span class="line">                lastStart = charIndex[s[i]] + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(maxLength &lt; i - lastStart + <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                maxLength = i - lastStart + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            charIndex[s[i]] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxLength;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>$$<br>T(n)&#x3D;O(n) \ S(n)&#x3D;O(min(m, n))<br>$$</p>
<p><em>Runtime: 36 ms, faster than 49.65% of C++ online submissions for Longest Substring Without Repeating Characters.</em></p>
<p><em>Memory Usage: 16.1 MB, less than 60.63% of C++ online submissions for Longest Substring Without Repeating Characters.</em></p>
<h5 id="Approach-2-Brute-Force"><a href="#Approach-2-Brute-Force" class="headerlink" title="Approach 2: Brute Force"></a>Approach 2: Brute Force</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(<span class="built_in">string</span> s)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> maxLength = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">set</span>&lt;<span class="keyword">char</span>&gt; substring;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.size(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &lt; s.size() &amp;&amp; !substring.count(s[j]); j++)</span><br><span class="line">            &#123;</span><br><span class="line">                substring.insert(s[j]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(maxLength &lt; substring.size())</span><br><span class="line">            &#123;</span><br><span class="line">                maxLength = substring.size();</span><br><span class="line">            &#125;</span><br><span class="line">            substring.clear();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxLength;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>$$<br>T(n)&#x3D;O(n^2) \ S(n)&#x3D;O(min(m, n))<br>$$</p>
<p><em>Runtime: 1148 ms, faster than 5.14% of C++ online submissions for Longest Substring Without Repeating Characters.</em></p>
<p><em>Memory Usage: 272 MB, less than 5.03% of C++ online submissions for Longest Substring Without Repeating Characters.</em></p>
]]></content>
  </entry>
  <entry>
    <title>Improving Level Design Through Game User Research 论文笔记</title>
    <url>/blog/2019/04/10/Improving-Level-Design-Through-GUR-a-Comparison-of-Methodologies/</url>
    <content><![CDATA[<p><strong>Abstract</strong></p>
<ul>
<li><p>User interviews, game metrics, psychophysiology</p>
</li>
<li><p>Based on the results we conclude that user interviews provide the clearest indications for improvement among the considered methodologies while metrics and biometrics add different types of information that cannot be obtained otherwise.</p>
</li>
</ul>
<p><img src="https://i.postimg.cc/pdtGds6T/1554892503361.png" alt="1554892503361"></p>
<p><strong>Three Methodologies</strong></p>
<ol>
<li>Participant interviews with player observation by researchers. Players were interviewed for about ten minutes, using a standardized script. They also filled out a 50 item questionnaire.</li>
<li>Data collection through metrics; the game was modified to log data about user behavior and user-game interaction. We logged a large number of events such as all types of movements, attacks (including attacker and target), collection of bonus items, upgrades, downgrades and game deaths, and each single key press made by the participant.</li>
<li>Data collection through biometrics; this data was gathered from the play tester by using sensors to monitor heart rate, skin conductivity and the activity of the two facial muscles, the zygomaticus major and the corrugator supercillii.</li>
</ol>
<p><img src="https://i.postimg.cc/tRmB6qM8/1554892576197.png" alt="1554892576197"></p>
<p><img src="https://i.postimg.cc/L5hvWwny/1554892585378.png" alt="1554892585378"></p>
<p><strong>Phase 1: Preparation of the Benchmark Levels</strong></p>
<p>This phase was intended to set a benchmark, to define a point at which professional designers would release their work for internal quality assurance.</p>
<p><strong>Phase 2: GUR Data Collection</strong></p>
<ul>
<li><p><strong>General level ratings:</strong> each player had to rate the level they had played in terms of fun, length and difficulty using a 5-point Likert scale.</p>
</li>
<li><p><strong>Interview data:</strong> Open-ended, semi-structured interviews with players were held at the end of each level.</p>
</li>
<li><p><strong>Game metric data:</strong> This allowed for periodic tracking of the player position as well as relevant game events, such as defeating enemies, jumps, collecting bonus items, etc.</p>
</li>
<li><p><strong>Biometric data:</strong> All participants were monitored with several biometric sensors during the test sessions.</p>
</li>
</ul>
<p><strong>Phase 3: Data Evaluation and Visualization</strong></p>
<p>**Interview GUR data:**remove irrelevant information, classified as actionable changes and non-essential changes.</p>
<p><img src="https://i.postimg.cc/W469q0B7/1554892840377.png" alt="1554892840377"></p>
<p><strong>Metric data:</strong> Apart from acquiring play statistics for each participant, the logs were used to create heatmaps.</p>
<p><img src="https://i.postimg.cc/6qSzxcZB/1554892849326.png" alt="1554892849326"></p>
<p><strong>Biometric data:</strong> For the evaluation of biometric data, each level was divided into 12 equally long sections.</p>
<p><img src="https://i.postimg.cc/G2LXFHrn/1554892919940.png" alt="1554892919940"></p>
<p><img src="https://i.postimg.cc/tTB22pCZ/1554892947632.png" alt="1554892947632"></p>
<p><strong>Phase 4: Modifications</strong></p>
<p>Each level was modified based on the data collected in phase 3 according to the three different pair-wise combinations of methodologies. These were:</p>
<ol>
<li>interviews and game metrics; </li>
<li>interviews and biometrics; </li>
<li>game metrics and biometrics.</li>
</ol>
<p>For each combination of methodologies, a total of six changes were implemented across the three levels.</p>
<p><img src="https://i.postimg.cc/wTy0QKKM/1554893080181.png" alt="1554893080181"></p>
<p><strong>Phase 5: Evaluation of Modifications</strong></p>
<ul>
<li>Players were asked to complete the Game Experience Questionnaire (GEQ), a tool that is commonly used in the GUR field to quickly analyze player experience.</li>
<li>A total of 40 participants (22 of which were female) in ages ranging from 15 to 27 years (median age of 23 years)took part in this second data collection session. Players played one version of the modified level-sets, consisting of three levels.</li>
</ul>
<p><strong>Results</strong></p>
<p><img src="https://i.postimg.cc/WbBS99jn/1554893180704.png" alt="1554893180704"></p>
<ul>
<li>On the whole, the differences between the combined methodologies were much smaller than we expected.</li>
<li>A consistent pattern can be seen across the variables Positive Affect, Flow, Positive Experience, and Competence: The levels modified by &#96;interview &amp; metrics’ were rated most positively.</li>
<li>three dimensions had statistically significant differences between the groups: Positive Experience (p&#x3D;.008, F&#x3D;5.595), Competence (p&#x3D;.04, F&#x3D;3.530), and Positive Affect (p&#x3D;.048, F&#x3D;3.290).</li>
<li>the significant differences within those dimensions are found between the pairings “interview &amp; metrics” and  “biometrics &amp; metrics” for the dimensions Competence (p&#x3D;.03) and Positive Affect (p&#x3D;.038), and between the pairings “interview &amp; metrics” and “interview &amp; biometrics” for the dimension Positive Experience (p&#x3D;.008).</li>
<li>there could be a Type II error as the ANOVA analysis was significant for only a few GEQ dimensions.</li>
<li>From the point of view of a level designer, each pair of GUR methodologies was able to provide actionable indications regarding locations or situations that should be modified to improve player satisfaction.</li>
</ul>
<p><strong>Deficiency</strong></p>
<ul>
<li>第二次组织试玩没有测试metrics和biometrics数据验证。</li>
<li>关卡的修改比较主观，没有说明与数据的对应关系。</li>
<li>样板数量过小</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Russian Roulette &amp; Importance Sampling</title>
    <url>/blog/2022/04/03/Russian%20Roulette%20&amp;%20Importance%20Sampling/</url>
    <content><![CDATA[<p>对于Path Tracing中的最重要思想Russian Roulette &amp; Importance Sampling，因为老是忘，所以这次尝试用更加简单无脑的语言总结一下。</p>
<br>

<h3 id="Importance-Sampling"><a href="#Importance-Sampling" class="headerlink" title="Importance Sampling"></a>Importance Sampling</h3><p>先来说蒙特卡洛积分</p>
<p>传统的思想是黎曼积分，把每个小面积加起来，然后无限细分就会逼近真实值：</p>
<p><img src="https://raw.githubusercontent.com/DiaryChris/typora-image/master/typora202204/03/172837-563936.png" alt="slice1@2x"></p>
<p>在定义域上均匀采样，采采采，每次都算整个定义域的面积，然后平均一下，随着采样数的增加，就可以逼近真实值，这是最简单的蒙特卡洛积分：</p>
<p><img src="https://raw.githubusercontent.com/DiaryChris/typora-image/master/typora202204/03/173422-543191.png" alt="slice2@2x"></p>
<p>那么重要性采样是要解决一个什么问题呢？</p>
<p>引用一下我上一篇文章的话：</p>
<blockquote>
<p>蒙特卡洛积分中，可以使用均匀采样和重要性采样。两种采样方式的积分结果期望是相同的，均随样本量的增加收敛于真实值，也就是说两种采样方式都是正确而无偏的。所以，重要性采样的目的在于，在同样的采样数下有效减少积分结果的方差，即积分结果更加收敛于真实值。</p>
</blockquote>
<p>其实就是<strong>在比较少的采样数下，得到更逼近真实值的结果</strong>。</p>
<p>怎么做呢？</p>
<p>一个直观的想法是：多采值大的，少采值小的，就可以更快逼近。对应到Path Tracing中就是多采亮的地方，少采暗的地方，想想就觉得很对。</p>
<p>就像下图这样：</p>
<p><img src="https://raw.githubusercontent.com/DiaryChris/typora-image/master/typora202204/03/173849-721486.png" alt="slice3@2x"></p>
<p>但是这样加起来的结果，直接平均明显不对，明显偏大，怎么办？很简单，把采样概率除掉再平均不就好了。</p>
<p><img src="https://raw.githubusercontent.com/DiaryChris/typora-image/master/typora202204/03/174540-824631.png" alt="slice4@2x"></p>
<p>多采值大的，少采值小的这个思路是没问题了。</p>
<p>那么什么情况下逼近最快呢？想想应该是直接把原函数作为采样的PDF（概率密度函数）时是最理想的。</p>
<p>那么问题来了，我就是不知道原函数长啥样才用的蒙特卡洛积分啊。</p>
<p>（这步是我猜的）简单，先均匀采样一遍描出来个近似的函数，然后作为PDF扔进去不就行了，其实也差不了多少：</p>
<p><img src="https://raw.githubusercontent.com/DiaryChris/typora-image/master/typora202204/03/175533-88166.png" alt="slice5@2x"></p>
<p>重要性采样就是这么简单。</p>
<br>



<h3 id="Russian-Roulette"><a href="#Russian-Roulette" class="headerlink" title="Russian Roulette"></a>Russian Roulette</h3><p>下面我们要解决什么问题呢？</p>
<p><strong>Path Tracing不知道什么时候停止追踪</strong>的问题。</p>
<p>当然我第一脑子肯定能想到，设置个阈值，能量小于0.0001的时候就停止，不就行了吗。</p>
<p>但是这样带来的渲染结果就是，总比真实值要暗那么一点点。（又不是不能用）</p>
<blockquote>
<p>在Path Tracing中，理论上光线需要递归弹射无数次，我们无论怎样设置截断次数都将得到一个理论上不正确的值。</p>
</blockquote>
<p>其实有更聪明的做法：</p>
<blockquote>
<p>使用Russian Roulette可以非常巧妙的解决这一问题：对于一次光线弹射，设定以概率 $P$ 打出光线并计算结果，而概率 $1-P$ 不打出光线。将打出光线的计算结果除以 $P$ ，则其期望为理论正确值 $L_o$ 。对一次弹射而言这种处理毫无意义且引入误差，而对于多次计算则大不相同，对于同一条光线多次多层递归计算后的结果求期望，其结果依概率收敛于光线进行无穷次弹射的正确值。</p>
<p>对于一束光线，需要计算 $n$ 次弹射的概率为 $P^n$ ，随 $n$ 的增大而趋于零，这使得该递归算法总能终止。 $P$ 越小时算法终止越快，性能越好，计算结果随机误差越大；$P&#x3D;1$ 时相当于原始思路，光线将会弹射无数次，递归算法无法终止。</p>
<p><img src="https://raw.githubusercontent.com/DiaryChris/typora-image/master/typora202009/17/155209-191348.png" alt="image-20200917155206714"></p>
</blockquote>
<p>完了，我自己写的我都看不懂，智商果真又下降了。</p>
<p>那么我们从头再来。</p>
<p>我们的目的是什么？<strong>让Path Tracing不会无限追踪下去，同时还能逼近真实值</strong>。</p>
<p>那么我们这样可以吗？每一步都以0.8的概率继续追踪，0.2的概率放弃追踪，这样追踪至少1次的概率为0.8，2次为0.64，3次为0.8 ^ 3，后面总有一次会停止追踪，无限追踪的概率为0。这不就解决了无限追踪的问题吗？我可真是个小机灵鬼。</p>
<p>但是这样一来，我们的结果不就远小于真实值了吗？</p>
<p>没关系，我们想想，多次采样后，我们的结果肯定就是真实值的大约0.8倍啊（其实不是，应该是小于0.8的一个值），再把0.8给他除掉不就行了。</p>
<p>仔细一想，明显不应该直接只在最后的结果上除，而是在每一步递归返回的结果上都要除，因为每一步都是0.8概率继续追踪。</p>
<p>完美。</p>
<p>对于一次采样的一次追踪而言，这样做明显是错的离谱，因为得到的要么是真实值的1 &#x2F; 0.8 &#x3D; 1.25倍，要么是0 &#x2F; 0.8 &#x3D; 0。但是对于大量采样，这样做的结果是1.25 * 0.8 + 0 * 0.2 &#x3D; 1，绝了。</p>
<p>世界上怎么会有这么聪明的人，我好嫉妒。</p>
<p>学术点的说法是我以前写的：</p>
<blockquote>
<p>这一方法成功将截断误差消除在是否打出光线的随机性中，系统误差化为随机误差，从而得到了正确无偏的值。</p>
<p>太妙了，总感觉这个思路将来可以用于解决其他问题。</p>
</blockquote>
<br>

<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>最后我发现了这两种方法共同的思路：</p>
<p><strong>对于大量采样而言，先给它加个概率，然后再在结果中除掉不就行了。</strong></p>
<p>希望我以后也能提出类似的方法，然后对自己说出：“我好聪明”。</p>
<br>]]></content>
  </entry>
  <entry>
    <title>Notes on Some Difficult Points in BRDF and Ray Tracing</title>
    <url>/blog/2020/09/17/Notes%20on%20some%20difficult%20points%20in%20BRDF%20and%20ray%20tracing/</url>
    <content><![CDATA[<h3 id="辐射度量学概念辨析"><a href="#辐射度量学概念辨析" class="headerlink" title="辐射度量学概念辨析"></a>辐射度量学概念辨析</h3><br>

<h4 id="Radiant-energy"><a href="#Radiant-energy" class="headerlink" title="Radiant energy"></a>Radiant energy</h4><p>$Q$ </p>
<p><em>$[J &#x3D; Joule]$</em></p>
<p>The energy of electromagnetic radiation </p>
<br>

<h4 id="Radiant-flux"><a href="#Radiant-flux" class="headerlink" title="Radiant flux"></a>Radiant flux</h4><p>$\phi \equiv \frac{dQ}{dt} $ </p>
<p><em>$[W &#x3D; Watt] [lm &#x3D; lumen]$</em></p>
<p>Energy per unit time </p>
<br>

<h4 id="Radiant-intensity"><a href="#Radiant-intensity" class="headerlink" title="Radiant intensity"></a>Radiant intensity</h4><p>$I(\omega) \equiv \frac{d\phi}{d\omega}$  </p>
<p><em>$[cd &#x3D; candela &#x3D; \frac{lm}{sr}]$</em></p>
<p>Radiant flux per unit solid angle</p>
<p><strong>思考：</strong>Radiant intensity主要用于描述光源的性质，对于一个均匀点光源，空间内任意一点的Radiant intensity应当是相等的，且等于点光源功率 $\phi$ 除以 $4\pi$ 。</p>
<br>

<h4 id="Irradiance"><a href="#Irradiance" class="headerlink" title="Irradiance"></a>Irradiance</h4><p>$E(x) \equiv \frac{d\phi(x)}{dA}$   </p>
<p><em>$[lux &#x3D; \frac{lm}{m^2}]$</em></p>
<p>The flux per unit area incident on a surface point. </p>
<p><strong>思考：</strong>Irradiance 总是对于平面上一点而言的，而不是对于某条光线而言的。</p>
<br>

<h4 id="Radiance"><a href="#Radiance" class="headerlink" title="Radiance"></a>Radiance</h4><p>$L(p, \omega) \equiv \frac{d^2\phi(p, \omega)}{d\omega dA \cos\theta}$</p>
<p><em>$[nit &#x3D; \frac{cd}{m^2} &#x3D; \frac{lm}{sr \space m^2}]$</em></p>
<p>The flux emitted, reflected, transmitted or received by a surface, per unit solid angle, per projected unit area. </p>
<p><strong>思考：</strong>Radiance 是对于某个方向上的一条光线而言的。</p>
<br>

<h3 id="Irradiance定义中cosθ的理解"><a href="#Irradiance定义中cosθ的理解" class="headerlink" title="Irradiance定义中cosθ的理解"></a>Irradiance定义中cosθ的理解</h3><p>如下图所示，初始笔记中的理解还是有所偏差，红色小字为具体修正部分。</p>
<p><img src="https://raw.githubusercontent.com/DiaryChris/typora-image/master/typora202009/17/114624-115989.png" alt="image-20200917112453147"></p>
<p>引入 $\cos\theta$ 的本质原因是在计算入射 $Irradiance$ 时，一束光线照射在倾斜平面$P$上面积$dA$的光通量 $d\phi$ 实际上是其垂直平面$P’$上通过面积$dA$的光通量 $d\phi’$ 的 $\cos\theta$ 倍。即导致了 $E&#x3D;E’\cos\theta$ ，其中 $E’$ 为该光线在垂直平面上造成的 $Irradiance$ 。</p>
<p><img src="https://raw.githubusercontent.com/DiaryChris/typora-image/master/typora202009/17/142614-407654.png" alt="image-20200917142613601"></p>
<p>而由于 $Radiance$ 描述的是光线的性质，所以始终为其垂直平面上的 $\frac{dE}{d\omega}$ ，当其照射在倾斜平面上 $dA$ 时，$L(p, \omega) \equiv \frac{d^2\phi(p, \omega)}{d\omega dA_\perp}\equiv \frac{d^2\phi(p, \omega)}{d\omega dA \cos\theta}$</p>
<br>

<h3 id="渲染方程简化"><a href="#渲染方程简化" class="headerlink" title="渲染方程简化"></a>渲染方程简化</h3><p>首先，渲染方程为：</p>
<p><img src="https://raw.githubusercontent.com/DiaryChris/typora-image/master/typora202009/17/151432-100547.png" alt="image-20200917151431515"></p>
<p>将对于 $x$ 的入射光 $L_i$ 替换为从另一物体 $x’$ 发出的反射光（包括其自发光）：</p>
<p><img src="https://raw.githubusercontent.com/DiaryChris/typora-image/master/typora202009/17/151728-32484.png" alt="image-20200917151727622"></p>
<p>进一步，将BRDF的反射计算简化为一个算子，用 $K$ 表示：</p>
<p><img src="https://raw.githubusercontent.com/DiaryChris/typora-image/master/typora202009/17/152315-564138.png" alt="image-20200917152314715"></p>
<p>对于全局而言，一个物体的 $l(u)$ 会在另一个物体的式子中充当 $l(v)$，所以可以将全局所有的光照计算写成一个矩阵方程形式：</p>
<p><img src="https://raw.githubusercontent.com/DiaryChris/typora-image/master/typora202009/17/152657-786707.png" alt="image-20200917152656607"></p>
<h1 id="当场景中有-a-b-c-三个物体时，可以简单理解为：-left-begin-matrix-a-o-b-o-c-o-end-matrix-right"><a href="#当场景中有-a-b-c-三个物体时，可以简单理解为：-left-begin-matrix-a-o-b-o-c-o-end-matrix-right" class="headerlink" title="当场景中有 $a,b,c$ 三个物体时，可以简单理解为：$$\left[\begin{matrix}a_o \\b_o \\c_o\end{matrix}\right]"></a>当场景中有 $a,b,c$ 三个物体时，可以简单理解为：<br>$$<br>\left[<br>\begin{matrix}<br>a_o \\<br>b_o \\<br>c_o<br>\end{matrix}<br>\right]</h1><p>\left[<br>\begin{matrix}<br>a_e \\<br>b_e \\<br>c_e<br>\end{matrix}<br>\right]<br>+<br>K_{3\times3}<br>\left[<br>\begin{matrix}<br>a_o \\<br>b_o \\<br>c_o<br>\end{matrix}<br>\right]<br>$$<br>其中：<br>$$<br>K&#x3D;<br>\left[<br>\begin{matrix}<br>0 &amp; k_{ba} &amp; k_{ca} \\<br>k_{ab} &amp; 0 &amp; k_{cb} \\<br>k_{ac} &amp; k_{bc} &amp; 0<br>\end{matrix}<br>\right]<br>$$</p>
<br>

<h3 id="Russian-Roulette方法中运用的思想"><a href="#Russian-Roulette方法中运用的思想" class="headerlink" title="Russian Roulette方法中运用的思想"></a>Russian Roulette方法中运用的思想</h3><p>在Path tracing中，理论上光线需要递归弹射无数次，我们无论怎样设置截断次数都将得到一个理论上不正确的值。</p>
<p>使用Russian Roulette可以非常巧妙的解决这一问题：对于一次光线弹射，设定以概率 $P$ 打出光线并计算结果，而概率 $1-P$ 不打出光线。将打出光线的计算结果除以 $P$ ，则其期望为理论正确值 $L_o$ 。对一次弹射而言这种处理毫无意义且引入误差，而对于多次计算则大不相同，对于同一条光线多次多层递归计算后的结果求期望，其结果依概率收敛于光线进行无穷次弹射的正确值。</p>
<p>对于一束光线，需要计算 $n$ 次弹射的概率为 $P^n$ ，随 $n$ 的增大而趋于零，这使得该递归算法总能终止。 $P$ 越小时算法终止越快，性能越好，计算结果随机误差越大；$P&#x3D;1$ 时相当于原始思路，光线将会弹射无数次，递归算法无法终止。</p>
<p><img src="https://raw.githubusercontent.com/DiaryChris/typora-image/master/typora202009/17/155209-191348.png" alt="image-20200917155206714"></p>
<p>这一方法成功将截断误差消除在是否打出光线的随机性中，系统误差化为随机误差，从而得到了正确无偏的值。</p>
<p>太妙了，总感觉这个思路将来可以用于解决其他问题。</p>
<br>

<h3 id="重要性采样的目的"><a href="#重要性采样的目的" class="headerlink" title="重要性采样的目的"></a>重要性采样的目的</h3><p>蒙特卡洛积分中，可以使用均匀采样和重要性采样。两种采样方式的积分结果期望是相同的，均随样本量的增加收敛于真实值，也就是说两种采样方式都是正确而无偏的。所以，重要性采样的目的在于，在同样的采样数下有效减少积分结果的方差，即积分结果更加收敛于真实值。</p>
<br>

<h3 id="Lambert-Diffuse-BRDF-推导"><a href="#Lambert-Diffuse-BRDF-推导" class="headerlink" title="Lambert Diffuse BRDF 推导"></a>Lambert Diffuse BRDF 推导</h3><p>设BRDF为 $f_r(\omega_i, \omega_o)$<br>$$<br>f_r(\omega_i, \omega_o) &#x3D; \frac {dL_o}{dE_i} &#x3D; \frac {dL_o}{L_i\cos\theta_id\omega_i}<br>$$<br>则入射光 $L_i$ 在 $\omega_o$ 方向上的反射光为：<br>$$<br>dL_o &#x3D; f_r(\omega_i, \omega_o)L_i\cos\theta_id\omega_i<br>$$<br>在半球面上反射的 $dE_o$ 为：<br>$$<br>dE_o &#x3D; \int_\Omega dL_o\cos\theta_od\omega_o<br>\<br>&#x3D;\int_\Omega(f_r(\omega_i, \omega_o)L_i\cos\theta_id\omega_i)\cos\theta_od\omega_o<br>\<br>&#x3D;L_i\cos\theta_id\omega_i\int_\Omega f_r(\omega_i, \omega_o)\cos\theta_od\omega_o<br>$$<br>由能量守恒有：<br>$$<br>dE_o \le dE_i &#x3D; L_i\cos\theta_id\omega_i<br>$$<br>即<br>$$<br>\int_\Omega f_r(\omega_i, \omega_o)\cos\theta_od\omega_o \le 1<br>$$<br>由于Lambert Diffuse的BDRF与方向无关，应为常数$C$，设反射率为 $\alpha\le1$，则有：<br>$$<br>\int_\Omega C\cos\theta_od\omega_o &#x3D; \alpha<br>$$<br>计算球面积分，解得：<br>$$<br>f_r(\omega_i, \omega_o) &#x3D; C &#x3D; \frac\alpha\pi<br>$$</p>
<br>


]]></content>
  </entry>
  <entry>
    <title>Subsurface Scattering in Raster Pipeline of UE4</title>
    <url>/blog/2020/12/09/Subsurface%20Scattering%20in%20Raster%20Pipeline%20of%20UE4/</url>
    <content><![CDATA[<h3 id="寻找着色模型入口"><a href="#寻找着色模型入口" class="headerlink" title="寻找着色模型入口"></a>寻找着色模型入口</h3><p>我们首先找到UE4的Subsurface Scattering是在哪里实现的，打开RenderDoc，发现是在<code>StandardDeferredLighting</code>这一步和延迟渲染的光照一同实现的。</p>
<p><img src="https://raw.githubusercontent.com/DiaryChris/typora-image/master/typora202011/09/180723-456486.png" alt="image-20201109180721972"></p>
<p>于是我们在<code>Source/Runtime/Renderer</code>路径下搜索<code>StandardDeferredLighting</code>，定位到<em>LightRendering.cpp</em>。</p>
<p>在文件中查找<code>IMPLEMENT_GLOBAL_SHADER</code>，找到所用到的shader类型为<code>FDeferredLightPS</code>，shader文件为<code>/Engine/Private/DeferredLightPixelShaders.usf</code>，入口函数为<code>DeferredLightPixelMain</code>：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">IMPLEMENT_GLOBAL_SHADER(FDeferredLightPS, <span class="string">"/Engine/Private/DeferredLightPixelShaders.usf"</span>, <span class="string">"DeferredLightPixelMain"</span>, SF_Pixel);</span><br></pre></td></tr></table></figure>

<p>打开<code>DeferredLightPixelShaders.usf</code>中的<code>DeferredLightPixelMain</code>函数，发现输出为名为<code>OutColor</code>的变量，顺着<code>OutColor</code>逐个排查，找到<code>GetDynamicLighting</code>函数，跳到<code>DeferredLightingCommon.ush</code>文件，进一步找到<code>GetDynamicLightingSplit</code>函数，计算光照的函数应该是<code>IntegrateBxDF</code>：</p>
<figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line">Lighting = IntegrateBxDF( GBuffer, N, V, Capsule, Shadow, LightData.bInverseSquared );</span><br></pre></td></tr></table></figure>

<p>随着<code>IntegrateBxDF</code>跳入文件<code>ShadingModels.ush</code>，发现如下代码：</p>
<figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line">FDirectLighting IntegrateBxDF( FGBufferData GBuffer, half3 N, half3 V, half3 L, <span class="type">float</span> Falloff, <span class="type">float</span> NoL, FAreaLight AreaLight, FShadowTerms Shadow )</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">switch</span>( GBuffer.ShadingModelID )</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">case</span> SHADINGMODELID_DEFAULT_LIT:</span><br><span class="line">		<span class="keyword">case</span> SHADINGMODELID_SINGLELAYERWATER:</span><br><span class="line">		<span class="keyword">case</span> SHADINGMODELID_THIN_TRANSLUCENT:</span><br><span class="line">			<span class="keyword">return</span> DefaultLitBxDF( GBuffer, N, V, L, Falloff, NoL, AreaLight, Shadow );</span><br><span class="line">		<span class="keyword">case</span> SHADINGMODELID_SUBSURFACE:</span><br><span class="line">			<span class="keyword">return</span> SubsurfaceBxDF( GBuffer, N, V, L, Falloff, NoL, AreaLight, Shadow );</span><br><span class="line">		<span class="keyword">case</span> SHADINGMODELID_PREINTEGRATED_SKIN:</span><br><span class="line">			<span class="keyword">return</span> PreintegratedSkinBxDF( GBuffer, N, V, L, Falloff, NoL, AreaLight, Shadow );</span><br><span class="line">		<span class="keyword">case</span> SHADINGMODELID_CLEAR_COAT:</span><br><span class="line">			<span class="keyword">return</span> ClearCoatBxDF( GBuffer, N, V, L, Falloff, NoL, AreaLight, Shadow );</span><br><span class="line">		<span class="keyword">case</span> SHADINGMODELID_SUBSURFACE_PROFILE:</span><br><span class="line">			<span class="keyword">return</span> SubsurfaceProfileBxDF( GBuffer, N, V, L, Falloff, NoL, AreaLight, Shadow );</span><br><span class="line">		<span class="keyword">case</span> SHADINGMODELID_TWOSIDED_FOLIAGE:</span><br><span class="line">			<span class="keyword">return</span> TwoSidedBxDF( GBuffer, N, V, L, Falloff, NoL, AreaLight, Shadow );</span><br><span class="line">		<span class="keyword">case</span> SHADINGMODELID_HAIR:</span><br><span class="line">			<span class="keyword">return</span> HairBxDF( GBuffer, N, V, L, Falloff, NoL, AreaLight, Shadow );</span><br><span class="line">		<span class="keyword">case</span> SHADINGMODELID_CLOTH:</span><br><span class="line">			<span class="keyword">return</span> ClothBxDF( GBuffer, N, V, L, Falloff, NoL, AreaLight, Shadow );</span><br><span class="line">		<span class="keyword">case</span> SHADINGMODELID_EYE:</span><br><span class="line">			<span class="keyword">return</span> EyeBxDF( GBuffer, N, V, L, Falloff, NoL, AreaLight, Shadow );</span><br><span class="line">		<span class="keyword">default</span>:</span><br><span class="line">			<span class="keyword">return</span> (FDirectLighting)<span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>终于找到了所有着色模型的分叉点，这样以后研究着色模型就可以从这里作为入口了。</p>
<br>

<h3 id="深入SubsurfaceBxDF"><a href="#深入SubsurfaceBxDF" class="headerlink" title="深入SubsurfaceBxDF"></a>深入SubsurfaceBxDF</h3><figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line">FDirectLighting SubsurfaceBxDF( FGBufferData GBuffer, half3 N, half3 V, half3 L, <span class="type">float</span> Falloff, <span class="type">float</span> NoL, FAreaLight AreaLight, FShadowTerms Shadow )</span><br><span class="line">&#123;</span><br><span class="line">	FDirectLighting Lighting = DefaultLitBxDF( GBuffer, N, V, L, Falloff, NoL, AreaLight, Shadow );</span><br><span class="line">	</span><br><span class="line">	float3 SubsurfaceColor = ExtractSubsurfaceColor(GBuffer);</span><br><span class="line">	<span class="type">float</span> Opacity = GBuffer.CustomData.a;</span><br><span class="line"></span><br><span class="line">	float3 H = <span class="built_in">normalize</span>(V + L);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// to get an effect when you see through the material</span></span><br><span class="line">	<span class="comment">// hard coded pow constant</span></span><br><span class="line">	<span class="type">float</span> InScatter = <span class="built_in">pow</span>(saturate(<span class="built_in">dot</span>(L, -V)), <span class="number">12</span>) * lerp(<span class="number">3</span>, <span class="number">.1</span>f, Opacity);</span><br><span class="line">	<span class="comment">// wrap around lighting, /(PI*2) to be energy consistent (hack do get some view dependnt and light dependent effect)</span></span><br><span class="line">	<span class="comment">// Opacity of 0 gives no normal dependent lighting, Opacity of 1 gives strong normal contribution</span></span><br><span class="line">	<span class="type">float</span> NormalContribution = saturate(<span class="built_in">dot</span>(N, H) * Opacity + <span class="number">1</span> - Opacity);</span><br><span class="line">	<span class="type">float</span> BackScatter = GBuffer.GBufferAO * NormalContribution / (PI * <span class="number">2</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// lerp to never exceed 1 (energy conserving)</span></span><br><span class="line">	Lighting.Transmission = AreaLight.FalloffColor * ( Falloff * lerp(BackScatter, <span class="number">1</span>, InScatter) ) * SubsurfaceColor;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> Lighting;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看出，<code>SubsurfaceBxDF</code>中首先调用了一遍默认的延迟光照<code>DefaultLitBxDF</code>，然后从<code>GBuffer</code>中提取出<code>SubsurfaceColor</code>和<code>Opacity</code>进行进一步的次表面散射计算。</p>
<p>我们可以将<code>lerp(BackScatter, 1, InScatter)</code>这一项展开，在极坐标中画出其<code>Transmission</code>分布图像，其中$α$为入射角弧度，$o$为不透明度<code>Opacity</code>，下图为入射角约为$\frac\pi4$时的<code>Transmission</code>分布：</p>
<p><img src="https://raw.githubusercontent.com/DiaryChris/typora-image/master/typora202011/09/204909-950629.png" alt="1  &lt; 2π  0.77  0.5  cos  α  2π  12  —cos θ&gt; 0}  5Π/6  1.5  7TT/6  0.5  0.5 "></p>
<p>可以看出，其能量大部分分布在透射方向，小部分分布在明暗分界线方向，且不透明度$o$越小，透射能量越大。</p>
<br>

<h3 id="ShadowTerm-LightAttenuation"><a href="#ShadowTerm-LightAttenuation" class="headerlink" title="ShadowTerm&amp;LightAttenuation"></a>ShadowTerm&amp;LightAttenuation</h3><p>计算完BxDF之后，在光照累加时还用到了<code>Shadow</code>，这也是影响SSS的一个关键。</p>
<figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line">LightAccumulator_AddSplit( LightAccumulator, Lighting.Diffuse, Lighting.Specular, Lighting.Diffuse, LightColor * LightMask * Shadow.SurfaceShadow, bNeedsSeparateSubsurfaceLightAccumulation );</span><br><span class="line">LightAccumulator_AddSplit( LightAccumulator, Lighting.Transmission, <span class="number">0.0</span>f, Lighting.Transmission, LightColor * LightMask * Shadow.TransmissionShadow, bNeedsSeparateSubsurfaceLightAccumulation );</span><br></pre></td></tr></table></figure>

<p>我们看一下<code>Shadow</code>的定义：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">FShadowTerms</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">float</span>	SurfaceShadow;</span><br><span class="line">	<span class="keyword">float</span>	TransmissionShadow;</span><br><span class="line">	<span class="keyword">float</span>	TransmissionThickness;</span><br><span class="line">	FHairTransmittanceData HairTransmittance;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>从<em>DeferredLightingCommon.ush</em>下的<code>GetShadowTerms</code>中可以找到<code>shadow</code>来源于<code>LightAttenuation</code>：</p>
<figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Remapping the light attenuation buffer (see ShadowRendering.cpp)</span></span><br><span class="line"><span class="comment">// Also fix up the fade between dynamic and static shadows</span></span><br><span class="line"><span class="comment">// to work with plane splits rather than spheres.</span></span><br><span class="line"></span><br><span class="line"><span class="type">float</span> DynamicShadowFraction = DistanceFromCameraFade(GBuffer.Depth, LightData, WorldPosition, View.WorldCameraOrigin);</span><br><span class="line"><span class="comment">// For a directional light, fade between static shadowing and the whole scene dynamic shadowing based on distance + per object shadows</span></span><br><span class="line">Shadow.SurfaceShadow = lerp(LightAttenuation.x, StaticShadowing, DynamicShadowFraction);</span><br><span class="line"><span class="comment">// Fade between SSS dynamic shadowing and static shadowing based on distance</span></span><br><span class="line">Shadow.TransmissionShadow = <span class="built_in">min</span>(lerp(LightAttenuation.y, StaticShadowing, DynamicShadowFraction), LightAttenuation.w);</span><br><span class="line"></span><br><span class="line">Shadow.SurfaceShadow *= LightAttenuation.z;</span><br><span class="line">Shadow.TransmissionShadow *= LightAttenuation.z;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Need this min or backscattering will leak when in shadow which cast by non perobject shadow(Only for directional light)</span></span><br><span class="line">Shadow.TransmissionThickness = <span class="built_in">min</span>(LightAttenuation.y, LightAttenuation.w);</span><br></pre></td></tr></table></figure>

<p>而<code>LightAttenuation</code>是从<code>ScreenShadowMaskTexture</code>中采样得到，我们可以用RenderDoc抓取<code>ScreenShadowMaskTexture</code>查看。</p>
<p>当前场景的<code>ScreenShadowMaskTexture</code>：</p>
<p><img src="https://raw.githubusercontent.com/DiaryChris/typora-image/master/typora202011/13/151306-420319.png" alt="image-20201113151304160"></p>
<p>当前场景的<code>ScreenShadowMaskTexture</code>的<code>B</code>和<code>A</code>通道均为<code>1</code>：</p>
<p><img src="https://raw.githubusercontent.com/DiaryChris/typora-image/master/typora202011/13/145649-895860.png" alt="image-20201113145649320"></p>
<p><code>R</code>通道记录了阴影信息：</p>
<p><img src="https://raw.githubusercontent.com/DiaryChris/typora-image/master/typora202011/13/152140-727687.png" alt="image-20201113152138594"></p>
<p><code>G</code>通道记录了次表面阴影信息：</p>
<p><img src="https://raw.githubusercontent.com/DiaryChris/typora-image/master/typora202011/13/145753-107699.png" alt="image-20201113145752848"></p>
<p>将<code>RG</code>通道叠加，可以看到球上隐约绿色的部分即为次表面散射照亮区域：</p>
<p><img src="https://raw.githubusercontent.com/DiaryChris/typora-image/master/typora202011/13/154837-950261.png" alt="image-20201113154837234"></p>
<p>换一个场景更加明显，其中立方体使用的是另一套次表面散射着色模型<code>SubsurfaceProfile</code>：</p>
<p><img src="https://raw.githubusercontent.com/DiaryChris/typora-image/master/typora202012/09/155545-343561.png" alt="image-20201209155543621"></p>
<p><img src="https://raw.githubusercontent.com/DiaryChris/typora-image/master/typora202012/09/155524-978094.png" alt="image-20201209155523608"></p>
<br>

<h3 id="ScreenShadowMaskTexture写入"><a href="#ScreenShadowMaskTexture写入" class="headerlink" title="ScreenShadowMaskTexture写入"></a>ScreenShadowMaskTexture写入</h3><p>从RenderDoc中可以找到<code>ScreenShadowMaskTexture</code>写入的地方</p>
<p><img src="https://raw.githubusercontent.com/DiaryChris/typora-image/master/typora202011/13/160559-572628.png" alt="image-20201113160559787"></p>
<p>在<em>ShadowRendering.cpp</em>的<code>FSceneRenderer::RenderShadowProjections()</code>中：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Normal deferred shadows render to the shadow mask</span></span><br><span class="line"><span class="function">FRHIRenderPassInfo <span class="title">RPInfo</span><span class="params">(ScreenShadowMaskTexture-&gt;GetRenderTargetItem().TargetableTexture, ERenderTargetActions::Load_Store)</span></span>;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">TransitionRenderPassTargets(RHICmdList, RPInfo);</span><br><span class="line">RHICmdList.BeginRenderPass(RPInfo, TEXT(<span class="string">"RenderShadowProjection"</span>));</span><br><span class="line">RenderShadowMask(<span class="literal">nullptr</span>);</span><br><span class="line">RHICmdList.SetScissorRect(<span class="literal">false</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">RHICmdList.EndRenderPass();</span><br></pre></td></tr></table></figure>

<p>该函数在<em>LightRendering.cpp</em>中的<code>FDeferredShadingSceneRenderer::RenderLights</code>函数中被每个光源调用一次：</p>
<p>在<em>ShadowRendering.cpp</em>的注释中还可以找到不同通道的含义：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Light Attenuation channel assignment:</span></span><br><span class="line"><span class="comment">//  R:     WholeSceneShadows, non SSS</span></span><br><span class="line"><span class="comment">//  G:     WholeSceneShadows,     SSS</span></span><br><span class="line"><span class="comment">//  B: non WholeSceneShadows, non SSS</span></span><br><span class="line"><span class="comment">//  A: non WholeSceneShadows,     SSS</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// SSS: SubsurfaceScattering materials</span></span><br><span class="line"><span class="comment">// non SSS: shadow for opaque materials</span></span><br><span class="line"><span class="comment">// WholeSceneShadows: directional light CSM</span></span><br><span class="line"><span class="comment">// non WholeSceneShadows: spotlight, per object shadows, translucency lighting, omni-directional lights</span></span><br></pre></td></tr></table></figure>

<p>继续沿着<code>RenderShadowMask()</code>找到<code>FProjectedShadowInfo::RenderProjection()</code>，其中调用了函数<code>BindShadowProjectionShaders()</code>，从名称可以看出在这里绑定了shader，进一步找到绑定的shader的类为<code>TShadowProjectionPS</code>，在下面的宏定义中可以找到所用的shader文件为<em>ShadowProjectionPixelShader.usf</em>：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IMPLEMENT_SHADOW_PROJECTION_PIXEL_SHADER(Quality,UseFadePlane,UseTransmission, SupportSubPixel) \</span></span><br><span class="line">    <span class="keyword">typedef</span> TShadowProjectionPS&lt;Quality, UseFadePlane, <span class="literal">false</span>, UseTransmission, SupportSubPixel&gt; FShadowProjectionPS##Quality##UseFadePlane##UseTransmission##SupportSubPixel; \</span><br><span class="line">    IMPLEMENT_SHADER_TYPE(<span class="keyword">template</span>&lt;&gt;,FShadowProjectionPS##Quality##UseFadePlane##UseTransmission##SupportSubPixel,TEXT(<span class="string">"/Engine/Private/ShadowProjectionPixelShader.usf"</span>),TEXT(<span class="string">"Main"</span>),SF_Pixel);</span><br></pre></td></tr></table></figure>

<p>进入shader文件，找到<code>OutColor</code>的来源：</p>
<figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line"><span class="type">float</span> FadedSSSShadow = lerp(<span class="number">1.0</span>f, Square(SSSTransmission), ShadowFadeFraction * PerObjectDistanceFadeFraction);</span><br><span class="line">OutColor = EncodeLightAttenuation(half4(FadedShadow, FadedSSSShadow, FadedShadow, FadedSSSShadow));</span><br></pre></td></tr></table></figure>

<p>接下来找到<code>SHADINGMODELID_SUBSURFACE</code>分支下次表面分量的来源为<code>ManualPCF</code>采样函数：</p>
<figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line">SSSTransmission = ManualPCF(ShadowPosition.xy, Settings);</span><br></pre></td></tr></table></figure>

<p>采样的数据来源于<code>CalculateOcclusion</code>函数计算出的<code>Occlusion</code>，其中计算方式为：</p>
<figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line">float4 Thickness = <span class="built_in">max</span>(Settings.SceneDepth - ShadowmapDepth, <span class="number">0</span>);</span><br><span class="line">float4 Occlusion = saturate(FastExp(-Thickness * Settings.DensityMulConstant));</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ShadowmapDepth &gt; <span class="number">.99</span>f ? <span class="number">1</span> : Occlusion;</span><br></pre></td></tr></table></figure>

<p>其中<code>Settings.DensityMulConstant</code>的计算方式为：</p>
<figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line"><span class="type">float</span> Opacity = GBufferData.CustomData.a;</span><br><span class="line"><span class="comment">// Derive density from a heuristic using opacity, tweaked for useful falloff ranges and to give a linear depth falloff with opacity</span></span><br><span class="line"><span class="type">float</span> Density = <span class="number">-.05</span>f * <span class="built_in">log</span>(<span class="number">1</span> - <span class="built_in">min</span>(Opacity, <span class="number">.999</span>f));</span><br><span class="line">...</span><br><span class="line">Settings.DensityMulConstant = Density * ProjectionDepthBiasParameters.w;</span><br></pre></td></tr></table></figure>

<p>于是可以画出<code>Occlusion</code>项的函数图像：</p>
<p><img src="https://raw.githubusercontent.com/DiaryChris/typora-image/master/typora202012/09/155704-393859.png" alt="SSSTransmission"></p>
<p>可以看出当<code>Opacity</code>从1下降为0，<code>Density</code>随着从无穷大下降至0；而随着<code>Thickness * Density</code>的增大，<code>Occlusion</code>从1下降至趋近于0。当<code>Occlusion</code>为1时表示没有遮蔽，为0时完全在阴影中，这与常识相符。</p>
<p>以上就是光栅管线中SSS相关的部分，接下来会有一篇解决RayTracing管线SSS错误问题的相关文档。</p>
]]></content>
  </entry>
  <entry>
    <title>Translucency Shader in Ray Tracing Pipeline of UE4</title>
    <url>/blog/2020/11/10/Translucency%20Shader%20in%20Ray%20Tracing%20Pipeline%20of%20UE4/</url>
    <content><![CDATA[<h3 id="Shader入口"><a href="#Shader入口" class="headerlink" title="Shader入口"></a>Shader入口</h3><p>首先，指定半透明物体shader文件的入口文件是：</p>
<p><code>Renderer/Private/RayTracing/RayTracingTranslucency.cpp</code></p>
<p>其中<code>FDeferredShadingSceneRenderer::RenderRayTracingTranslucency</code>函数中实例化了一个<code>GraphBuilder</code>，并且在调用<code>RenderRayTracingPrimaryRaysView</code>函数之后调用了：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">GraphBuilder.Execute();</span><br><span class="line">ResolveSceneColor(RHICmdList);</span><br></pre></td></tr></table></figure>

<p>于是分配Shader的逻辑应该在<code>RenderRayTracingPrimaryRaysView</code>函数中，于是我们进入所在文件：</p>
<p><code>Renderer/Private/RayTracing/RayTracingPrimaryRays.cpp</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">auto</span> RayGenShader = View.ShaderMap-&gt;GetShader&lt;FRayTracingPrimaryRaysRGS&gt;(PermutationVector);</span><br><span class="line">...</span><br><span class="line">GraphBuilder.AddPass(...);</span><br></pre></td></tr></table></figure>

<p>所以使用的Ray Generation Shader（RGS）是<code>FRayTracingPrimaryRaysRGS</code>。</p>
<p>进一步，找到这一语句绑定了<code>FRayTracingPrimaryRaysRGS</code>使用哪个HLSL文件：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">IMPLEMENT_GLOBAL_SHADER(FRayTracingPrimaryRaysRGS, <span class="string">"/Engine/Private/RayTracing/RayTracingPrimaryRays.usf"</span>, <span class="string">"RayTracingPrimaryRaysRGS"</span>, SF_RayGen);</span><br></pre></td></tr></table></figure>

<p>于是我们可以在以下路径找到此语句：</p>
<p><code>Shaders/Private/RayTracing/RayTracingPrimaryRays.usf</code></p>
<figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line">RAY_TRACING_ENTRY_RAYGEN(RayTracingPrimaryRaysRGS)</span><br></pre></td></tr></table></figure>

<p>在<code>Shaders/Private/RayTracing/RayTracingCommon.ush</code>中找到这个宏定义：</p>
<figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line"><span class="meta">#ifndef RAY_TRACING_ENTRY_RAYGEN</span></span><br><span class="line"><span class="meta">#define RAY_TRACING_ENTRY_RAYGEN(name)\</span></span><br><span class="line">[shader("raygeneration")] void name()</span><br><span class="line"><span class="meta">#endif // RAY_TRACING_ENTRY_RAYGEN</span></span><br></pre></td></tr></table></figure>

<p>翻译过来也就是HLSL中将<code>RayTracingPrimaryRaysRGS</code>标记为一个RGS的语法：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">[shader("raygeneration")] void RayTracingPrimaryRaysRGS()</span><br></pre></td></tr></table></figure>

<p>于是可以确定<code>RayTracingPrimaryRaysRGS()</code>就是Shader入口。</p>
<br>

<h3 id="RGS主体框架"><a href="#RGS主体框架" class="headerlink" title="RGS主体框架"></a>RGS主体框架</h3><p>下面我们正式开始梳理这个RGS中的内容：</p>
<p>首先是准备阶段，先拿到<code>DispatchThreadId</code>和发出光线的像素坐标：</p>
<figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line">uint2 DispatchThreadId = DispatchRaysIndex().xy + View.ViewRectMin.xy;</span><br><span class="line">uint2 PixelCoord = GetPixelCoord(DispatchThreadId, UpscaleFactor);</span><br><span class="line"><span class="type">uint</span> LinearIndex = PixelCoord.y * View.BufferSizeAndInvSize.x + PixelCoord.x;</span><br></pre></td></tr></table></figure>

<p>然后根据像素坐标初始化<code>Ray</code>和<code>RayCone</code>：</p>
<figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line">float2 InvBufferSize = View.BufferSizeAndInvSize.zw;</span><br><span class="line">float2 UV = (float2(PixelCoord) + <span class="number">0.5</span>) * InvBufferSize;</span><br></pre></td></tr></table></figure>

<figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Trace rays from camera origin to (Gbuffer - epsilon) to only intersect translucent objects</span></span><br><span class="line">RayDesc Ray = CreatePrimaryRay(UV);</span><br><span class="line">FRayCone RayCone = (FRayCone)<span class="number">0</span>;</span><br><span class="line">RayCone.SpreadAngle = View.EyeToPixelSpreadAngle;</span><br></pre></td></tr></table></figure>

<p>之后就将进入一个循环来进行主要的Ray Tracing计算，我们将在下一段详细分析：</p>
<figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">uint</span> RefractionRayIndex = <span class="number">0</span>; RefractionRayIndex &lt; MaxRefractionRays; ++RefractionRayIndex)</span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最终，经过循环计算之后，累加的<code>PathRadiance</code>作为最后的主要输出存入数组：</p>
<figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line">PathRadiance = ClampToHalfFloatRange(PathRadiance);</span><br><span class="line">ColorOutput[DispatchThreadId] = float4(PathRadiance, FinalAlpha);</span><br><span class="line">RayHitDistanceOutput[DispatchThreadId] = HitDistance;</span><br></pre></td></tr></table></figure>

<p>也可以从文件开头找到，<code>ColorOutput</code>正是可读写的<code>RWTexture2D</code>类型：</p>
<figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line">RWTexture2D&lt;float4&gt; ColorOutput;</span><br><span class="line">RWTexture2D&lt;<span class="type">float</span>&gt; RayHitDistanceOutput;</span><br></pre></td></tr></table></figure>

<br>

<h3 id="循环体分析"><a href="#循环体分析" class="headerlink" title="循环体分析"></a>循环体分析</h3><p>RayTracing是一个递归的过程，在每一个界面上进行分叉并进一步递归计算，我们将所有的折射写在左子树，反射写在右子树，形成一个二叉树状的结构。</p>
<p><img src="https://raw.githubusercontent.com/DiaryChris/typora-image/master/typora202011/09/005739-3830.png" alt="Refr "></p>
<p>然而在GPU上运行的shader中函数并不能进行递归调用，此时可以自己使用栈来实现递归。</p>
<p>但是，UE4中并没有在此实现递归，而是使用循环来代替递归，舍去了对最终结果影响较小的分支，仅实现了主要分支的计算，我猜测其目的是大幅缩减计算量，提高效率。</p>
<p>首先将需要在循环中累加或者分发的数据进行初始化：</p>
<figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line">float3 PathRadiance = <span class="number">0.0</span>;</span><br><span class="line"><span class="type">float</span> PathThroughput = <span class="number">1.0</span>;</span><br></pre></td></tr></table></figure>

<p>之后进入循环，我们可以对<code>PathRadiance</code>进行追踪，抽出循环的主干：</p>
<figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">uint</span> RefractionRayIndex = <span class="number">0</span>; RefractionRayIndex &lt; MaxRefractionRays; ++RefractionRayIndex)</span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">    FMaterialClosestHitPayload Payload = TraceRayAndAccumulateResults(..., PathVertexRadiance);</span><br><span class="line">    <span class="comment">// Handle no hit condition</span></span><br><span class="line">    <span class="keyword">if</span> (Payload.IsMiss())</span><br><span class="line">    &#123;</span><br><span class="line">        ...</span><br><span class="line">        PathRadiance += PathThroughput * GetSkyRadiance(Ray.Direction, LastRoughness);</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// Handle surface lighting</span></span><br><span class="line">    PathRadiance += PathThroughput * PathVertexRadiance * vertexRadianceWeight;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// Handle reflection tracing</span></span><br><span class="line">    <span class="keyword">if</span> (Payload.Roughness &lt; TranslucencyMaxRoughness)</span><br><span class="line">    &#123;</span><br><span class="line">        ReflectionPayload = TraceRayAndAccumulateResults(..., ReflectionRadiance)</span><br><span class="line">	    <span class="keyword">if</span> (ReflectionPayload.IsMiss())</span><br><span class="line">        &#123;</span><br><span class="line">            ReflectionRadiance = GetSkyRadiance(ReflectionRay.Direction, LastRoughness);</span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line">        PathRadiance += PathThroughput * ReflectionThroughput * ReflectionRadiance * vertexRadianceWeight;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// Set refraction ray for next iteration</span></span><br><span class="line">    Ray.Origin = HitPoint;</span><br><span class="line">    Ray.TMin = <span class="number">0.01</span>;</span><br><span class="line">    Ray.TMax = NextMaxRayDistance;</span><br><span class="line">    Ray.Direction = RefractedDirection;</span><br><span class="line">    RayCone = PropagateRayCone(RayCone, SurfaceCurvature, Depth);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在一个RGS中，最关键的要点是<code>TraceRay</code>函数的调用，这里<code>TraceRay</code>被封装了几层在<code>TraceRayAndAccumulateResults</code>函数中，可以沿着<code>RayTracingLightingCommon.ush</code>和<code>RayTracingCommon.ush</code>这两个文件中找到最终还是调用了<code>TraceRay</code>。</p>
<p>于是我们可以总结出如下图中的结构，其中第一个TraceRay是指从摄像机向场景中发射的第一条光线，每一笔高亮表示一轮循环中计算的内容。</p>
<p><img src="https://raw.githubusercontent.com/DiaryChris/typora-image/master/typora202011/09/010847-244787.png" alt="image-20201109010846740"></p>
<br>

<h3 id="反射-透射分支补全"><a href="#反射-透射分支补全" class="headerlink" title="反射-透射分支补全"></a>反射-透射分支补全</h3><p>由上图可以看出，UE4中极大地省略了树右侧分支的递归，而仅仅追踪了最左路的透射部分内容。于是，由于右子树反射后续分支的内容的缺失，会出现下图中的错误，即对于一个半透明材质的镜子，第一次的反射光线遇到另一个半透明物体时不再进行后续的追踪，仅计算其本身的漫反射，导致显示为黑色。</p>
<p><img src="https://raw.githubusercontent.com/DiaryChris/typora-image/master/typora202011/07/210258-83838.png" alt="image-20201107210256821"></p>
<p>那么如何修复这一问题呢？</p>
<p>我们有两种方案：</p>
<ol>
<li>使用栈在GPU中实现递归，将整个树的内容全部实现。</li>
<li>继续沿用UE4的思路，用循环中添加子循环来补充实现一部分的树。</li>
</ol>
<p>其中，方案1肯定更加接近真实世界结果，然而这却以效率作为代价，因为发出的光线数以指数级别增长。同时，有很多多次折射或反射的光线对最终结果贡献不大。由于实时光追对效率要求很严苛，所以我们最终选择做一个trade-off，使用方案2来节约计算量。</p>
<p>对于半透明物体的在镜子中的渲染而言，现在最缺乏的分支其实是反射后的折射分支，以及之后的多次折射分支。</p>
<p>于是我们在一个循环的内部添加一个函数<code>TraceRayForRecursiveRefractionFromFirstReflection</code>专门处理这些分支：</p>
<figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line">TraceRayForRecursiveRefractionFromFirstReflection(ReflectionPayload, </span><br><span class="line">    ReflectionRay, </span><br><span class="line">    RandSequence, </span><br><span class="line">    PixelCoord, </span><br><span class="line">    RayCone, </span><br><span class="line">    AccumulatedOpacity, </span><br><span class="line">    PathThroughput * ReflectionThroughput,</span><br><span class="line">    PathRadiance);</span><br></pre></td></tr></table></figure>

<p>函数接受反射分支的光线及其<code>Payload</code>，然后分别向反射方向和折射方向发出光线计算结果。函数中包含一个子循环，沿着折射方向不断递归计算下去直到指定次数。这样一来就实现了下图中的部分，其中红色为我们补充实现的部分，绿圈为函数调用处。</p>
<p><img src="https://raw.githubusercontent.com/DiaryChris/typora-image/master/typora202011/10/002148-850948.png" alt="image-20201110002141890"></p>
<br>

<h3 id="全反射BUG修复"><a href="#全反射BUG修复" class="headerlink" title="全反射BUG修复"></a>全反射BUG修复</h3><p>实现了以上的函数后，我们发现镜子里得到了正确的结果，而镜子外半透明物体的亮度明显过亮，这又是什么原因呢？</p>
<p>经过排查后发现，这是UE4原有的另一个BUG导致的错误。</p>
<p>不难注意到，UE4原有代码是在一个循环中计算表面漫反射与反射，然后在下一个循环才计算折射分支内容，然而在每轮循环末尾计算折射方向时有这么一段代码：</p>
<figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line">float3 T = <span class="built_in">refract</span>(Ray.Direction, N, Eta);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">any</span>(T) &gt; <span class="number">0.0</span>)</span><br><span class="line">&#123;</span><br><span class="line">    RefractedDirection = T;</span><br><span class="line">    PathThroughput *= <span class="number">1.0</span> - Fr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Handle total internal reflection</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    RefractedDirection = <span class="built_in">reflect</span>(Ray.Direction, N);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这是在判断全反射，当发生全反射时<code>refract</code>函数会返回一个零向量，由于此时不发生折射，折射方向会修改为反射方向，即在下一个循环中进行全反射分支的计算。全反射的物理原理详见高中物理，而我们也可以理解为当发生全反射时，折射分量与反射分量能量合并，均流向了反射方向，全反射可以理解为一种特殊的折射。UE4这种将折射方向改为反射方向的写法并没有什么不妥，但是他们忽略了在当前循环已经计算过一遍反射分支，而下一轮循环中再计算全反射分支，会导致反射分支的能量被重复计算！这就是我们补全反射-透射分支后出现过亮现象的原因。</p>
<p>可能有同学会问，为什么补全分支之前亮度看上去是正常的呢？很简单，这是因为UE4没有计算反射-透射分支导致的反射分支偏暗的BUG正好使得全反射时反射分支重复计算的BUG造成的影响很弱，等于两个BUG的影响相互抵消，正好得到了看似正确的结果。</p>
<p>于是我们将全反射判断从循环末尾处提前到计算反射分支之前，如果发生了全反射，那么就不发射反射光线，避免重复计算。</p>
<figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line">float3 T = <span class="built_in">refract</span>(Ray.Direction, N, Eta);</span><br><span class="line"><span class="comment">//if total internal reflection happened, it should not dispatch reflection ray.</span></span><br><span class="line"><span class="keyword">if</span> (Payload.Roughness &lt; TranslucencyMaxRoughness &amp;&amp; <span class="built_in">any</span>(T) &gt; <span class="number">0.0</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Trace reflection ray </span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>于是得到更加正确的结果：</p>
<p><img src="https://raw.githubusercontent.com/DiaryChris/typora-image/master/typora202011/07/210316-842028.png" alt="image-20201107210316403"></p>
<br>

<h3 id="能量守恒分析"><a href="#能量守恒分析" class="headerlink" title="能量守恒分析"></a>能量守恒分析</h3><p>不难发现，在不断发射分支光线时，一定要保证能量守恒，才能得到正确的结果。UE4是怎么保证能量守恒的呢？</p>
<p>这时我们就需要关注上文中循环前定义的<code>PathThroughput</code>变量，其主要通过计算菲涅尔现象中的菲涅尔系数<code>Fr</code>和表面不透明度<code>Opacity</code>来控制光追过程中的能量守恒。</p>
<p>通过上文中的图可以看出，UE4中的实时光追将半透明表面上的能量分为三部分计算：表面漫反射分量、折射分量、反射分量（镜面反射），其中折射分量进行递归。当然这是一种近似方法，并不是完全正确的PathTracing方法，也是为了性能而做出的一种trade-off。</p>
<p><img src="https://raw.githubusercontent.com/DiaryChris/typora-image/master/typora202011/10/002304-521734.png" alt="image-20201110002303632"></p>
<p>我们可以从代码中提取出对于<code>PathThroughput</code>的改变：</p>
<figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">uint</span> RefractionRayIndex = <span class="number">0</span>; RefractionRayIndex &lt; MaxRefractionRays; ++RefractionRayIndex)</span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// Handle surface lighting</span></span><br><span class="line">    PathRadiance += PathThroughput * PathVertexRadiance * vertexRadianceWeight;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// Handle reflection tracing</span></span><br><span class="line">    <span class="keyword">if</span> (Payload.Roughness &lt; TranslucencyMaxRoughness)</span><br><span class="line">    &#123;</span><br><span class="line">        ...</span><br><span class="line">        PathRadiance += PathThroughput * ReflectionThroughput * ReflectionRadiance * vertexRadianceWeight;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// Handle refraction through the surface.</span></span><br><span class="line">    <span class="type">float</span> PathVertexTransmittance = Payload.BlendingMode == RAY_TRACING_BLEND_MODE_ADDITIVE ? <span class="number">1.0</span> : <span class="number">1.0</span> - Payload.Opacity;</span><br><span class="line">    PathThroughput *= PathVertexTransmittance;</span><br><span class="line">    <span class="keyword">if</span> (PathThroughput &lt;= <span class="number">0.0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">if</span> (TranslucencyRefraction)</span><br><span class="line">    &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="type">float</span> Fr = FresnelDielectric(Eta, NoV, NoT);</span><br><span class="line">        float3 T = <span class="built_in">refract</span>(Ray.Direction, N, Eta);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">any</span>(T) &gt; <span class="number">0.0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            RefractedDirection = T;</span><br><span class="line">            PathThroughput *= <span class="number">1.0</span> - Fr;</span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以发现对于<code>PathThroughput</code>的改变主要集中在循环末尾计算下一轮折射分支时，这是因为<code>PathThroughput</code>是每个循环的公用变量，而循环是在模拟折射方向的递归，所以不应让反射方向的计算改变<code>PathThroughput</code>的数值。计算反射方向的Throughput时，其实是单独计算了<code>ReflectionThroughput</code>并乘上<code>PathThroughput</code>而得到：</p>
<figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line"><span class="type">float</span> NoV = saturate(<span class="built_in">dot</span>(-Ray.Direction, Payload.WorldNormal));</span><br><span class="line"><span class="keyword">const</span> float3 ReflectionThroughput = EnvBRDF(Payload.SpecularColor, Payload.Roughness, NoV);</span><br><span class="line"></span><br><span class="line">PathRadiance += PathThroughput * ReflectionThroughput * ReflectionRadiance * vertexRadianceWeight;</span><br></pre></td></tr></table></figure>

<p>其中<code>EnvBRDF</code>函数跳进去其实是进行了菲涅尔相关的计算，约等于计算出了一个<code>Fr</code>。</p>
<p>我们还可以发现，每次累加<code>PathRadiance</code>时都有一个<code>vertexRadianceWeight</code>参与计算，在代码中发现其实就是表面不透明度<code>Opacity</code>：</p>
<figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line"><span class="type">float</span> vertexRadianceWeight = Payload.Opacity;</span><br></pre></td></tr></table></figure>

<p>于是我们可以梳理出如下两张图，分别是<code>Fr</code>和<code>Opacity</code>对光线throughput的影响：</p>
<p><img src="https://raw.githubusercontent.com/DiaryChris/typora-image/master/typora202011/10/002341-192556.png" alt="image-20201110002340482"></p>
<p><img src="https://raw.githubusercontent.com/DiaryChris/typora-image/master/typora202011/10/002414-872720.png" alt="image-20201110002413670"></p>
<p>欢迎交流！</p>
]]></content>
  </entry>
  <entry>
    <title>Unity &amp; Nsight Graphics GPU Profiling Workflow</title>
    <url>/blog/2021/05/01/Unity%20&amp;%20Nsight%20Graphics%20GPU%20Profiling%20Workflow/</url>
    <content><![CDATA[<p>Unity中的profiler用于CPU的性能优化时非常方便，但是用于GPU性能优化时无法提供足够多的信息，于是我们决定常识使用Nvidia Nsight Graphics进行GPU Profiling。</p>
<p><img src="https://raw.githubusercontent.com/DiaryChris/typora-image/master/typora202104/30/122045-767019.png" alt="image-20210430122045042"></p>
<br>

<h3 id="安装版本"><a href="#安装版本" class="headerlink" title="安装版本"></a>安装版本</h3><p>首先，安装Nsight Graphics 2021.2.0，注意 2021.2.0 以上版本才刚刚支持GPU Trace Analysis，可以为分析性能瓶颈提供一些参考。</p>
<p>GPU Trace Analysis具体使用方式可以看GTC2021上最新的一个报告：<a href="https://gtc21.event.nvidia.com/media/t/1_idigifru/204678193%EF%BC%88%E4%B8%8E%E6%9C%AC%E6%96%87%E5%85%B3%E7%B3%BB%E4%B8%8D%E5%A4%A7%EF%BC%89" target="_blank" rel="noopener">https://gtc21.event.nvidia.com/media/t/1_idigifru/204678193（与本文关系不大）</a></p>
<p>由于本文没有重度使用GPU Trace Analysis，所以Nsight Graphics 2021.2.0以下版本应该也可以同样使用。</p>
<p><img src="https://raw.githubusercontent.com/DiaryChris/typora-image/master/typora202104/30/122842-72986.png" alt="NVIDIA Nsight Graphics - AnyHair  New Unity Project.exe"></p>
<br>

<h3 id="与Unity连接"><a href="#与Unity连接" class="headerlink" title="与Unity连接"></a>与Unity连接</h3><p><img src="https://raw.githubusercontent.com/DiaryChris/typora-image/master/typora202104/30/154705-284777.png" alt="image-20210430154705051"></p>
<p>如图填写即可，分别填写Unity安装位置和项目根目录，可以启动Frame Profiler或者GPU Trace。</p>
<p>参考用户手册：<a href="https://docs.nvidia.com/nsight-graphics/UserGuide/" target="_blank" rel="noopener">https://docs.nvidia.com/nsight-graphics/UserGuide/</a></p>
<br>

<h3 id="使用GPU-Trace和Range-Profiler进行性能分析"><a href="#使用GPU-Trace和Range-Profiler进行性能分析" class="headerlink" title="使用GPU Trace和Range Profiler进行性能分析"></a>使用GPU Trace和Range Profiler进行性能分析</h3><p>Nsight Graphics中涉及到大量GPU相关的参数，以及一些Profiling时的常用缩写，需要对于GPU的运行原理有一定了解。</p>
<p><img src="https://raw.githubusercontent.com/DiaryChris/typora-image/master/typora202104/30/150922-434961.png" alt="image-20210430150920593"></p>
<p>这里推荐几篇非常好的文章：</p>
<p>GPU运行管线：<a href="https://developer.nvidia.com/content/life-triangle-nvidias-logical-pipeline" target="_blank" rel="noopener">https://developer.nvidia.com/content/life-triangle-nvidias-logical-pipeline</a></p>
<p>通过Range Profiler进行性能分析：<a href="https://developer.nvidia.com/blog/the-peak-performance-analysis-method-for-optimizing-any-gpu-workload/" target="_blank" rel="noopener">https://developer.nvidia.com/blog/the-peak-performance-analysis-method-for-optimizing-any-gpu-workload/</a></p>
<p>通过GPU Trace的advanced mode进行性能分析：<a href="https://developer.nvidia.com/blog/optimizing-vk-vkr-and-dx12-dxr-applications-using-nsight-graphics-gpu-trace-advanced-mode-metrics/" target="_blank" rel="noopener">https://developer.nvidia.com/blog/optimizing-vk-vkr-and-dx12-dxr-applications-using-nsight-graphics-gpu-trace-advanced-mode-metrics/</a></p>
<p>读过以上三篇文章，基本上可以根据GPU的运行参数，推测出Shader送入GPU后主要的时间消耗，做出一些模糊的判断，但是无法知道是哪一个语句造成的。</p>
<br>

<h3 id="使用Shader-Profiler进行逐句分析"><a href="#使用Shader-Profiler进行逐句分析" class="headerlink" title="使用Shader Profiler进行逐句分析"></a>使用Shader Profiler进行逐句分析</h3><p>由于在GPU Trace和Range Profiler里面还是很难精确定位Shader导致的性能问题，于是我们找到了另外的方式实现定位，那就是Shader Profiler。</p>
<p><img src="https://raw.githubusercontent.com/DiaryChris/typora-image/master/typora202104/30/151753-692084.png" alt="Range Profiler"></p>
<p>我们在Range Profiler里找到需要分析的阶段，然后右键打开Shader Profiler。但是当打开Shader Profiler后，可能会出现Hot spot information unavailable的情况。我们使用Shader Profiler来进行性能瓶颈的定位，其实就是需要Hot spots一栏的信息，这下怎么办呢？</p>
<p><img src="https://raw.githubusercontent.com/DiaryChris/typora-image/master/typora202104/30/152037-695242.png" alt="Shader profiler "></p>
<p>其实这是因为目前Nsight Graphics仅支持编译后为DXIL中间码的Hot spots显示，而Unity在2021.2版本才刚刚支持将shader编译器从DXC切换到FXC，将编译中间码从DXBC转到DXIL。所以想要定位问题，必须将项目升级至Unity 2021.2，同时将图形API切换至DX12，记得备份一份原项目文件以防升级造成的改动。</p>
<p>记得给要分析的Shader文件中加入 <code>#pragma use_dxc</code>和<code>#pragma enable_d3d11_debug_symbols</code></p>
<p>参考文档：</p>
<p><a href="https://forum.unity.com/threads/unity-is-adding-a-new-dxc-hlsl-compiler-backend-option.1086272/" target="_blank" rel="noopener">https://forum.unity.com/threads/unity-is-adding-a-new-dxc-hlsl-compiler-backend-option.1086272/</a></p>
<p><a href="https://docs.google.com/document/d/1yHARKE5NwOGmWKZY2z3EPwSz5V_ZxTDT8RnRl521iyE/edit" target="_blank" rel="noopener">https://docs.google.com/document/d/1yHARKE5NwOGmWKZY2z3EPwSz5V_ZxTDT8RnRl521iyE/edit</a></p>
<br>

<h3 id="分析DXIL中间码"><a href="#分析DXIL中间码" class="headerlink" title="分析DXIL中间码"></a>分析DXIL中间码</h3><p>升级后会发现Hot spots栏里终于出现了内容，但是并不是我们想要的Shader源码，而是DXIL文件，这是因为找不到Unity编译Shader时的PDB符号文件，所以无法从DXIL转译回源码。这里我和Unity的技术支持沟通过了，Unity目前使用DXC编译Shader时直接使用的是Release Mode，所以并没有生成PDB文件，也不确定未来会不会支持Debug Mode编译Shader。</p>
<p><img src="https://raw.githubusercontent.com/DiaryChris/typora-image/master/typora202104/30/165902-690278.png" alt="image-20210430165901858"></p>
<p>既然如此，我们目前只能从DXIL文件来分析瓶颈语句了。</p>
<p>DXIL的语法是LLVM汇编语言的一个子集，通过以下文档大致了解一下之后就可以通过DXIL反推源码了，这个过程有种做数独的推理趣味，还是蛮有意思的。</p>
<p><a href="https://github.com/microsoft/DirectXShaderCompiler/blob/master/docs/DXIL.rst" target="_blank" rel="noopener">https://github.com/microsoft/DirectXShaderCompiler/blob/master/docs/DXIL.rst</a></p>
<p><a href="https://llvm.org/docs/LangRef.html" target="_blank" rel="noopener">https://llvm.org/docs/LangRef.html</a></p>
<p>将Top Stall前几名的语句反推回源码，然后分析一下上下文，再结合之前Range Profiler和GPU Trace的结果，基本上就可以确定Shader的性能瓶颈了。</p>
<br>

<h3 id="案例分享"><a href="#案例分享" class="headerlink" title="案例分享"></a>案例分享</h3><p>以Anyhair URP为例，在优化Hair Render阶段时，我使用Range Profiler测出如下结果：</p>
<p><img src="https://raw.githubusercontent.com/DiaryChris/typora-image/master/typora202104/30/221622-435242.png" alt="Range Profiler "></p>
<p>在这里可以看出Top SOLs主要是SM 74.9%，介于60%-80%之间，看不出什么问题，然后SM Active为94.37%，Graphic&#x2F;Compute Idle为0，可以看出SM利用率很高，并没有被闲置的迹象。</p>
<p>L2 Hit Rate极高，说明L2缓存利用率没有问题；但是Tex Hit Rate略微有点低，但是看不出问题在哪。</p>
<p>展开Pipeline Overview，可以看到主要性能消耗在Pixel Shader上。同时通过观察Texture、L2、VRAM的Throughput，可以发现VRAM的Throughput极低，而L2的Troughput较高，这说明SM频繁从L2读取而很少从VRAM读取数据，与之前分析的L2命中率极高而L1命中率略低相吻合。</p>
<p><img src="https://raw.githubusercontent.com/DiaryChris/typora-image/master/typora202104/30/222348-143213.png" alt="Pipeline Overview  Pipeline Diagram  VRAM  Prin D •t  VI x Ata Fetch  ICJ S —d Ligh (SOL)  vpc  R riz«  CROPSOL  ZROPSOL "></p>
<p>之后打开Shader Profiler进行进一步分析：</p>
<p><img src="https://raw.githubusercontent.com/DiaryChris/typora-image/master/typora202105/01/203707-734411.png" alt="Shader Profiler"></p>
<p>可以发现排最前的几个Top Stall的原因是Not Selected，这代表着SM中有一些Warp有时处于闲置状态。</p>
<p>通过反推Hot Spots中的DXIL语句，我发现Stall主要集中在运行时的<code>if</code> &amp; <code>else</code>语句处，于是推测由于GPU的并行机制，同一Warp的不同Thread无法在同时运行不同分支的语句，出现了下图情况：</p>
<p><img src="https://developer.nvidia.com/sites/default/files/akamai/gameworks/images/lifeofatriangle/fermipipeline_sm.png" alt="The logical pipeline"></p>
<p>于是我将一些可以放在预编译阶段的分支语句改为了<code>#ifdef</code> &amp; <code>#else</code>的形式，重新进行测试：</p>
<p><img src="https://raw.githubusercontent.com/DiaryChris/typora-image/master/typora202105/01/211836-554686.png" alt="Shader Profiler "></p>
<p>可以看到百分比略有降低，但是效果并不显著，而且Top Stall依然是Not Selected，这是什么原因呢？</p>
<p>经过一番推测，这可能是代码中隐含的最大分支，<code>clip()</code>语句引发的问题。我们猜测被discard的大量像素并非彻底不再占用资源，而是占用了一些Warp等待其他非discard的像素运行完成。</p>
<p>于是我先注释掉代码中的<code>clip()</code>，发现果然Not Selected的百分比大幅下降了：</p>
<p><img src="https://raw.githubusercontent.com/DiaryChris/typora-image/master/typora202105/01/213630-739649.png" alt="Shader Profiler "></p>
<p>那么，为了解决这一问题，我们决定采用在之前加一个Depth Prepass的方案，在Depth Prepass中discard不需要的像素，然后在颜色渲染Pass中设置ZTest为Equal，触发Early-Z，仅绘制Depth Prepass中保留的像素，这样就避免了在繁重的颜色渲染Pass中进行discard造成分支。</p>
<p>但是这样做也有一个潜在的缺点，那就是VS和GS会多运行一次，可能浪费的时间比PS中节省的时间还多。不过我们在Shader Profiler里可以看到VS和GS的占比总和才不过10%，PS才是主要的时间消耗者，所以预测不会出现这种情况。</p>
<p><img src="https://raw.githubusercontent.com/DiaryChris/typora-image/master/typora202105/01/215016-668152.png" alt="Range Profiler "></p>
<p>经过一番改造，发现总时长如愿大幅缩减了，从0.16ms缩减到0.09ms！</p>
<p>但是让我们看看还有什么可以改造的点，Holy Shit，Tex Hit Rate这项数据也太差了吧，命中率才24.73%，打开Shader Profiler看看发生了什么：</p>
<p><img src="https://raw.githubusercontent.com/DiaryChris/typora-image/master/typora202105/01/215047-793179.png" alt="Shader Profiler"></p>
<p>可以看到Tops Stall Reason是Long Scoreboard，这说明是数据读取的问题，正好与低Tex Hit Rate相对应。</p>
<p>解码后推测是Depth Prepass中Sample一个Texture 时，命中率过低。经过一番排查，最终发现是由于这个长方形纹理导入Unity时没有自动勾选Generate Mip Maps选项导致。</p>
<p><img src="https://raw.githubusercontent.com/DiaryChris/typora-image/master/typora202105/01/222309-816954.png" alt="Range Profiler"></p>
<p>勾选Generate Mip Maps后，Tex Hit Rate直接上升到了93.56%，总时间也缩短到了0.07ms</p>
<p><img src="https://raw.githubusercontent.com/DiaryChris/typora-image/master/typora202105/01/215123-470394.png" alt="Shader Profiler"></p>
<p>点开Shader Profiler，发现Top Stall不再是Long Scoreboard了。</p>
<p>所以最终的优化结果就是将Hair Render阶段从0.16ms优化到了0.07ms，虽然这个数字很小，但是这是在RTX 2070 Super上的测试结果，相应在移动端节省的时间应该是比较多的。</p>
<br>

<h3 id="参考文献与扩展阅读汇总"><a href="#参考文献与扩展阅读汇总" class="headerlink" title="参考文献与扩展阅读汇总"></a>参考文献与扩展阅读汇总</h3><br>

<h5 id="Nsight"><a href="#Nsight" class="headerlink" title="Nsight:"></a>Nsight:</h5><p><a href="https://docs.nvidia.com/drive/drive_os_5.1.12.0L/nsight-graphics/user-interface-reference/index.html" target="_blank" rel="noopener">https://docs.nvidia.com/drive/drive_os_5.1.12.0L/nsight-graphics/user-interface-reference/index.html</a></p>
<p><a href="https://developer.nvidia.com/blog/the-peak-performance-analysis-method-for-optimizing-any-gpu-workload/" target="_blank" rel="noopener">https://developer.nvidia.com/blog/the-peak-performance-analysis-method-for-optimizing-any-gpu-workload/</a></p>
<p><a href="https://docs.nvidia.com/nsight-graphics/UserGuide/" target="_blank" rel="noopener">https://docs.nvidia.com/nsight-graphics/UserGuide/</a></p>
<p><a href="https://docs.nvidia.com/cupti/Cupti/r_main.html#r_host_metrics_api" target="_blank" rel="noopener">https://docs.nvidia.com/cupti/Cupti/r_main.html#r_host_metrics_api</a></p>
<p><a href="https://developer.nvidia.com/content/life-triangle-nvidias-logical-pipeline" target="_blank" rel="noopener">https://developer.nvidia.com/content/life-triangle-nvidias-logical-pipeline</a></p>
<p><a href="https://developer.nvidia.com/blog/optimizing-vk-vkr-and-dx12-dxr-applications-using-nsight-graphics-gpu-trace-advanced-mode-metrics/" target="_blank" rel="noopener">https://developer.nvidia.com/blog/optimizing-vk-vkr-and-dx12-dxr-applications-using-nsight-graphics-gpu-trace-advanced-mode-metrics/</a></p>
<p><a href="https://docs.google.com/document/d/1yHARKE5NwOGmWKZY2z3EPwSz5V_ZxTDT8RnRl521iyE/edit#" target="_blank" rel="noopener">https://docs.google.com/document/d/1yHARKE5NwOGmWKZY2z3EPwSz5V_ZxTDT8RnRl521iyE/edit#</a></p>
<p><a href="https://docs.nvidia.com/nsight-graphics/UserGuide/index.html#global_options_search_paths" target="_blank" rel="noopener">https://docs.nvidia.com/nsight-graphics/UserGuide/index.html#global_options_search_paths</a></p>
<h5 id="PIX"><a href="#PIX" class="headerlink" title="PIX:"></a>PIX:</h5><p><a href="https://devblogs.microsoft.com/pix/gpu-captures/" target="_blank" rel="noopener">https://devblogs.microsoft.com/pix/gpu-captures/</a></p>
<p><a href="https://devblogs.microsoft.com/pix/using-automatic-shader-pdb-resolution-in-pix/" target="_blank" rel="noopener">https://devblogs.microsoft.com/pix/using-automatic-shader-pdb-resolution-in-pix/</a></p>
<h5 id="DXIL"><a href="#DXIL" class="headerlink" title="DXIL:"></a>DXIL:</h5><p><a href="https://github.com/microsoft/DirectXShaderCompiler/blob/master/docs/DXIL.rst" target="_blank" rel="noopener">https://github.com/microsoft/DirectXShaderCompiler/blob/master/docs/DXIL.rst</a></p>
<p><a href="https://llvm.org/docs/LangRef.html" target="_blank" rel="noopener">https://llvm.org/docs/LangRef.html</a></p>
<br>]]></content>
  </entry>
  <entry>
    <title>Subsurface Scattering in Ray Tracing Pipeline of UE4</title>
    <url>/blog/2020/12/09/Subsurface%20Scattering%20in%20Ray%20Tracing%20Pipeline%20of%20UE4/</url>
    <content><![CDATA[<h3 id="Ray-Tracing管线与Rasterization管线的差异"><a href="#Ray-Tracing管线与Rasterization管线的差异" class="headerlink" title="Ray Tracing管线与Rasterization管线的差异"></a>Ray Tracing管线与Rasterization管线的差异</h3><p>两种管线SSS实现的主要差异在于<code>ScreenShadowMaskTexture</code>的渲染方式不同，在Ray Tracing管线中，使用<code>RayTracingShadowMaskTexture</code>的内容写入到<code>ScreenShadowMaskTexture</code>中，具体语句在<em>LightRendering.cpp</em> 中的<code>FDeferredShadingSceneRenderer::RenderLights()</code>中：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">GraphBuilder.QueueTextureExtraction(RayTracingShadowMaskTexture, &amp;ScreenShadowMaskTexture);</span><br></pre></td></tr></table></figure>

<p>追踪<code>RayTracingShadowMaskTexture</code>，发现其在<code>RenderRayTracingShadows()</code>中渲染。在<em>RayTracingShadows.cpp</em>中找到<code>FDeferredShadingSceneRenderer::RenderRayTracingShadows()</code>，可以在其中找到使用的shader类为<code>FOcclusionRGS</code>，进一步找到绑定的shader文件为<em>RayTracingOcclusionRGS.usf</em>。且<code>RWOcclusionMaskUAV</code>为最终传出的<code>RayTracingShadowMaskTexture</code>。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">IMPLEMENT_GLOBAL_SHADER(FOcclusionRGS, <span class="string">"/Engine/Private/RayTracing/RayTracingOcclusionRGS.usf"</span>, <span class="string">"OcclusionRGS"</span>, SF_RayGen);</span><br><span class="line">...</span><br><span class="line">PassParameters-&gt;RWOcclusionMaskUAV = OutShadowMaskUAV;</span><br></pre></td></tr></table></figure>

<p>在<em>RayTracingOcclusionRGS.usf</em>中，<code>RWOcclusionMaskUAV</code>的写入分为3种分支，其中不做降噪的分支如下，关于降噪分支会在后文提及：</p>
<figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="type">float</span> ShadowFadeFraction = <span class="number">1</span>;</span><br><span class="line"><span class="type">float</span> SSSTransmission = Occlusion.TransmissionDistance;</span><br><span class="line"><span class="type">float</span> FadedShadow = lerp(<span class="number">1.0</span>f, Square(Shadow), ShadowFadeFraction);</span><br><span class="line"><span class="type">float</span> FadedSSSShadow = lerp(<span class="number">1.0</span>f, Square(SSSTransmission), ShadowFadeFraction);</span><br><span class="line"></span><br><span class="line">float4 OutColor = EncodeLightAttenuation(half4(FadedShadow, FadedSSSShadow, FadedShadow, FadedSSSShadow));</span><br><span class="line">RWOcclusionMaskUAV[PixelCoord] = OutColor;</span><br></pre></td></tr></table></figure>

<p>而在UE4.25版本中，<code>TransmissionDistance</code>直接被写为<code>Visibility</code>，而<code>Visibility</code>则是阴影项<code>Shadow</code>的计算结果。这说明光追管线中没有计算SSS着色模型的次表面阴影项，而是暂时使用阴影项来代替，这直接导致了次表面散射效果的缺失。</p>
<figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line">Out.TransmissionDistance = (LocalSamplesPerPixel &gt; <span class="number">0</span>) ? Out.Visibility / LocalSamplesPerPixel : Out.Visibility;</span><br></pre></td></tr></table></figure>

<br>



<h3 id="Ray-Tracing管线的修复"><a href="#Ray-Tracing管线的修复" class="headerlink" title="Ray Tracing管线的修复"></a>Ray Tracing管线的修复</h3><p>对于基于厚度的SSS算法，Ray Tracing管线相对于Rasterization管线的优势在于可以更加精确的计算出物体上一个像素被自身遮挡的厚度以及光线到达物体表面的辐射量，我们将其分别定义为Thickness和Transmittance，于是我们就着手计算。</p>
<figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line"><span class="comment">// The thickness of itself</span></span><br><span class="line"><span class="comment">// "Thickness = -1" stand for it is not shielded by itself, but shielded by others;</span></span><br><span class="line"><span class="comment">// "Thickness = 0" stand for it is on the surface exposed to light directly, not shielded by anything.</span></span><br><span class="line"><span class="type">float</span> Thickness = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// Transmittance of the object, in the range of 0-1, is calculated with opacity of each object.</span></span><br><span class="line"><span class="comment">// When "Transmittance = 0" light will be completely blocked.</span></span><br><span class="line"><span class="type">float</span> Transmittance = <span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<p>画一张简单的示意图，以便覆盖所有可能的情况：</p>
<p><img src="https://raw.githubusercontent.com/DiaryChris/typora-image/master/typora202012/09/175733-521194.png" alt="img"></p>
<p>可以发现，我们需要拿到的数据有<code>StartingPointID</code>、<code>ClosestHitID</code>、<code>Opacity</code>、<code>HitT</code>等。</p>
<br>

<h4 id="扩展Payload"><a href="#扩展Payload" class="headerlink" title="扩展Payload"></a>扩展Payload</h4><p>UE4中定义了几种Payload，但是其中其实用到的只有<code>FMaterialClosestHitPayload</code>和<code>FPackedMaterialClosestHitPayload</code>，两者均继承自最基本的<code>FMinimalPayload</code>，后者是前者的打包压缩版，目的是节约Payload的体积，增强光追的性能。<code>FMaterialClosestHitPayload</code>的主要内容如下：</p>
<figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line">										<span class="comment">// Unpacked  Packed</span></span><br><span class="line">										<span class="comment">// offset    bytes</span></span><br><span class="line">	<span class="comment">// float FMinimalPayload::HitT		// 0         4       32bits</span></span><br><span class="line"><span class="meta">#if USE_RAYTRACED_TEXTURE_RAYCONE_LOD</span></span><br><span class="line">	FRayCone RayCone;					<span class="comment">// 4         8       64bits</span></span><br><span class="line"><span class="meta">#endif // USE_RAYTRACED_TEXTURE_RAYCONE_LOD</span></span><br><span class="line">	float3 Radiance;					<span class="comment">// 12        6       48bits</span></span><br><span class="line">	float3 WorldNormal;					<span class="comment">// 24        6       48bits</span></span><br><span class="line">	float3 BaseColor;					<span class="comment">// 36        6       48bits</span></span><br><span class="line">	float3 DiffuseColor;				<span class="comment">// 48        0       (derived)</span></span><br><span class="line">	float3 SpecularColor;				<span class="comment">// 60        0       (derived)</span></span><br><span class="line">	<span class="type">float</span> Opacity;						<span class="comment">// 72        2       16bits</span></span><br><span class="line">	<span class="type">float</span> Metallic;						<span class="comment">// 76        1       8bits</span></span><br><span class="line">	<span class="type">float</span> Specular;						<span class="comment">// 80        1       8bits</span></span><br><span class="line">	<span class="type">float</span> Roughness;					<span class="comment">// 84        2       16bits</span></span><br><span class="line">	<span class="type">float</span> Ior;							<span class="comment">// 88        2       16bits</span></span><br><span class="line">	<span class="type">uint</span> ShadingModelID;				<span class="comment">// 92        2       4bits</span></span><br><span class="line">	<span class="type">uint</span> BlendingMode;					<span class="comment">// 96        0       4bits (packed with ShadingModelID)</span></span><br><span class="line">	<span class="type">uint</span> PrimitiveLightingChannelMask;	<span class="comment">// 100       0       3bits (packed with ShadingModelID)</span></span><br><span class="line">	float4 CustomData;					<span class="comment">// 104       4       32bits</span></span><br><span class="line">	<span class="type">float</span> GBufferAO;					<span class="comment">// 120       0       (removed)</span></span><br><span class="line">	float3 IndirectIrradiance;			<span class="comment">// 124       0       48bits -- gbuffer only has float payload and there are truncation HLSL warnings</span></span><br><span class="line">	float3 WorldPos;					<span class="comment">// 136       0       (derived)</span></span><br><span class="line">	<span class="type">uint</span> Flags;							<span class="comment">// 148       0       5bits (packed with ShadingModelID)</span></span><br><span class="line">	float3 WorldTangent;				<span class="comment">// 152       6       48bits</span></span><br><span class="line">	<span class="type">float</span> Anisotropy;					<span class="comment">// 164       2       16bits (packed with WorldTangent)</span></span><br><span class="line">										<span class="comment">// 168 total</span></span><br></pre></td></tr></table></figure>

<p>其中并没有<code>InstanceID</code>，于是我们需要扩展这个payload，如下：</p>
<figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line"><span class="meta">#ifdef USE_INSTANCE_ID</span></span><br><span class="line">	<span class="type">uint</span> InstanceID;						<span class="comment">// 32bits</span></span><br><span class="line"><span class="meta">#endif</span></span><br></pre></td></tr></table></figure>

<p>同时也需要扩展<code>FPackedMaterialClosestHitPayload</code>以及打包与解包的函数。</p>
<p>当这些做完之后可能会发现，编译后UE4会出现不明原因Crash，而且再也打不开了，这是为什么呢？</p>
<p>原因在于UE4其实在C++中指定了这个Payload的最大Size，当超过这个Size时，编译Shader，UE4就会直接Crash。</p>
<p>此时在<em>Engine&#x2F;Source&#x2F;Runtime&#x2F;Renderer&#x2F;Private&#x2F;RayTracing</em>文件夹下的<em>RayTracingAmbientOcclusion.cpp</em>、<em>RayTracingMaterialHitShaders.cpp</em>、<em>RayTracingShadows.cpp</em>、<em>RaytracingSkylight.cpp</em>这四个文件中将<code>// sizeof(FPackedMaterialClosestHitPayload)</code>注释处的<code>Initializer.MaxPayloadSizeInBytes</code>修改为所需的新大小，即可解决这一问题。</p>
<p><strong>可以发现的很重要的一点是，UE4为不同需求使用了不同的<code>RayGenerationShader</code>(<code>RayTracingDebugMainRGS</code>&#x2F;<code>OcclusionRGS</code>&#x2F;<code>RayTracingPrimaryRaysRGS</code>)，但是对于不同材质其实都使用的是同一个<code>ClosestHitShader</code>，即<code>MaterialCHS</code>，同时也都使用同一个Payload，即<code>FPackedMaterialClosestHitPayload</code>。</strong></p>
<br>

<h4 id="在UE4-Ray-Tracing-Debug-View中显示InstanceID"><a href="#在UE4-Ray-Tracing-Debug-View中显示InstanceID" class="headerlink" title="在UE4 Ray Tracing Debug View中显示InstanceID"></a>在UE4 Ray Tracing Debug View中显示InstanceID</h4><p>为了验证UE4中每个物体的<code>InstanceID</code>不同，同时方便调试，我们先将<code>InstanceID</code>加入Ray Tracing Debug View。</p>
<p>首先在<em>RayTracingDebug.usf</em>添加一个<code>case</code>，根据<code>InstanceID</code>的值显示颜色：</p>
<figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line"><span class="keyword">case</span> RAY_TRACING_DEBUG_VIZ_INSTANCE_ID:</span><br><span class="line">    Result = float4((Payload.InstanceID % <span class="number">10</span>) / <span class="number">10.0</span>f, (Payload.InstanceID % <span class="number">5</span>) / <span class="number">5.0</span>f, (Payload.InstanceID % <span class="number">3</span>) / <span class="number">3.0</span>f, <span class="number">1.0</span>f);</span><br><span class="line">    <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure>

<p>同时在<em>Shaders&#x2F;Shared&#x2F;RaytracingDebugDefinitions.h</em>中需要定义<code>RAY_TRACING_DEBUG_VIZ_INSTANCE_ID</code></p>
<p>引擎中需要修改的文件有：</p>
<p><em>Runtime&#x2F;Renderer&#x2F;Private&#x2F;RayTracing&#x2F;RayTracingDebug.cpp</em>，<em>Editor&#x2F;UnrealEd&#x2F;Private&#x2F;RayTracingDebugVisualizationMenuCommands.cpp</em></p>
<p>此时重新编译UE4，就可以从Ray Tracing Debug View中选择InstanceID，显示效果如下：</p>
<p><img src="https://raw.githubusercontent.com/DiaryChris/typora-image/master/typora202012/09/181825-496602.png" alt="img"></p>
<br>



<h3 id="关于降噪"><a href="#关于降噪" class="headerlink" title="关于降噪"></a>关于降噪</h3><br>

<h3 id="厚度计算流程"><a href="#厚度计算流程" class="headerlink" title="厚度计算流程"></a>厚度计算流程</h3><p><img src="https://raw.githubusercontent.com/DiaryChris/typora-image/master/typora202110/20/180844-88438.png" alt="image-20211020180843810"></p>
<br>]]></content>
  </entry>
  <entry>
    <title>Cherry G80-3000 机械键盘试用</title>
    <url>/blog/2017/03/22/cherry-g80-3000-e6-9c-ba-e6-a2-b0-e9-94-ae-e7-9b-98-e8-af-95-e7-94-a8/</url>
    <content><![CDATA[<h4 id="自从我用了机械键盘以后，我觉得我打字要飞起来了。我了个去，这个声音好大啊。"><a href="#自从我用了机械键盘以后，我觉得我打字要飞起来了。我了个去，这个声音好大啊。" class="headerlink" title="自从我用了机械键盘以后，我觉得我打字要飞起来了。我了个去，这个声音好大啊。"></a>自从我用了机械键盘以后，我觉得我打字要飞起来了。我了个去，这个声音好大啊。</h4><p>明天上班带着这个，<strong>啪啪啪啪</strong>的，领导听见以后一定会认为我敲代码很用功，一定会赏识我的！ 写几行代码试试吧</p>
<p>for(var i &#x3D; 0;i &lt;&#x3D; 100;i++){</p>
<pre><code>console.log(&quot;我是Cherry G80-3000 青轴&quot;);
</code></pre>
<p>}</p>
<p>我感觉有一个缺点，就是容易一激动按错键。 还有就是，打多了手有点累啊。我的手这会儿好酸。</p>
<p>cd d<br>cd repository<br>cd git-learn<br>git init<br>git add test.js<br>git commit -m “From my cherry keyboard”</p>
]]></content>
      <categories>
        <category>数码</category>
      </categories>
  </entry>
  <entry>
    <title>开始写日报</title>
    <url>/blog/2017/05/05/e5-bc-80-e5-a7-8b-e5-86-99-e6-97-a5-e6-8a-a5/</url>
    <content><![CDATA[<p><strong>懒惰是有惯性的，而打破这种循环的办法只有一个，那就是立刻行动起来。</strong>   准备从今天起写日报，在未来的每一天，希望能够总结当天的收获以及为了目标所作出的努力，避免时间消磨在惰性之上。 先简单写个模板出来（使用Markdown语法）：  </p>
<p># 2017-05-04    &#x2F;&#x2F;日期<br>## SUMMARY   &#x2F;&#x2F;每日收获总结</p>
<p>今天继续羽毛球，遇见两个好搭档，成功霸场，大臂继续疑似拉伤。最近很安逸，处于舒适区，需要搞点事情。</p>
<p>## SKILL TREE    &#x2F;&#x2F;技能树</p>
<p>### 健身    &#x2F;&#x2F;技能树方向</p>
<p>- 羽毛球 2h</p>
<p>##### 核心加强计划    &#x2F;&#x2F;专项计划名称</p>
<p>- 卷腹 15<em>2<br>- 平板支撑 30s</em>2</p>
<p>## TODO LIST    &#x2F;&#x2F;待办事项</p>
<p>- 做JS五子棋首页入口<br>- 用node.js写爬虫日志备份<br>- 为个人网站应用gulp.js</p>
<p>## STATISTIC    &#x2F;&#x2F;统计数据</p>
<p>- 体重 59.05kg</p>
<p> </p>
<h1 id="2017-05-04"><a href="#2017-05-04" class="headerlink" title="2017-05-04"></a>2017-05-04</h1><h2 id="SUMMARY"><a href="#SUMMARY" class="headerlink" title="SUMMARY"></a>SUMMARY</h2><p>今天继续羽毛球，遇见两个好搭档，成功霸场，大臂继续疑似拉伤。最近很安逸，处于舒适区，需要搞点事情。</p>
<h2 id="SKILL-TREE"><a href="#SKILL-TREE" class="headerlink" title="SKILL TREE"></a>SKILL TREE</h2><h3 id="健身"><a href="#健身" class="headerlink" title="健身"></a>健身</h3><ul>
<li>羽毛球 2h</li>
</ul>
<h5 id="核心加强计划"><a href="#核心加强计划" class="headerlink" title="核心加强计划"></a>核心加强计划</h5><ul>
<li>卷腹 15*2</li>
<li>平板支撑 30s*2</li>
</ul>
<h2 id="TODO-LIST"><a href="#TODO-LIST" class="headerlink" title="TODO LIST"></a>TODO LIST</h2><ul>
<li>做JS五子棋首页入口</li>
<li>用node.js写爬虫日志备份</li>
<li>为个人网站应用gulp.js</li>
</ul>
<h2 id="STATISTIC"><a href="#STATISTIC" class="headerlink" title="STATISTIC"></a>STATISTIC</h2><ul>
<li>体重 59.05kg</li>
</ul>
<p>  感觉wordpress里并没有typora里显示的那么好，不过也没关系了： <a href="http://diaryfun.info/wp-content/uploads/2017/05/%E6%8D%95%E8%8E%B7.gif" target="_blank" rel="noopener"><img src="http://diaryfun.info/wp-content/uploads/2017/05/%E6%8D%95%E8%8E%B7.gif"></a>     之前微博发过了总结的有效提升自己的方法论： <strong>1.保持开放的心态</strong> <strong>2.明确自身定位进行倒逼</strong> 这两句话很重要   立夏了，又到了最喜欢的季节。 Carpe diem, 一定要过好每一天啊。</p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
  </entry>
  <entry>
    <title>Unity构造单例模式</title>
    <url>/blog/2019/04/09/Unity%E6%9E%84%E9%80%A0%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class GameManager : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">	public static GameManager instance;</span><br><span class="line"></span><br><span class="line">    private void Awake()</span><br><span class="line">    &#123;</span><br><span class="line">        //singleton pattern</span><br><span class="line">        if (!instance)</span><br><span class="line">        &#123;</span><br><span class="line">            instance = this;</span><br><span class="line">        &#125;</span><br><span class="line">        else if (instance != this)</span><br><span class="line">        &#123;</span><br><span class="line">            DestroyImmediate(this);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>怎么使用正则表达式完美匹配HTML标签？</title>
    <url>/blog/2018/03/24/e6-80-8e-e4-b9-88-e4-bd-bf-e7-94-a8-e6-ad-a3-e5-88-99-e8-a1-a8-e8-be-be-e5-bc-8f-e5-ae-8c-e7-be-8e-e5-8c-b9-e9-85-/</url>
    <content><![CDATA[<p>转自腾讯前端博客：<a href="http://imweb.io/topic/56e804ef1a5f05dc50643106" target="_blank" rel="noopener">http://imweb.io/topic/56e804e...</a></p>
<hr>
<p>匹配HTML标签嘛，感觉很简单的样子，我们的第一反应可能是：<code>var pattern = /&lt;[^&gt;]+&gt;/</code> 不过这样匹配可能存在的问题是：如果tag中含有<code>&gt;</code>，上面的正则就不能正常匹配了。如： <code>&lt;input name=123 value=&quot;&gt;&quot; &gt;</code> <img src="https://sfault-image.b0.upaiyun.com/247/730/2477308083-58d34691bcbe1" alt="https://sfault-image.b0.upaiyun.com/247/730/2477308083-58d34691bcbe1"> 虽然上面这种HTML的写法很少(sha)见(bi)，但确实合法的。因此，简单的<code>&lt;[^&gt;]+&gt;</code>就不能用了，需要想个聪明点的办法。 我们先来看一下HTML Tag中有什么规则：<code>&lt;...&gt;</code>中能够出现 引用文本（被单引号或双引号包裹的） 非引用形式的“其他文本”（包括除了<code>&gt;</code>和引号之外的任何字符）</p>
<p>引用文本：HTML中的引文可以用双引号，也可以用单引号，但不允许嵌套转义的引号。</p>
<p>因此我们可以使用<code>/(&quot;[^&quot;]*&quot;|&#39;[^&#39;]*&#39;)/</code>来匹配。</p>
<p>其他文本：除了&gt;和引号之外的任意字符</p>
<p>可以使用<code>/[^&#39;&quot;&gt;]/</code>来匹配 现在可以得出匹配HTML Tag的正则表达式最终版！</p>
<p>var pattern &#x3D; &#x2F;&lt;(“[^”]<em>“|’[^’]*’|[^’”&gt;])</em>&gt;&#x2F;</p>
<p>给这个正则表达式来点注释：</p>
<p>&lt;                # 开始的尖括号”&lt;”<br>    (            #     任意数量的…<br>        “[^”]*“  #         双引号字符串<br>        |        #         或者是…<br>        ‘[^’]*‘  #         单引号字符串<br>        |        #         或者是…<br>        [^’”&gt;]   #         “其他文本”<br>    )*           #<br>&gt;                # 结束的尖括号”&gt;”</p>
<p><strong>需要注意的是</strong>，我们不用”+”来修饰<code>[^&#39;&quot;&gt;]</code>的原因是<code>([^&#39;&quot;&gt;]+)*</code>可能会带来灾难性的后果。匹配次数呈指数级增长。比如：对于简单的目标字符串helloworld，是星号会迭代10次，每一次迭代中<code>[^&#39;&quot;&gt;]+</code>匹配一个字符？还是星号迭代3次，内部的<code>[^&#39;&quot;&gt;]+</code>分别匹配5、2、3个字符？或者2、3、1、4个字符？还是其他情况？这样会把正则引擎搞疯掉的啦！</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>数据结构与算法（C++）代码练习（基础）</title>
    <url>/blog/2018/03/10/e6-95-b0-e6-8d-ae-e7-bb-93-e6-9e-84-e4-b8-8e-e7-ae-97-e6-b3-95-ef-bc-88c-ef-bc-89-e4-bb-a3-e7-a0-81-e7-bb-83-e4-b9-a0-ef-bc-88-e5-9f-ba-e7-a1-80-ef-bc-89/</url>
    <content><![CDATA[<p><em>所有代码均由Microsoft Visual Studio 2015编译通过</em>      </p>
<h4 id="递推法求sinx"><a href="#递推法求sinx" class="headerlink" title="递推法求sinx"></a>递推法求sinx</h4><p> </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">sinx</span><span class="params">(<span class="keyword">float</span> x)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">float</span> x;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入x："</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">fabs</span>(x) &gt;= <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"x大于等于1，数值非法"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"sin "</span> &lt;&lt; x &lt;&lt; <span class="string">" = "</span> &lt;&lt; sinx(x);</span><br><span class="line">    &#125;</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">sinx</span><span class="params">(<span class="keyword">float</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">float</span> term = x, result = x;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> n = <span class="number">1</span>;; n++)</span><br><span class="line">    &#123;</span><br><span class="line">        term = -term\*x\*x / ((<span class="number">2</span> * n)*(<span class="number">2</span> * n + <span class="number">1</span>));</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">fabs</span>(term)&lt;<span class="number">0.0001</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        result += term;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>   </p>
<h4 id="递推法输出斐波那契数列前20项"><a href="#递推法输出斐波那契数列前20项" class="headerlink" title="递推法输出斐波那契数列前20项"></a>递推法输出斐波那契数列前20项</h4><p> </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">int</span> f1,f2,f3;</span><br><span class="line">    f1 = f2 = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; setw(<span class="number">10</span>) &lt;&lt; f1 &lt;&lt; setw(<span class="number">10</span>) &lt;&lt; f2;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &lt;= <span class="number">20</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        f3 = f1 + f2;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; setw(<span class="number">10</span>) &lt;&lt; f3;</span><br><span class="line">        f1 = f2;</span><br><span class="line">        f2 = f3;</span><br><span class="line">        <span class="keyword">if</span> (i % <span class="number">5</span> == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>   </p>
<h4 id="欧几里得算法求两正整数最大公约数"><a href="#欧几里得算法求两正整数最大公约数" class="headerlink" title="欧几里得算法求两正整数最大公约数"></a>欧几里得算法求两正整数最大公约数</h4><p> </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a, b,a0,b0;</span><br><span class="line">    <span class="keyword">int</span> temp;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入两整数的值"</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">    a0 = a, b0 = b;</span><br><span class="line">    <span class="keyword">if</span> (a &lt;= <span class="number">0</span> || b &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"只能计算正整数！\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (a%b != <span class="number">0</span>) &#123;</span><br><span class="line">            temp = a%b;</span><br><span class="line">            a = b;</span><br><span class="line">            b = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; a0 &lt;&lt; <span class="string">"与"</span> &lt;&lt; b0 &lt;&lt; <span class="string">"的最大公约数为"</span> &lt;&lt; b &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>   </p>
<h4 id="递推法求n阶乘"><a href="#递推法求n阶乘" class="headerlink" title="递推法求n阶乘"></a>递推法求n阶乘</h4><p> </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">int</span> result=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入正整数n\n"</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"不是正整数！"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (; n &gt; <span class="number">0</span>; n--) &#123;</span><br><span class="line">            result *= n;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"n！="</span> &lt;&lt; result &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>   </p>
<h4 id="递归法求n阶乘"><a href="#递归法求n阶乘" class="headerlink" title="递归法求n阶乘"></a>递归法求n阶乘</h4><p> </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">x</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> n*x(n - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">int</span> result;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入正整数n\n"</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"不是正整数！"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        result=x(n);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"n！="</span> &lt;&lt; result &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>   </p>
<h4 id="递归法输出斐波那契数列前20项"><a href="#递归法输出斐波那契数列前20项" class="headerlink" title="递归法输出斐波那契数列前20项"></a>递归法输出斐波那契数列前20项</h4><p> </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fib</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span> || n == <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fib(n - <span class="number">1</span>) + fib(n - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">20</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; setw(<span class="number">10</span>) &lt;&lt; fib(i);</span><br><span class="line">        <span class="keyword">if</span> (i % <span class="number">5</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>   </p>
<h4 id="汉诺塔问题"><a href="#汉诺塔问题" class="headerlink" title="汉诺塔问题"></a>汉诺塔问题</h4><p> </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">hanio</span><span class="params">(<span class="keyword">int</span> n ,<span class="keyword">char</span> a , <span class="keyword">char</span> b , <span class="keyword">char</span> c ,<span class="keyword">int</span> &amp;i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    hanio(n - <span class="number">1</span>, a, c, b, i);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"移动第"</span> &lt;&lt; n &lt;&lt; <span class="string">"个盘 从"</span> &lt;&lt; a &lt;&lt; <span class="string">"柱到"</span> &lt;&lt; c &lt;&lt; <span class="string">"柱\n"</span>;</span><br><span class="line">    i++;</span><br><span class="line">    hanio(n - <span class="number">1</span>, b, a, c, i);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, steps=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入汉诺塔总盘数："</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    hanio(n,<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'C'</span>,steps);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"总步数："</span> &lt;&lt; steps &lt;&lt; <span class="string">"步\n"</span>;</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>   </p>
<h4 id="筛法求3-100以内素数"><a href="#筛法求3-100以内素数" class="headerlink" title="筛法求3-100以内素数"></a>筛法求3-100以内素数</h4><p> </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> prime[<span class="number">49</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">49</span>; i++) &#123;</span><br><span class="line">        prime[i] = <span class="number">3</span> + <span class="number">2</span> * i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (prime[i]) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; <span class="number">49</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (prime[j] % prime[i] == <span class="number">0</span>) &#123;</span><br><span class="line">                    prime[j] = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">49</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (prime[i] != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; prime[i] &lt;&lt; setw(<span class="number">10</span>);</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (j != <span class="number">0</span> &amp;&amp; j % <span class="number">5</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>   </p>
<h4 id="输入成绩并输出成绩低于平均成绩的学生"><a href="#输入成绩并输出成绩低于平均成绩的学生" class="headerlink" title="输入成绩并输出成绩低于平均成绩的学生"></a>输入成绩并输出成绩低于平均成绩的学生</h4><p> </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">float</span> x[N], sum = <span class="number">0</span>, ave;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入学生成绩，以负数结束\n"</span>;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; x[i];</span><br><span class="line">        sum += x[i];</span><br><span class="line">    &#125; <span class="keyword">while</span> (x[i++] &gt;= <span class="number">0</span> &amp;&amp; i &lt; N);</span><br><span class="line">    <span class="keyword">if</span> (i == N) &#123;</span><br><span class="line">        ave = sum / i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        ave = (sum - x[--i]) / i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"共输入"</span> &lt;&lt; i &lt;&lt; <span class="string">"个学生    平均成绩"</span> &lt;&lt; ave &lt;&lt; <span class="string">"分\n\n"</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"其中低于平均成绩的学生有："</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (x[j] &lt; ave) &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"第"</span> &lt;&lt; j+<span class="number">1</span> &lt;&lt; <span class="string">"个学生    "</span> &lt;&lt; x[j] &lt;&lt; <span class="string">"分\n"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>   </p>
<h4 id="打印10层杨辉三角形"><a href="#打印10层杨辉三角形" class="headerlink" title="打印10层杨辉三角形"></a>打印10层杨辉三角形</h4><p> </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 10</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[N][N];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= i; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (j == <span class="number">0</span> || j == i) &#123;</span><br><span class="line">                a[i][j] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                a[i][j] = a[i - <span class="number">1</span>][j] + a[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; a[i][j] &lt;&lt; setw(<span class="number">10</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>      </p>
<p>2016年3月</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
  </entry>
  <entry>
    <title>数据结构与算法（C++）代码练习（排序）</title>
    <url>/blog/2018/03/10/e6-95-b0-e6-8d-ae-e7-bb-93-e6-9e-84-e4-b8-8e-e7-ae-97-e6-b3-95-ef-bc-88c-ef-bc-89-e4-bb-a3-e7-a0-81-e7-bb-83-e4-b9-a0-ef-bc-88-e6-8e-92-e5-ba-8f-ef-bc-89/</url>
    <content><![CDATA[<p><em>所有代码均由Microsoft Visual Studio 2015编译通过</em>      </p>
<h4 id="插入排序（Insertion-Sort）"><a href="#插入排序（Insertion-Sort）" class="headerlink" title="插入排序（Insertion_Sort）"></a>插入排序（Insertion_Sort）</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 10</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Insertion_Sort</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> j = i - <span class="number">1</span>;</span><br><span class="line">        temp = a[i];</span><br><span class="line">        <span class="keyword">while</span> (j &gt;= <span class="number">0</span> &amp;&amp; a[j] &gt; temp) &#123;</span><br><span class="line">            a[j + <span class="number">1</span>] = a[j];</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">        a[j + <span class="number">1</span>] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[N];</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入要排序的"</span> &lt;&lt; N &lt;&lt; <span class="string">"个整数：\n"</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    Insertion_Sort(a, N);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"排序后："</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; a[i] &lt;&lt; <span class="string">"    "</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>   </p>
<h4 id="希尔排序（Shell-Sort）"><a href="#希尔排序（Shell-Sort）" class="headerlink" title="希尔排序（Shell_Sort）"></a>希尔排序（Shell_Sort）</h4><p> </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 10</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Shell_Sort</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> gap = n / <span class="number">2</span>; gap &gt; <span class="number">0</span>; gap /= <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = gap; i &lt; n; i += gap) &#123;</span><br><span class="line">            <span class="keyword">int</span> j = i - gap;</span><br><span class="line">            temp = a[i];</span><br><span class="line">            <span class="keyword">while</span> (j &gt;= <span class="number">0</span> &amp;&amp; a[j] &gt; temp) &#123;</span><br><span class="line">                a[j + gap] = a[j];</span><br><span class="line">                j -= gap;</span><br><span class="line">            &#125;</span><br><span class="line">            a[j + gap] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[N];</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入要排序的"</span> &lt;&lt; N &lt;&lt; <span class="string">"个整数：\n"</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    Shell_Sort(a, N);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"排序后："</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; a[i] &lt;&lt; <span class="string">"    "</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>   </p>
<h4 id="冒泡排序（Bubble-Sort）"><a href="#冒泡排序（Bubble-Sort）" class="headerlink" title="冒泡排序（Bubble_Sort）"></a>冒泡排序（Bubble_Sort）</h4><p> </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 10</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Bubble_Sort</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp, flag = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = n - <span class="number">1</span>; j &gt; <span class="number">0</span> &amp;&amp; flag; j--) &#123;</span><br><span class="line">        flag = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; j; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[i] &gt; a[i + <span class="number">1</span>]) &#123;</span><br><span class="line">                temp = a[i];</span><br><span class="line">                a[i] = a[i + <span class="number">1</span>];</span><br><span class="line">                a[i + <span class="number">1</span>] = temp;</span><br><span class="line">                flag = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[N];</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入要排序的"</span> &lt;&lt; N &lt;&lt; <span class="string">"个整数："</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    Bubble_Sort(a, N);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"排序后："</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; a[i] &lt;&lt; <span class="string">"    "</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>   </p>
<h4 id="快速排序（Quick-Sort）"><a href="#快速排序（Quick-Sort）" class="headerlink" title="快速排序（Quick_Sort）"></a>快速排序（Quick_Sort）</h4><p> </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 10</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Insertion_Sort</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> j = i - <span class="number">1</span>;</span><br><span class="line">        temp = a[i];</span><br><span class="line">        <span class="keyword">while</span> (j &gt;= <span class="number">0</span> &amp;&amp; a[j] &gt; temp) &#123;</span><br><span class="line">            a[j + <span class="number">1</span>] = a[j];</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">        a[j + <span class="number">1</span>] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> &amp;a, <span class="keyword">int</span> &amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp = a;</span><br><span class="line">    a = b;</span><br><span class="line">    b = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">median</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> c = (l + r) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (a[l] &gt; a[c]) &#123;</span><br><span class="line">        swap(a[l], a[c]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (a[c] &gt; a[r]) &#123;</span><br><span class="line">        swap(a[c], a[r]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (a[l] &gt; a[c]) &#123;</span><br><span class="line">        swap(a[l], a[c]);</span><br><span class="line">    &#125;</span><br><span class="line">    swap(a[c], a[r - <span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">return</span> a[r - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (right - left + <span class="number">1</span> &gt; <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> pivot = median(a, left, right);</span><br><span class="line">        <span class="keyword">int</span> i, j;</span><br><span class="line">        i = left;</span><br><span class="line">        j = right - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span> (a[++i] &lt; pivot) &#123;&#125;</span><br><span class="line">            <span class="keyword">while</span> (a[--j] &gt; pivot) &#123;&#125;</span><br><span class="line">            <span class="keyword">if</span> (i &lt; j) &#123;</span><br><span class="line">                swap(a[i], a[j]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        swap(a[i], a[right - <span class="number">1</span>]);</span><br><span class="line">        quickSort(a, left, i - <span class="number">1</span>);</span><br><span class="line">        quickSort(a, i + <span class="number">1</span>, right);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        Insertion_Sort(a + left, right - left + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Quick_Sort</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    quickSort(a, <span class="number">0</span>, n - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[N];</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入要排序的"</span> &lt;&lt; N &lt;&lt; <span class="string">"个整数：\n"</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    Quick_Sort(a, N);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"排序后："</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; a[i] &lt;&lt; <span class="string">"    "</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>   </p>
<h4 id="选择排序（Select-Sort）"><a href="#选择排序（Select-Sort）" class="headerlink" title="选择排序（Select_Sort）"></a>选择排序（Select_Sort）</h4><p> </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 10</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Select_Sort</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> min, temp;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        min = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[j] &lt; a[min]) &#123;</span><br><span class="line">                min = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        temp = a[i];</span><br><span class="line">        a[i] = a[min];</span><br><span class="line">        a[min] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[N];</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入要排序的"</span> &lt;&lt; N &lt;&lt; <span class="string">"个整数："</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    Select_Sort(a, N);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"排序后："</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; a[i] &lt;&lt; <span class="string">"    "</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>   </p>
<h4 id="堆排序（Heap-Sort）"><a href="#堆排序（Heap-Sort）" class="headerlink" title="堆排序（Heap_Sort）"></a>堆排序（Heap_Sort）</h4><p> </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 10</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Heap</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> size;</span><br><span class="line">    <span class="keyword">int</span>* a;</span><br><span class="line">    Heap() &#123;</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">incertMaxHeap</span><span class="params">(<span class="keyword">int</span> a, Heap&amp; maxHeap)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> hole = maxHeap.size++;</span><br><span class="line">    <span class="keyword">while</span> (hole != <span class="number">0</span> &amp;&amp; a &gt; maxHeap.a[(hole - <span class="number">1</span>) / <span class="number">2</span>]) &#123;</span><br><span class="line">        maxHeap.a[hole] = maxHeap.a[(hole - <span class="number">1</span>) / <span class="number">2</span>];</span><br><span class="line">        hole = (hole - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    maxHeap.a[hole] = a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">moveMaxRear</span><span class="params">(Heap&amp; maxHeap)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> max = maxHeap.a[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">int</span> hole = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (hole &lt;= maxHeap.size / <span class="number">2</span> - <span class="number">1</span> &amp;&amp; (maxHeap.a[maxHeap.size - <span class="number">1</span>] &lt; maxHeap.a[hole * <span class="number">2</span> + <span class="number">1</span>] || maxHeap.a[maxHeap.size - <span class="number">1</span>] &lt; maxHeap.a[hole * <span class="number">2</span> + <span class="number">2</span>])) &#123;</span><br><span class="line">        <span class="keyword">if</span> (maxHeap.a[hole * <span class="number">2</span> + <span class="number">2</span>] &gt; maxHeap.a[hole * <span class="number">2</span> + <span class="number">1</span>]) &#123;</span><br><span class="line">            maxHeap.a[hole] = maxHeap.a[hole * <span class="number">2</span> + <span class="number">2</span>];</span><br><span class="line">            hole = hole * <span class="number">2</span> + <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            maxHeap.a[hole] = maxHeap.a[hole * <span class="number">2</span> + <span class="number">1</span>];</span><br><span class="line">            hole = hole * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (maxHeap.size % <span class="number">2</span> == <span class="number">0</span> &amp;&amp; hole == maxHeap.size) &#123;</span><br><span class="line">        maxHeap.a[maxHeap.size] = maxHeap.a[(hole - <span class="number">1</span>) / <span class="number">2</span>];</span><br><span class="line">        hole = (hole - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    maxHeap.a[hole] = maxHeap.a[maxHeap.size - <span class="number">1</span>];</span><br><span class="line">    maxHeap.size--;</span><br><span class="line">    maxHeap.a[maxHeap.size] = max;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Heap_Sort</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Heap maxHeap;</span><br><span class="line">    maxHeap.a = a;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        incertMaxHeap(a[i], maxHeap);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        moveMaxRear(maxHeap);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[N];</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入要排序的"</span> &lt;&lt; N &lt;&lt; <span class="string">"个整数：\n"</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    Heap_Sort(a, N);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"排序后："</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; a[i] &lt;&lt; <span class="string">"    "</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>   </p>
<h4 id="归并排序（Merge-Sort）"><a href="#归并排序（Merge-Sort）" class="headerlink" title="归并排序（Merge_Sort）"></a>归并排序（Merge_Sort）</h4><p> </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 10</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> obj[], <span class="keyword">int</span> src[], <span class="keyword">int</span> left, <span class="keyword">int</span> right, <span class="keyword">int</span> rEnd)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> lEnd = right - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> i = left;</span><br><span class="line">    <span class="keyword">while</span> (left &lt;= lEnd&amp;&amp;right &lt;= rEnd) &#123;</span><br><span class="line">        <span class="keyword">if</span> (src[left] &lt;= src[right]) &#123;</span><br><span class="line">            obj[i++] = src[left++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            obj[i++] = src[right++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (left &lt;= lEnd) &#123;</span><br><span class="line">        obj[i++] = src[left++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (right &lt;= rEnd) &#123;</span><br><span class="line">        obj[i++] = src[right++];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(<span class="keyword">int</span> obj[],<span class="keyword">int</span> src[],<span class="keyword">int</span> left,<span class="keyword">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (left &gt;= right) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> center = (left + right) / <span class="number">2</span>;</span><br><span class="line">    mergeSort(src, obj, left, center);</span><br><span class="line">    mergeSort(src, obj, center + <span class="number">1</span>, right);</span><br><span class="line">    merge(obj, src, left, center + <span class="number">1</span>, right);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Merge_Sort</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span>* temp = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        temp[i] = a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    mergeSort(a, temp, <span class="number">0</span>, n - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[N];</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入要排序的"</span> &lt;&lt; N &lt;&lt; <span class="string">"个整数：\n"</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    Merge_Sort(a, N);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"排序后："</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; a[i] &lt;&lt; <span class="string">"    "</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>   </p>
<h4 id="桶排序（Bucket-Sort）"><a href="#桶排序（Bucket-Sort）" class="headerlink" title="桶排序（Bucket_Sort）"></a>桶排序（Bucket_Sort）</h4><p> </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 10</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SIZE 100</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">listNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    listNode* next;</span><br><span class="line">    listNode() &#123;</span><br><span class="line">        next = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addNode</span><span class="params">(listNode&amp; node, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    listNode* p = <span class="keyword">new</span> listNode;</span><br><span class="line">    p-&gt;data = n;</span><br><span class="line">    p-&gt;next = node.next;</span><br><span class="line">    node.next = p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">readNode</span><span class="params">(listNode bucket[], <span class="keyword">int</span> a[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; SIZE; i++) &#123;</span><br><span class="line">        listNode* p = bucket[i].next;</span><br><span class="line">        <span class="keyword">while</span> (p) &#123;</span><br><span class="line">            a[j++] = p-&gt;data;</span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Bucket_Sort</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    listNode bucket[SIZE];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        addNode(bucket[a[i]], a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    readNode(bucket, a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[N];</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入要排序的"</span> &lt;&lt; N &lt;&lt; <span class="string">"个整数(0-99之间)：\n"</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    Bucket_Sort(a, N);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"排序后："</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; a[i] &lt;&lt; <span class="string">"    "</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>      </p>
<p>2016年3月</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
  </entry>
  <entry>
    <title>数据结构与算法（C++）代码练习（查找）</title>
    <url>/blog/2018/03/10/e6-95-b0-e6-8d-ae-e7-bb-93-e6-9e-84-e4-b8-8e-e7-ae-97-e6-b3-95-ef-bc-88c-ef-bc-89-e4-bb-a3-e7-a0-81-e7-bb-83-e4-b9-a0-ef-bc-88-e6-9f-a5-e6-89-be-ef-bc-89/</url>
    <content><![CDATA[<p><em>所有代码均由Microsoft Visual Studio 2015编译通过</em>      </p>
<h4 id="20个随机数的数组中的顺序查找"><a href="#20个随机数的数组中的顺序查找" class="headerlink" title="20个随机数的数组中的顺序查找"></a>20个随机数的数组中的顺序查找</h4><p> </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 20</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Order_Search</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i] == n) &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"在第"</span> &lt;&lt;i+<span class="number">1</span> &lt;&lt; <span class="string">"个位置上找到"</span> &lt;&lt; n &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"未找到\n"</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[N],n;</span><br><span class="line">    srand(<span class="keyword">unsigned</span>(time));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        a[i] = rand();</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; a[i] &lt;&lt; <span class="string">'\t'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\n请输入要查找的数："</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\n\n"</span>;</span><br><span class="line">    Order_Search(a,n);</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="20个随机数的数组中的二分查找"><a href="#20个随机数的数组中的二分查找" class="headerlink" title="20个随机数的数组中的二分查找"></a>20个随机数的数组中的二分查找</h4><p> </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 20</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Bubble_Sort</span><span class="params">(<span class="keyword">int</span> a[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp, flag = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = N - <span class="number">1</span>; j &gt; <span class="number">0</span> &amp;&amp; flag; j--) &#123;</span><br><span class="line">        flag = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; j; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[i] &gt; a[i + <span class="number">1</span>]) &#123;</span><br><span class="line">                temp = a[i];</span><br><span class="line">                a[i] = a[i + <span class="number">1</span>];</span><br><span class="line">                a[i + <span class="number">1</span>] = temp;</span><br><span class="line">                flag = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Binary_Search</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>, right = N, mid;</span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">        mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (a[mid] &gt; n) &#123;</span><br><span class="line">            right = mid<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (a[mid] &lt; n) &#123;</span><br><span class="line">            left = mid+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"在升序第"</span> &lt;&lt; mid + <span class="number">1</span> &lt;&lt; <span class="string">"个位置上找到"</span> &lt;&lt; n &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"未找到\n"</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[N], n;</span><br><span class="line">    srand(<span class="keyword">unsigned</span>(time));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        a[i] = rand();</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; a[i] &lt;&lt; <span class="string">'\t'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\n请输入要查找的数："</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\n\n"</span>;</span><br><span class="line">    Bubble_Sort(a);</span><br><span class="line">    Binary_Search(a, n);</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>   </p>
<h4 id="使用平方探测的散列表的插入、删除、查找"><a href="#使用平方探测的散列表的插入、删除、查找" class="headerlink" title="使用平方探测的散列表的插入、删除、查找"></a>使用平方探测的散列表的插入、删除、查找</h4><p> </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 43</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> I -100000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> HOLD 100000</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Hash</span><span class="params">(<span class="keyword">int</span> key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> key%N;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findPos</span><span class="params">(<span class="keyword">int</span> key, <span class="keyword">int</span> table[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> pos, ipos;</span><br><span class="line">    pos = ipos = Hash(key);</span><br><span class="line">    <span class="keyword">while</span> (table[pos]!=I &amp;&amp; table[pos] != key) &#123;</span><br><span class="line">        <span class="keyword">if</span> (++n % <span class="number">2</span>) &#123;</span><br><span class="line">            pos = ipos + (n + <span class="number">1</span>) / <span class="number">2</span> * (n + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">while</span> (pos &gt;= N) &#123;</span><br><span class="line">                pos -= N;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            pos = ipos - (n / <span class="number">2</span>)*(n / <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">while</span> (pos &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                pos += N;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pos;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">contain</span><span class="params">(<span class="keyword">int</span> key, <span class="keyword">int</span> table[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pos=findPos(key, table);</span><br><span class="line">    <span class="keyword">if</span> (table[pos]==I) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> key, <span class="keyword">int</span> table[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pos = findPos(key, table);</span><br><span class="line">    table[pos] = key;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">remove</span><span class="params">(<span class="keyword">int</span> key, <span class="keyword">int</span> table[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pos = findPos(key, table);</span><br><span class="line">    <span class="keyword">if</span> (table[pos]==I) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        table[pos] = HOLD;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, a, res;</span><br><span class="line">    <span class="keyword">int</span> hashTable[N];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        hashTable[i] = I;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入要插入的数据个数：\n"</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"请依次输入数据：\n"</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a;</span><br><span class="line">        insert(a, hashTable);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入要删除的数据个数：\n"</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"请依次输入要删除的数据：\n"</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a;</span><br><span class="line">        res = remove(a, hashTable);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; (res ? <span class="string">"删除成功\n"</span> : <span class="string">"查无此数\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入要查找的数据个数：\n"</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"请依次输入要查找的数据：\n"</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a;</span><br><span class="line">        res = contain(a, hashTable);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; (res ? <span class="string">"已找到\n"</span> : <span class="string">"未找到\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>      </p>
<p>2016年3月</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
  </entry>
  <entry>
    <title>数据结构与算法（C++）代码练习（树）</title>
    <url>/blog/2018/03/10/e6-95-b0-e6-8d-ae-e7-bb-93-e6-9e-84-e4-b8-8e-e7-ae-97-e6-b3-95-ef-bc-88c-ef-bc-89-e4-bb-a3-e7-a0-81-e7-bb-83-e4-b9-a0-ef-bc-88-e6-a0-91-ef-bc-89/</url>
    <content><![CDATA[<p><em>所有代码均由Microsoft Visual Studio 2015编译通过</em>      </p>
<h4 id="递归法实现二叉树的三种遍历"><a href="#递归法实现二叉树的三种遍历" class="headerlink" title="递归法实现二叉树的三种遍历"></a>递归法实现二叉树的三种遍历</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">treeNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    treeNode* left;</span><br><span class="line">    treeNode* right;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (a &gt; b ? a : b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">height</span><span class="params">(treeNode* root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!root) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> max(height(root-&gt;left), height(root-&gt;right)) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">singleRotateLeft</span><span class="params">(treeNode*&amp; root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    treeNode* temp = root;</span><br><span class="line">    root = root-&gt;left;</span><br><span class="line">    temp-&gt;left = root-&gt;right;</span><br><span class="line">    root-&gt;right = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">singleRotateRight</span><span class="params">(treeNode*&amp; root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    treeNode* temp = root;</span><br><span class="line">    root = root-&gt;right;</span><br><span class="line">    temp-&gt;right = root-&gt;left;</span><br><span class="line">    root-&gt;left = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">doubleRotateLeft</span><span class="params">(treeNode*&amp; root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    singleRotateRight(root-&gt;left);</span><br><span class="line">    singleRotateLeft(root);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">doubleRotateRight</span><span class="params">(treeNode*&amp; root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    singleRotateLeft(root-&gt;right);</span><br><span class="line">    singleRotateRight(root);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">treeNode* <span class="title">findMin</span><span class="params">(treeNode* root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!root) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (root-&gt;left) &#123;</span><br><span class="line">        root = root-&gt;left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">treeNode* <span class="title">findMax</span><span class="params">(treeNode* root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!root) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (root-&gt;right) &#123;</span><br><span class="line">        root = root-&gt;right;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">incertNode</span><span class="params">(<span class="keyword">int</span> a, treeNode*&amp; root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res;</span><br><span class="line">    <span class="keyword">if</span> (!root) &#123;</span><br><span class="line">        root = <span class="keyword">new</span> treeNode;</span><br><span class="line">        root-&gt;data = a;</span><br><span class="line">        root-&gt;left = root-&gt;right = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (a &lt; root-&gt;data) &#123;</span><br><span class="line">        res = incertNode(a, root-&gt;left);</span><br><span class="line">        <span class="keyword">if</span> (height(root-&gt;left) - height(root-&gt;right) &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a &lt; root-&gt;left-&gt;data) &#123;</span><br><span class="line">                singleRotateLeft(root);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                doubleRotateLeft(root);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (a &gt; root-&gt;data) &#123;</span><br><span class="line">        res = incertNode(a, root-&gt;right);</span><br><span class="line">        <span class="keyword">if</span> (height(root-&gt;right) - height(root-&gt;left) &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a &gt; root-&gt;right-&gt;data) &#123;</span><br><span class="line">                singleRotateRight(root);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                doubleRotateRight(root);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">preorderTraverse</span><span class="params">(treeNode* root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; root-&gt;data;</span><br><span class="line">        preorderTraverse(root-&gt;left);</span><br><span class="line">        preorderTraverse(root-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inorderTraverse</span><span class="params">(treeNode* root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root) &#123;</span><br><span class="line">        inorderTraverse(root-&gt;left);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; root-&gt;data;</span><br><span class="line">        inorderTraverse(root-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">postorderTraverse</span><span class="params">(treeNode* root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root) &#123;</span><br><span class="line">        postorderTraverse(root-&gt;left);</span><br><span class="line">        postorderTraverse(root-&gt;right);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; root-&gt;data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, a, res;</span><br><span class="line">    treeNode* root = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入二叉树结点总数：\n"</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"请依次输入结点数字：\n"</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a;</span><br><span class="line">        res = incertNode(a, root);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; (res ? <span class="string">"插入成功\n"</span> : <span class="string">"数据重复\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"二叉树构建完毕，高度为："</span> &lt;&lt; height(root) &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\n前序遍历：\n"</span>;</span><br><span class="line">    preorderTraverse(root);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\n中序遍历：\n"</span>;</span><br><span class="line">    inorderTraverse(root);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\n后序遍历：\n"</span>;</span><br><span class="line">    postorderTraverse(root);</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="非递归法实现二叉树的中序遍历"><a href="#非递归法实现二叉树的中序遍历" class="headerlink" title="非递归法实现二叉树的中序遍历"></a>非递归法实现二叉树的中序遍历</h4><p> </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">treeNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    treeNode* left;</span><br><span class="line">    treeNode* right;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    treeNode* p;</span><br><span class="line">    Node* next;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(Node* &amp;top, treeNode* p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Node* temp = <span class="keyword">new</span> Node;</span><br><span class="line">    temp-&gt;next = top;</span><br><span class="line">    top = temp;</span><br><span class="line">    top-&gt;p = p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">treeNode* <span class="title">pop</span><span class="params">(Node* &amp;top)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Node* temp = top;</span><br><span class="line">    top = top-&gt;next;</span><br><span class="line">    temp-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> temp-&gt;p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (a &gt; b ? a : b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">height</span><span class="params">(treeNode* root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!root) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> max(height(root-&gt;left), height(root-&gt;right)) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">singleRotateLeft</span><span class="params">(treeNode*&amp; root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    treeNode* temp = root;</span><br><span class="line">    root = root-&gt;left;</span><br><span class="line">    temp-&gt;left = root-&gt;right;</span><br><span class="line">    root-&gt;right = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">singleRotateRight</span><span class="params">(treeNode*&amp; root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    treeNode* temp = root;</span><br><span class="line">    root = root-&gt;right;</span><br><span class="line">    temp-&gt;right = root-&gt;left;</span><br><span class="line">    root-&gt;left = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">doubleRotateLeft</span><span class="params">(treeNode*&amp; root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    singleRotateRight(root-&gt;left);</span><br><span class="line">    singleRotateLeft(root);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">doubleRotateRight</span><span class="params">(treeNode*&amp; root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    singleRotateLeft(root-&gt;right);</span><br><span class="line">    singleRotateRight(root);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">treeNode* <span class="title">findMin</span><span class="params">(treeNode* root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!root) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (root-&gt;left) &#123;</span><br><span class="line">        root = root-&gt;left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">treeNode* <span class="title">findMax</span><span class="params">(treeNode* root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!root) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (root-&gt;right) &#123;</span><br><span class="line">        root = root-&gt;right;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">incertNode</span><span class="params">(<span class="keyword">int</span> a, treeNode*&amp; root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res;</span><br><span class="line">    <span class="keyword">if</span> (!root) &#123;</span><br><span class="line">        root = <span class="keyword">new</span> treeNode;</span><br><span class="line">        root-&gt;data = a;</span><br><span class="line">        root-&gt;left = root-&gt;right = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (a &lt; root-&gt;data) &#123;</span><br><span class="line">        res = incertNode(a, root-&gt;left);</span><br><span class="line">        <span class="keyword">if</span> (height(root-&gt;left) - height(root-&gt;right) &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a &lt; root-&gt;left-&gt;data) &#123;</span><br><span class="line">                singleRotateLeft(root);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                doubleRotateLeft(root);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (a &gt; root-&gt;data) &#123;</span><br><span class="line">        res = incertNode(a, root-&gt;right);</span><br><span class="line">        <span class="keyword">if</span> (height(root-&gt;right) - height(root-&gt;left) &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a &gt; root-&gt;right-&gt;data) &#123;</span><br><span class="line">                singleRotateRight(root);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                doubleRotateRight(root);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inorderTraverse</span><span class="params">(treeNode* root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Node* <span class="built_in">stack</span> = <span class="keyword">new</span> Node;</span><br><span class="line">    <span class="built_in">stack</span>-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span> (root||<span class="built_in">stack</span>-&gt;next) &#123;</span><br><span class="line">        <span class="keyword">while</span> (root) &#123;</span><br><span class="line">            push(<span class="built_in">stack</span>, root);</span><br><span class="line">            root = root-&gt;left;</span><br><span class="line">        &#125;</span><br><span class="line">        root = pop(<span class="built_in">stack</span>);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; root-&gt;data;</span><br><span class="line">        root = root-&gt;right;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, a, res;</span><br><span class="line">    treeNode* root = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入二叉树结点总数：\n"</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"请依次输入结点数字：\n"</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a;</span><br><span class="line">        res = incertNode(a, root);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; (res ? <span class="string">"插入成功\n"</span> : <span class="string">"数据重复\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"二叉树构建完毕，高度为："</span> &lt;&lt; height(root) &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\n中序遍历：\n"</span>;</span><br><span class="line">    inorderTraverse(root);</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="平衡二叉树的插入、删除、查找"><a href="#平衡二叉树的插入、删除、查找" class="headerlink" title="平衡二叉树的插入、删除、查找"></a>平衡二叉树的插入、删除、查找</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">treeNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    treeNode* left;</span><br><span class="line">    treeNode* right;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (a &gt; b ? a : b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">height</span><span class="params">(treeNode* root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!root) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> max(height(root-&gt;left), height(root-&gt;right)) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">singleRotateLeft</span><span class="params">(treeNode*&amp; root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    treeNode* temp = root;</span><br><span class="line">    root = root-&gt;left;</span><br><span class="line">    temp-&gt;left = root-&gt;right;</span><br><span class="line">    root-&gt;right = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">singleRotateRight</span><span class="params">(treeNode*&amp; root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    treeNode* temp = root;</span><br><span class="line">    root = root-&gt;right;</span><br><span class="line">    temp-&gt;right = root-&gt;left;</span><br><span class="line">    root-&gt;left = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">doubleRotateLeft</span><span class="params">(treeNode*&amp; root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    singleRotateRight(root-&gt;left);</span><br><span class="line">    singleRotateLeft(root);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">doubleRotateRight</span><span class="params">(treeNode*&amp; root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    singleRotateLeft(root-&gt;right);</span><br><span class="line">    singleRotateRight(root);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">treeNode* <span class="title">find</span><span class="params">(<span class="keyword">int</span> a, treeNode* root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!root) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (a &lt; root-&gt;data) &#123;</span><br><span class="line">        <span class="keyword">return</span> find(a, root-&gt;left);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (a &gt; root-&gt;data) &#123;</span><br><span class="line">        <span class="keyword">return</span> find(a, root-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">treeNode* <span class="title">findMin</span><span class="params">(treeNode* root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!root) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (root-&gt;left) &#123;</span><br><span class="line">        root = root-&gt;left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">treeNode* <span class="title">findMax</span><span class="params">(treeNode* root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!root) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (root-&gt;right) &#123;</span><br><span class="line">        root = root-&gt;right;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">incertNode</span><span class="params">(<span class="keyword">int</span> a, treeNode*&amp; root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res;</span><br><span class="line">    <span class="keyword">if</span> (!root) &#123;</span><br><span class="line">        root = <span class="keyword">new</span> treeNode;</span><br><span class="line">        root-&gt;data = a;</span><br><span class="line">        root-&gt;left = root-&gt;right = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (a &lt; root-&gt;data) &#123;</span><br><span class="line">        res = incertNode(a, root-&gt;left);</span><br><span class="line">        <span class="keyword">if</span> (height(root-&gt;left) - height(root-&gt;right) &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a &lt; root-&gt;left-&gt;data) &#123;</span><br><span class="line">                singleRotateLeft(root);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                doubleRotateLeft(root);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (a &gt; root-&gt;data) &#123;</span><br><span class="line">        res = incertNode(a, root-&gt;right);</span><br><span class="line">        <span class="keyword">if</span> (height(root-&gt;right) - height(root-&gt;left) &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a &gt; root-&gt;right-&gt;data) &#123;</span><br><span class="line">                singleRotateRight(root);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                doubleRotateRight(root);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">deleteNode</span><span class="params">(<span class="keyword">int</span> a, treeNode*&amp; root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!root) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (a &lt; root-&gt;data) &#123;</span><br><span class="line">        <span class="keyword">return</span> deleteNode(a, root-&gt;left);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (a &gt; root-&gt;data) &#123;</span><br><span class="line">        <span class="keyword">return</span> deleteNode(a, root-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (root-&gt;left&amp;&amp;root-&gt;right) &#123;</span><br><span class="line">        treeNode* p;</span><br><span class="line">        <span class="keyword">if</span> (height(root-&gt;left) &lt; height(root-&gt;right)) &#123;</span><br><span class="line">            p = findMin(root-&gt;right);</span><br><span class="line">            root-&gt;data = p-&gt;data;</span><br><span class="line">            <span class="keyword">return</span> deleteNode(p-&gt;data, root-&gt;right);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            p = findMax(root-&gt;left);</span><br><span class="line">            root-&gt;data = p-&gt;data;</span><br><span class="line">            <span class="keyword">return</span> deleteNode(p-&gt;data, root-&gt;left);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (root-&gt;left || root-&gt;right) &#123;</span><br><span class="line">        treeNode* p = (root-&gt;left ? root-&gt;left : root-&gt;right);</span><br><span class="line">        <span class="keyword">delete</span> root;</span><br><span class="line">        root = p;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">delete</span> root;</span><br><span class="line">        root = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, a, res;</span><br><span class="line">    treeNode* root = <span class="literal">NULL</span>, *resP = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入二叉树结点总数：\n"</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"请依次输入结点数字：\n"</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a;</span><br><span class="line">        res = incertNode(a, root);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; (res ? <span class="string">"插入成功\n"</span> : <span class="string">"数据重复\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"二叉树构建完毕，高度为："</span> &lt;&lt; height(root) &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入要删除的结点个数：\n"</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"请依次输入结点数字：\n"</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a;</span><br><span class="line">        res = deleteNode(a, root);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; (res ? <span class="string">"删除成功\n"</span> : <span class="string">"查无此数\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"删除完毕，高度为："</span> &lt;&lt; height(root) &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入要查找的结点个数：\n"</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"请依次输入结点数字：\n"</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a;</span><br><span class="line">        resP = find(a, root);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; (resP ? <span class="string">"已找到\n"</span> : <span class="string">"未找到\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="最小堆的插入与删除"><a href="#最小堆的插入与删除" class="headerlink" title="最小堆的插入与删除"></a>最小堆的插入与删除</h4><p> </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 100000</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Heap</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> size;</span><br><span class="line">    <span class="keyword">int</span> a[N];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">checkOdd</span><span class="params">(Heap&amp; minHeap)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!(minHeap.size % <span class="number">2</span>)) &#123;</span><br><span class="line">        minHeap.a[minHeap.size + <span class="number">1</span>] = MAX;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">incertMinHeap</span><span class="params">(<span class="keyword">int</span> a, Heap&amp; minHeap)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> hole = ++minHeap.size;</span><br><span class="line">    <span class="keyword">while</span> (hole != <span class="number">1</span> &amp;&amp; a &lt; minHeap.a[hole / <span class="number">2</span>]) &#123;</span><br><span class="line">        minHeap.a[hole] = minHeap.a[hole / <span class="number">2</span>];</span><br><span class="line">        hole = hole / <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    minHeap.a[hole] = a;</span><br><span class="line">    checkOdd(minHeap);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">deleteMin</span><span class="params">(Heap&amp; minHeap)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> min = minHeap.a[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span> hole = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (hole &lt;= minHeap.size / <span class="number">2</span> &amp;&amp; (minHeap.a[minHeap.size] &gt; minHeap.a[hole * <span class="number">2</span> + <span class="number">1</span>] || minHeap.a[minHeap.size] &gt; minHeap.a[hole * <span class="number">2</span>])) &#123;</span><br><span class="line">        <span class="keyword">if</span> (minHeap.a[hole * <span class="number">2</span> + <span class="number">1</span>] &lt; minHeap.a[hole * <span class="number">2</span>]) &#123;</span><br><span class="line">            minHeap.a[hole] = minHeap.a[hole * <span class="number">2</span> + <span class="number">1</span>];</span><br><span class="line">            hole = hole * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            minHeap.a[hole] = minHeap.a[hole * <span class="number">2</span>];</span><br><span class="line">            hole = hole * <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    minHeap.a[hole] = minHeap.a[minHeap.size];</span><br><span class="line">    minHeap.size--;</span><br><span class="line">    checkOdd(minHeap);</span><br><span class="line">    <span class="keyword">return</span> min;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, a;</span><br><span class="line">    Heap minHeap;</span><br><span class="line">    minHeap.size = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入最小堆结点个数（100以内）：\n"</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"请依次输入结点数字：\n"</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a;</span><br><span class="line">        incertMinHeap(a, minHeap);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"已插入第"</span> &lt;&lt; i + <span class="number">1</span> &lt;&lt; <span class="string">"个数\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入要查看从小到大排列的前几个数：\n"</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        a = deleteMin(minHeap);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"第"</span> &lt;&lt; i + <span class="number">1</span> &lt;&lt; <span class="string">"小的数为："</span> &lt;&lt; a &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>      </p>
<p>2016年3月</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
  </entry>
  <entry>
    <title>数据结构与算法（C++）代码练习（PTA题目）</title>
    <url>/blog/2018/03/10/e6-95-b0-e6-8d-ae-e7-bb-93-e6-9e-84-e4-b8-8e-e7-ae-97-e6-b3-95-ef-bc-88c-ef-bc-89-e4-bb-a3-e7-a0-81-e7-bb-83-e4-b9-a0-ef-bc-88pta-e9-a2-98-e7-9b-ae-ef-bc-89/</url>
    <content><![CDATA[<p><em>所有代码均由Microsoft Visual Studio 2015编译通过</em>      </p>
<h4 id="在线算法输出N个整数的最大子列和"><a href="#在线算法输出N个整数的最大子列和" class="headerlink" title="在线算法输出N个整数的最大子列和"></a>在线算法输出N个整数的最大子列和</h4><p> </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxSubSum</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> thisSum = <span class="number">0</span>, maxSum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        thisSum += a[i];</span><br><span class="line">        <span class="keyword">if</span> (thisSum &gt; maxSum) &#123;</span><br><span class="line">            maxSum = thisSum;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (thisSum &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            thisSum = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxSum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, *a, sum;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入数列长度：\n"</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    a = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入数列：\n"</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    sum = maxSubSum(a, n);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"最大子列和为："</span> &lt;&lt; sum &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>   </p>
<h4 id="在线算法输出N个整数的最大子列和及其首尾项"><a href="#在线算法输出N个整数的最大子列和及其首尾项" class="headerlink" title="在线算法输出N个整数的最大子列和及其首尾项"></a>在线算法输出N个整数的最大子列和及其首尾项</h4><p> </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxSubSumPrint</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> thisSum = <span class="number">0</span>, maxSum = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> head, rear, flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> maxHead = <span class="number">0</span>, maxRear = n - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        thisSum += a[i];</span><br><span class="line">        <span class="keyword">if</span> (flag == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[i] &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                head = rear = i;</span><br><span class="line">                flag = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            rear++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (thisSum &gt; maxSum) &#123;</span><br><span class="line">            maxSum = thisSum;</span><br><span class="line">            maxHead = head;</span><br><span class="line">            maxRear = rear;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (thisSum &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            thisSum = <span class="number">0</span>;</span><br><span class="line">            flag = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (maxSum == <span class="number">-1</span>) &#123;</span><br><span class="line">        maxSum = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"最大子列和为："</span> &lt;&lt; maxSum &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"最大子列头数字为"</span> &lt;&lt; a[maxHead] &lt;&lt; <span class="string">"  尾数字为"</span> &lt;&lt; a[maxRear] &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">    <span class="keyword">return</span> maxSum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, *a;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入数列长度：\n"</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    a = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入数列：\n"</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    maxSubSumPrint(a, n);</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>   </p>
<h4 id="使用链表输出两个一元多项式的乘积与和"><a href="#使用链表输出两个一元多项式的乘积与和" class="headerlink" title="使用链表输出两个一元多项式的乘积与和"></a>使用链表输出两个一元多项式的乘积与和</h4><p> </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PolyNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> coef;</span><br><span class="line">    <span class="keyword">int</span> expo;</span><br><span class="line">    PolyNode *nextNode;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">PolyNode* <span class="title">inputPoly</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    PolyNode *poly = <span class="keyword">new</span> PolyNode;</span><br><span class="line">    PolyNode *p = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"请以指数递降顺序输入各项系数与指数（以空格分开）：\n"</span>;</span><br><span class="line">    p = poly;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; p-&gt;coef;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; p-&gt;expo;</span><br><span class="line">    <span class="keyword">while</span> (--n) &#123;</span><br><span class="line">        p-&gt;nextNode = <span class="keyword">new</span> PolyNode;</span><br><span class="line">        p = p-&gt;nextNode;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; p-&gt;coef;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; p-&gt;expo;</span><br><span class="line">    &#125;</span><br><span class="line">    p-&gt;nextNode = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> poly;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">PolyNode* <span class="title">add</span><span class="params">(PolyNode* p1, PolyNode* p2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    PolyNode* p = <span class="keyword">new</span> PolyNode;</span><br><span class="line">    p-&gt;nextNode = <span class="keyword">new</span> PolyNode;</span><br><span class="line">    PolyNode* p0 = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">if</span> (p1 || p2) &#123;</span><br><span class="line">        p0 = p-&gt;nextNode;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (p1&amp;&amp;p2) &#123;</span><br><span class="line">        p = p-&gt;nextNode;</span><br><span class="line">        <span class="keyword">if</span> (p1-&gt;expo &gt; p2-&gt;expo) &#123;</span><br><span class="line">            p-&gt;expo = p1-&gt;expo;</span><br><span class="line">            p-&gt;coef = p1-&gt;coef;</span><br><span class="line">            p1 = p1-&gt;nextNode;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p1-&gt;expo &lt; p2-&gt;expo) &#123;</span><br><span class="line">            p-&gt;expo = p2-&gt;expo;</span><br><span class="line">            p-&gt;coef = p2-&gt;coef;</span><br><span class="line">            p2 = p2-&gt;nextNode;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            p-&gt;expo = p1-&gt;expo;</span><br><span class="line">            p-&gt;coef = p1-&gt;coef + p2-&gt;coef;</span><br><span class="line">            p1 = p1-&gt;nextNode;</span><br><span class="line">            p2 = p2-&gt;nextNode;</span><br><span class="line">        &#125;</span><br><span class="line">        p-&gt;nextNode = <span class="keyword">new</span> PolyNode;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (p1) &#123;</span><br><span class="line">        p = p-&gt;nextNode;</span><br><span class="line">        p-&gt;expo = p1-&gt;expo;</span><br><span class="line">        p-&gt;coef = p1-&gt;coef;</span><br><span class="line">        p1 = p1-&gt;nextNode;</span><br><span class="line">        p-&gt;nextNode = <span class="keyword">new</span> PolyNode;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (p2) &#123;</span><br><span class="line">        p = p-&gt;nextNode;</span><br><span class="line">        p-&gt;expo = p2-&gt;expo;</span><br><span class="line">        p-&gt;coef = p2-&gt;coef;</span><br><span class="line">        p2 = p2-&gt;nextNode;</span><br><span class="line">        p-&gt;nextNode = <span class="keyword">new</span> PolyNode;</span><br><span class="line">    &#125;</span><br><span class="line">    p-&gt;nextNode = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> p0;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">PolyNode* <span class="title">mult</span><span class="params">(PolyNode* p1, PolyNode* p2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    PolyNode *p = <span class="literal">NULL</span>;</span><br><span class="line">    PolyNode *t = <span class="keyword">new</span> PolyNode;</span><br><span class="line">    t-&gt;nextNode = <span class="literal">NULL</span>;</span><br><span class="line">    PolyNode \*i = p1, \*j = p2;</span><br><span class="line">    <span class="keyword">while</span> (i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i-&gt;coef) &#123;</span><br><span class="line">            j = p2;</span><br><span class="line">            <span class="keyword">while</span> (j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (j-&gt;coef) &#123;</span><br><span class="line">                    t-&gt;coef = i-&gt;coef*j-&gt;coef;</span><br><span class="line">                    t-&gt;expo = i-&gt;expo + j-&gt;expo;</span><br><span class="line">                    p = add(p, t);</span><br><span class="line">                &#125;</span><br><span class="line">                j = j-&gt;nextNode;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        i = i-&gt;nextNode;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printPoly</span><span class="params">(PolyNode* p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (p) &#123;</span><br><span class="line">        <span class="keyword">if</span> (p-&gt;coef) &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; p-&gt;coef &lt;&lt; <span class="string">' '</span> &lt;&lt; p-&gt;expo &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">            flag = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        p = p-&gt;nextNode;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"0 0"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n1, n2;</span><br><span class="line">    PolyNode \*p1, \*p2, \*padd, \*pmult;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入第一个多项式非零项项数：\n"</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n1;</span><br><span class="line">    p1 = inputPoly(n1);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入第二个多项式非零项项数：\n"</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n2;</span><br><span class="line">    p2 = inputPoly(n2);</span><br><span class="line">    padd = add(p1, p2);</span><br><span class="line">    pmult = mult(p1, p2);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"和多项式的非零项为：\n"</span>;</span><br><span class="line">    printPoly(padd);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"乘积多项式的非零项为：\n"</span>;</span><br><span class="line">    printPoly(pmult);</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>   </p>
<h4 id="以k为单位反转抽象链表"><a href="#以k为单位反转抽象链表" class="headerlink" title="以k为单位反转抽象链表"></a>以k为单位反转抽象链表</h4><p> </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> Data;</span><br><span class="line">    <span class="keyword">int</span> Next;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">input</span><span class="params">(Node a[], <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; i;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a[i].Data &gt;&gt; a[i].Next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">count</span><span class="params">(Node a[], <span class="keyword">int</span> h)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>, p = h;</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        i++;</span><br><span class="line">        p = a[p].Next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">reverse</span><span class="params">(Node a[], <span class="keyword">int</span>&amp; h, <span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, i = <span class="number">0</span>;</span><br><span class="line">    n = count(a, h);</span><br><span class="line">    <span class="keyword">int</span> p, h1, h2, t1, t2;</span><br><span class="line">    p = h1 = h2 = h;</span><br><span class="line">    t1 = a[p].Next;</span><br><span class="line">    t2 = a[t1].Next;</span><br><span class="line">    <span class="keyword">while</span> (++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &gt; n / k) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; k - <span class="number">1</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            a[t1].Next = p;</span><br><span class="line">            p = t1;</span><br><span class="line">            t1 = t2;</span><br><span class="line">            t2 = a[t2].Next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            h = p;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            a[h1].Next = p;</span><br><span class="line">            h1 = h2;</span><br><span class="line">        &#125;</span><br><span class="line">        p = t1;</span><br><span class="line">        t1 = t2;</span><br><span class="line">        t2 = a[t2].Next;</span><br><span class="line">        h2 = p;</span><br><span class="line">    &#125;</span><br><span class="line">    a[h1].Next = p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(Node a[], <span class="keyword">int</span> h)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> p = h;</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="number">-1</span> &amp;&amp; a[p].Next != <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; setfill(<span class="string">'0'</span>) &lt;&lt; setw(<span class="number">5</span>) &lt;&lt; p &lt;&lt; <span class="string">' '</span> &lt;&lt; a[p].Data &lt;&lt; <span class="string">' '</span> &lt;&lt; setw(<span class="number">5</span>) &lt;&lt; a[p].Next &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">        p = a[p].Next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (a[p].Next == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; setfill(<span class="string">'0'</span>) &lt;&lt; setw(<span class="number">5</span>) &lt;&lt; p &lt;&lt; <span class="string">' '</span> &lt;&lt; a[p].Data &lt;&lt; <span class="string">' '</span> &lt;&lt; a[p].Next &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> head, n, k;</span><br><span class="line">    Node Memory[<span class="number">100000</span>];</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入头地址、节点总数、反转单位长度：\n"</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; head &gt;&gt; n &gt;&gt; k;</span><br><span class="line">    input(Memory, n);</span><br><span class="line">    reverse(Memory, head, k);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"反转后结果：\n"</span>;</span><br><span class="line">    print(Memory, head);</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="判断一组数是否为可能的出栈结果"><a href="#判断一组数是否为可能的出栈结果" class="headerlink" title="判断一组数是否为可能的出栈结果"></a>判断一组数是否为可能的出栈结果</h4><p> </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> Data;</span><br><span class="line">    Node* Next;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(Node* &amp;top, <span class="keyword">int</span>&amp; sum, <span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Node* temp = <span class="keyword">new</span> Node;</span><br><span class="line">    temp-&gt;Next = top;</span><br><span class="line">    top = temp;</span><br><span class="line">    top-&gt;Data = a;</span><br><span class="line">    sum++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pop</span><span class="params">(Node* &amp;top, <span class="keyword">int</span>&amp; sum)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Node* temp = top;</span><br><span class="line">    top = top-&gt;Next;</span><br><span class="line">    temp-&gt;Next = <span class="literal">NULL</span>;</span><br><span class="line">    sum--;</span><br><span class="line">    <span class="keyword">return</span> temp-&gt;Data;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp = <span class="number">0</span>, sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">int</span> result = <span class="number">1</span>;</span><br><span class="line">    Node* top = <span class="keyword">new</span> Node;</span><br><span class="line">    top-&gt;Next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">        <span class="keyword">if</span> (x &lt; temp) &#123;</span><br><span class="line">            <span class="keyword">if</span> (top-&gt;Data != x) &#123;</span><br><span class="line">                result = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                pop(top, sum);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (++temp != x) &#123;</span><br><span class="line">            push(top, sum, temp);</span><br><span class="line">            <span class="keyword">if</span> (sum &gt; m - <span class="number">1</span>) &#123;</span><br><span class="line">                result = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m, n, k;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; m &gt;&gt; n &gt;&gt; k;</span><br><span class="line">    <span class="keyword">int</span> *result;</span><br><span class="line">    result = <span class="keyword">new</span> <span class="keyword">int</span>[k];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        result[i] = check(m, n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">switch</span> (result[i])</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:<span class="built_in">cout</span> &lt;&lt; <span class="string">"NO\n"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:<span class="built_in">cout</span> &lt;&lt; <span class="string">"YES\n"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="递归法判断树的同构"><a href="#递归法判断树的同构" class="headerlink" title="递归法判断树的同构"></a>递归法判断树的同构</h4><p> </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">char</span> data;</span><br><span class="line">    <span class="keyword">int</span> left;</span><br><span class="line">    <span class="keyword">int</span> right;</span><br><span class="line">    <span class="keyword">int</span> isRoot;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">input</span><span class="params">(Node *&amp;a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">int</span> root;</span><br><span class="line">    <span class="keyword">char</span> left, right;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">if</span> (!n) &#123;</span><br><span class="line">        a = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    a = <span class="keyword">new</span> Node[n];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a[i].data &gt;&gt; left &gt;&gt; right;</span><br><span class="line">        a[i].isRoot = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (left == <span class="string">'-'</span>) &#123;</span><br><span class="line">            a[i].left = <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            a[i].left = <span class="keyword">int</span>(left) - <span class="number">48</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (right == <span class="string">'-'</span>) &#123;</span><br><span class="line">            a[i].right = <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            a[i].right = <span class="keyword">int</span>(right) - <span class="number">48</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i].left != <span class="number">-1</span>) &#123;</span><br><span class="line">            a[a[i].left].isRoot = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (a[i].right != <span class="number">-1</span>) &#123;</span><br><span class="line">            a[a[i].right].isRoot = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i].isRoot) &#123;</span><br><span class="line">            root = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">compare</span><span class="params">(Node* a, Node* b, <span class="keyword">int</span> aRoot, <span class="keyword">int</span> bRoot)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!a&amp;&amp;!b) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (!a || !b) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (aRoot == <span class="number">-1</span> &amp;&amp; bRoot == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (aRoot == <span class="number">-1</span> || bRoot == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (a[aRoot].data != b[bRoot].data) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (compare(a, b, a[aRoot].left, b[bRoot].left)) &#123;</span><br><span class="line">        <span class="keyword">return</span> compare(a, b, a[aRoot].right, b[bRoot].right);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (compare(a, b, a[aRoot].left, b[bRoot].right)) &#123;</span><br><span class="line">        <span class="keyword">return</span> compare(a, b, a[aRoot].right, b[bRoot].left);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Node \*a, \*b;</span><br><span class="line">    <span class="keyword">int</span> aRoot, bRoot;</span><br><span class="line">    <span class="keyword">int</span> result;</span><br><span class="line">    aRoot = input(a);</span><br><span class="line">    bRoot = input(b);</span><br><span class="line">    result = compare(a, b, aRoot, bRoot);</span><br><span class="line">    <span class="keyword">if</span> (result == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Yes"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"No"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="层序遍历打印叶子结点"><a href="#层序遍历打印叶子结点" class="headerlink" title="层序遍历打印叶子结点"></a>层序遍历打印叶子结点</h4><p> </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> left;</span><br><span class="line">    <span class="keyword">int</span> right;</span><br><span class="line">    <span class="keyword">int</span> isRoot;</span><br><span class="line">    <span class="keyword">int</span> isLeaf;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QueueNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    QueueNode* next;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">input</span><span class="params">(Node *&amp;a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">int</span> root;</span><br><span class="line">    <span class="keyword">char</span> left, right;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">if</span> (!n) &#123;</span><br><span class="line">        a = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    a = <span class="keyword">new</span> Node[n];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; left &gt;&gt; right;</span><br><span class="line">        a[i].isRoot = <span class="number">1</span>;</span><br><span class="line">        a[i].isLeaf = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (left == <span class="string">'-'</span>) &#123;</span><br><span class="line">            a[i].left = <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            a[i].left = <span class="keyword">int</span>(left) - <span class="keyword">int</span>(<span class="string">'0'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (right == <span class="string">'-'</span>) &#123;</span><br><span class="line">            a[i].right = <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            a[i].right = <span class="keyword">int</span>(right) - <span class="keyword">int</span>(<span class="string">'0'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i].left != <span class="number">-1</span>) &#123;</span><br><span class="line">            a[a[i].left].isRoot = <span class="number">0</span>;</span><br><span class="line">            a[i].isLeaf = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (a[i].right != <span class="number">-1</span>) &#123;</span><br><span class="line">            a[a[i].right].isRoot = <span class="number">0</span>;</span><br><span class="line">            a[i].isLeaf = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i].isRoot) &#123;</span><br><span class="line">            root = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(<span class="keyword">int</span> a, QueueNode*&amp; rear)</span> </span>&#123;</span><br><span class="line">    rear-&gt;a = a;</span><br><span class="line">    rear-&gt;next = <span class="keyword">new</span> QueueNode;</span><br><span class="line">    rear = rear-&gt;next;</span><br><span class="line">    rear-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dequeue</span><span class="params">(QueueNode*&amp; front)</span> </span>&#123;</span><br><span class="line">    QueueNode* temp = front;</span><br><span class="line">    front = front-&gt;next;</span><br><span class="line">    temp-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> temp-&gt;a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printLeaf</span><span class="params">(Node *tree, <span class="keyword">int</span> root)</span> </span>&#123;</span><br><span class="line">    QueueNode \*front, \*rear;</span><br><span class="line">    <span class="keyword">int</span> a, flag = <span class="number">0</span>;</span><br><span class="line">    front = rear = <span class="keyword">new</span> QueueNode;</span><br><span class="line">    rear-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    enqueue(root, rear);</span><br><span class="line">    <span class="keyword">while</span> (front != rear) &#123;</span><br><span class="line">        a = dequeue(front);</span><br><span class="line">        <span class="keyword">if</span> (tree[a].isLeaf) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; a;</span><br><span class="line">                flag = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; a;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (tree[a].left != <span class="number">-1</span>) &#123;</span><br><span class="line">            enqueue(tree[a].left, rear);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (tree[a].right != <span class="number">-1</span>) &#123;</span><br><span class="line">            enqueue(tree[a].right, rear);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Node *tree;</span><br><span class="line">    <span class="keyword">int</span> root;</span><br><span class="line">    root = input(tree);</span><br><span class="line">    printLeaf(tree, root);</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>      </p>
<p>2016年3月</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
  </entry>
  <entry>
    <title>数据结构与算法（C++）代码练习（图）</title>
    <url>/blog/2017/11/27/e6-95-b0-e6-8d-ae-e7-bb-93-e6-9e-84-e4-b8-8e-e7-ae-97-e6-b3-95-ef-bc-88c-ef-bc-89-e4-bb-a3-e7-a0-81-e7-bb-83-e4-b9-a0/</url>
    <content><![CDATA[<p><em>所有代码均由Microsoft Visual Studio 2015编译通过</em>      </p>
<h4 id="图的遍历DFS和BFS"><a href="#图的遍历DFS和BFS" class="headerlink" title="图的遍历DFS和BFS"></a>图的遍历DFS和BFS</h4><p> </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 16</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">listNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    listNode* next;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QueueNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    QueueNode* next;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(<span class="keyword">int</span> a, QueueNode*&amp; rear)</span> </span>&#123;</span><br><span class="line">    rear-&gt;a = a;</span><br><span class="line">    rear-&gt;next = <span class="keyword">new</span> QueueNode;</span><br><span class="line">    rear = rear-&gt;next;</span><br><span class="line">    rear-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dequeue</span><span class="params">(QueueNode*&amp; front)</span> </span>&#123;</span><br><span class="line">    QueueNode* temp = front;</span><br><span class="line">    front = front-&gt;next;</span><br><span class="line">    temp-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> temp-&gt;a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inputLesson</span><span class="params">(listNode* head[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    head[<span class="number">0</span>] = <span class="literal">NULL</span>;</span><br><span class="line">    head[<span class="number">1</span>] = <span class="keyword">new</span> listNode;</span><br><span class="line">    head[<span class="number">1</span>]-&gt;data = <span class="number">3</span>;</span><br><span class="line">    head[<span class="number">1</span>]-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    head[<span class="number">2</span>] = <span class="keyword">new</span> listNode;</span><br><span class="line">    head[<span class="number">2</span>]-&gt;data = <span class="number">3</span>;</span><br><span class="line">    head[<span class="number">2</span>]-&gt;next = <span class="keyword">new</span> listNode;</span><br><span class="line">    head[<span class="number">2</span>]-&gt;next-&gt;data = <span class="number">13</span>;</span><br><span class="line">    head[<span class="number">2</span>]-&gt;next-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    head[<span class="number">3</span>] = <span class="keyword">new</span> listNode;</span><br><span class="line">    head[<span class="number">3</span>]-&gt;data = <span class="number">7</span>;</span><br><span class="line">    head[<span class="number">3</span>]-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    head[<span class="number">4</span>] = <span class="keyword">new</span> listNode;</span><br><span class="line">    head[<span class="number">4</span>]-&gt;data = <span class="number">5</span>;</span><br><span class="line">    head[<span class="number">4</span>]-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    head[<span class="number">5</span>] = <span class="keyword">new</span> listNode;</span><br><span class="line">    head[<span class="number">5</span>]-&gt;data = <span class="number">6</span>;</span><br><span class="line">    head[<span class="number">5</span>]-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    head[<span class="number">6</span>] = <span class="keyword">new</span> listNode;</span><br><span class="line">    head[<span class="number">6</span>]-&gt;data = <span class="number">15</span>;</span><br><span class="line">    head[<span class="number">6</span>]-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    head[<span class="number">7</span>] = <span class="keyword">new</span> listNode;</span><br><span class="line">    head[<span class="number">7</span>]-&gt;data = <span class="number">10</span>;</span><br><span class="line">    head[<span class="number">7</span>]-&gt;next = <span class="keyword">new</span> listNode;</span><br><span class="line">    head[<span class="number">7</span>]-&gt;next-&gt;data = <span class="number">11</span>;</span><br><span class="line">    head[<span class="number">7</span>]-&gt;next-&gt;next = <span class="keyword">new</span> listNode;</span><br><span class="line">    head[<span class="number">7</span>]-&gt;next-&gt;next-&gt;data = <span class="number">12</span>;</span><br><span class="line">    head[<span class="number">7</span>]-&gt;next-&gt;next-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    head[<span class="number">8</span>] = <span class="keyword">new</span> listNode;</span><br><span class="line">    head[<span class="number">8</span>]-&gt;data = <span class="number">9</span>;</span><br><span class="line">    head[<span class="number">8</span>]-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    head[<span class="number">9</span>] = <span class="keyword">new</span> listNode;</span><br><span class="line">    head[<span class="number">9</span>]-&gt;data = <span class="number">10</span>;</span><br><span class="line">    head[<span class="number">9</span>]-&gt;next = <span class="keyword">new</span> listNode;</span><br><span class="line">    head[<span class="number">9</span>]-&gt;next-&gt;data = <span class="number">11</span>;</span><br><span class="line">    head[<span class="number">9</span>]-&gt;next-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    head[<span class="number">10</span>] = <span class="keyword">new</span> listNode;</span><br><span class="line">    head[<span class="number">10</span>]-&gt;data = <span class="number">14</span>;</span><br><span class="line">    head[<span class="number">10</span>]-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    head[<span class="number">11</span>] = <span class="literal">NULL</span>;</span><br><span class="line">    head[<span class="number">12</span>] = <span class="literal">NULL</span>;</span><br><span class="line">    head[<span class="number">13</span>] = <span class="literal">NULL</span>;</span><br><span class="line">    head[<span class="number">14</span>] = <span class="literal">NULL</span>;</span><br><span class="line">    head[<span class="number">15</span>] = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(listNode* <span class="built_in">list</span>[], <span class="keyword">int</span> index, <span class="keyword">int</span> visited[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    listNode* p;</span><br><span class="line">    <span class="keyword">if</span> (visited[index]) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; index;</span><br><span class="line">    visited[index] = <span class="number">1</span>;</span><br><span class="line">    p = <span class="built_in">list</span>[index];</span><br><span class="line">    <span class="keyword">while</span> (p) &#123;</span><br><span class="line">        DFS(<span class="built_in">list</span>, p-&gt;data, visited);</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFS</span><span class="params">(listNode* <span class="built_in">list</span>[], <span class="keyword">int</span> index, <span class="keyword">int</span> visited[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> v;</span><br><span class="line">    listNode* p;</span><br><span class="line">    QueueNode* front,* rear;</span><br><span class="line">    front = rear = <span class="keyword">new</span> QueueNode;</span><br><span class="line">    rear-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    enqueue(index, rear);</span><br><span class="line">    visited[index] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (front != rear) &#123;</span><br><span class="line">        v = dequeue(front);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; v;</span><br><span class="line">        p = <span class="built_in">list</span>[v];</span><br><span class="line">        <span class="keyword">while</span> (p) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!(visited[p-&gt;data])) &#123;</span><br><span class="line">                enqueue(p-&gt;data, rear);</span><br><span class="line">                visited[p-&gt;data] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">resetVisited</span><span class="params">(<span class="keyword">int</span> visited[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">        visited[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    listNode* <span class="built_in">list</span>[N];</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">int</span> visited[N];</span><br><span class="line">    inputLesson(<span class="built_in">list</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入深度优先搜索起始点序号：\n"</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    resetVisited(visited);</span><br><span class="line">    DFS(<span class="built_in">list</span>, n, visited);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入广度优先搜索起始点序号：\n"</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    resetVisited(visited);</span><br><span class="line">    BFS(<span class="built_in">list</span>, n, visited);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>   </p>
<h4 id="最小生成树Prim算法"><a href="#最小生成树Prim算法" class="headerlink" title="最小生成树Prim算法"></a>最小生成树Prim算法</h4><p> </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 8</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 100000</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AdjList</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="keyword">int</span> dist;</span><br><span class="line">    AdjList* next;</span><br><span class="line">    AdjList() &#123;</span><br><span class="line">        next = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vertex</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line">    AdjList* adj;</span><br><span class="line">    <span class="keyword">int</span> dist;</span><br><span class="line">    <span class="keyword">int</span> visited;</span><br><span class="line">    <span class="keyword">int</span> path;</span><br><span class="line">    Vertex() &#123;</span><br><span class="line">        adj = <span class="literal">NULL</span>;</span><br><span class="line">        path = <span class="number">0</span>;</span><br><span class="line">        visited = <span class="number">0</span>;</span><br><span class="line">        dist = MAX;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> v;</span><br><span class="line">    <span class="keyword">int</span> w;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printEdge</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; v &lt;&lt; <span class="string">'-'</span> &lt;&lt; w &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Heap</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> size;</span><br><span class="line">    Vertex a[N];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">checkOdd</span><span class="params">(Heap&amp; minHeap)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!(minHeap.size % <span class="number">2</span>)) &#123;</span><br><span class="line">        minHeap.a[minHeap.size + <span class="number">1</span>].dist = MAX;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">incertMinHeap</span><span class="params">(Vertex v, Heap&amp; minHeap)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> hole = ++minHeap.size;</span><br><span class="line">    <span class="keyword">while</span> (hole != <span class="number">1</span> &amp;&amp; v.dist &lt; minHeap.a[hole / <span class="number">2</span>].dist) &#123;</span><br><span class="line">        minHeap.a[hole] = minHeap.a[hole / <span class="number">2</span>];</span><br><span class="line">        hole = hole / <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    minHeap.a[hole] = v;</span><br><span class="line">    checkOdd(minHeap);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Vertex <span class="title">deleteMin</span><span class="params">(Heap&amp; minHeap)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Vertex min = minHeap.a[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span> hole = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (hole &lt;= minHeap.size / <span class="number">2</span> &amp;&amp; (minHeap.a[minHeap.size].dist &gt; minHeap.a[hole * <span class="number">2</span> + <span class="number">1</span>].dist || minHeap.a[minHeap.size].dist &gt; minHeap.a[hole * <span class="number">2</span>].dist)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (minHeap.a[hole * <span class="number">2</span> + <span class="number">1</span>].dist &lt; minHeap.a[hole * <span class="number">2</span>].dist) &#123;</span><br><span class="line">            minHeap.a[hole] = minHeap.a[hole * <span class="number">2</span> + <span class="number">1</span>];</span><br><span class="line">            hole = hole * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            minHeap.a[hole] = minHeap.a[hole * <span class="number">2</span>];</span><br><span class="line">            hole = hole * <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    minHeap.a[hole] = minHeap.a[minHeap.size];</span><br><span class="line">    minHeap.size--;</span><br><span class="line">    checkOdd(minHeap);</span><br><span class="line">    <span class="keyword">return</span> min;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">input</span><span class="params">(Vertex &amp;v, <span class="keyword">int</span> data, <span class="keyword">int</span> dist)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    AdjList*&amp; p = v.adj;</span><br><span class="line">    <span class="keyword">if</span> (data == <span class="number">0</span> &amp;&amp; dist == <span class="number">0</span>) &#123;</span><br><span class="line">        p = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!p) &#123;</span><br><span class="line">        p = <span class="keyword">new</span> AdjList;</span><br><span class="line">        p-&gt;data = data;</span><br><span class="line">        p-&gt;dist = dist;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        AdjList* temp = p;</span><br><span class="line">        <span class="keyword">while</span> (p-&gt;next) &#123;</span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        p-&gt;next = <span class="keyword">new</span> AdjList;</span><br><span class="line">        p-&gt;next-&gt;data = data;</span><br><span class="line">        p-&gt;next-&gt;dist = dist;</span><br><span class="line">        p = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inputSample</span><span class="params">(Vertex v[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        v[i].id = i;</span><br><span class="line">    &#125;</span><br><span class="line">    input(v[<span class="number">1</span>], <span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">    input(v[<span class="number">1</span>], <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">    input(v[<span class="number">1</span>], <span class="number">4</span>, <span class="number">1</span>);</span><br><span class="line">    input(v[<span class="number">2</span>], <span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">    input(v[<span class="number">2</span>], <span class="number">4</span>, <span class="number">3</span>);</span><br><span class="line">    input(v[<span class="number">2</span>], <span class="number">5</span>, <span class="number">10</span>);</span><br><span class="line">    input(v[<span class="number">3</span>], <span class="number">1</span>, <span class="number">4</span>);</span><br><span class="line">    input(v[<span class="number">3</span>], <span class="number">4</span>, <span class="number">2</span>);</span><br><span class="line">    input(v[<span class="number">3</span>], <span class="number">6</span>, <span class="number">5</span>);</span><br><span class="line">    input(v[<span class="number">4</span>], <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    input(v[<span class="number">4</span>], <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">    input(v[<span class="number">4</span>], <span class="number">3</span>, <span class="number">2</span>);</span><br><span class="line">    input(v[<span class="number">4</span>], <span class="number">5</span>, <span class="number">7</span>);</span><br><span class="line">    input(v[<span class="number">4</span>], <span class="number">6</span>, <span class="number">8</span>);</span><br><span class="line">    input(v[<span class="number">4</span>], <span class="number">7</span>, <span class="number">4</span>);</span><br><span class="line">    input(v[<span class="number">5</span>], <span class="number">2</span>, <span class="number">10</span>);</span><br><span class="line">    input(v[<span class="number">5</span>], <span class="number">4</span>, <span class="number">7</span>);</span><br><span class="line">    input(v[<span class="number">5</span>], <span class="number">7</span>, <span class="number">6</span>);</span><br><span class="line">    input(v[<span class="number">6</span>], <span class="number">3</span>, <span class="number">5</span>);</span><br><span class="line">    input(v[<span class="number">6</span>], <span class="number">4</span>, <span class="number">8</span>);</span><br><span class="line">    input(v[<span class="number">6</span>], <span class="number">7</span>, <span class="number">1</span>);</span><br><span class="line">    input(v[<span class="number">7</span>], <span class="number">4</span>, <span class="number">4</span>);</span><br><span class="line">    input(v[<span class="number">7</span>], <span class="number">5</span>, <span class="number">6</span>);</span><br><span class="line">    input(v[<span class="number">7</span>], <span class="number">6</span>, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Prim</span><span class="params">(Vertex &amp;s, Vertex g[], Edge MST[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    Vertex v;</span><br><span class="line">    AdjList* p;</span><br><span class="line">    Heap minHeap;</span><br><span class="line">    minHeap.size = <span class="number">0</span>;</span><br><span class="line">    s.dist = <span class="number">0</span>;</span><br><span class="line">    incertMinHeap(s, minHeap);</span><br><span class="line">    <span class="keyword">while</span> (minHeap.size) &#123;</span><br><span class="line">        v = deleteMin(minHeap);</span><br><span class="line">        <span class="keyword">while</span> (g[v.id].visited) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!minHeap.size) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            v = deleteMin(minHeap);</span><br><span class="line">        &#125;</span><br><span class="line">        g[v.id].visited = <span class="number">1</span>;</span><br><span class="line">        g[v.id].dist = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (v.path) &#123;</span><br><span class="line">            i++;</span><br><span class="line">            MST[i].v = v.path;</span><br><span class="line">            MST[i].w = v.id;</span><br><span class="line">        &#125;</span><br><span class="line">        p = v.adj;</span><br><span class="line">        <span class="keyword">while</span> (p) &#123;</span><br><span class="line">            <span class="keyword">if</span> (g[p-&gt;data].visited == <span class="number">0</span> &amp;&amp; p-&gt;dist &lt; g[p-&gt;data].dist) &#123;</span><br><span class="line">                g[p-&gt;data].dist = p-&gt;dist ;</span><br><span class="line">                g[p-&gt;data].path = v.id;</span><br><span class="line">                incertMinHeap(g[p-&gt;data], minHeap);</span><br><span class="line">            &#125;</span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">check</span><span class="params">(Vertex v[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    AdjList* p;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">        p = v[i].adj;</span><br><span class="line">        <span class="keyword">while</span> (p) &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; p-&gt;data &lt;&lt; <span class="string">' '</span> &lt;&lt; p-&gt;dist &lt;&lt; <span class="string">' '</span> &lt;&lt; p-&gt;next &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">Vertex v[N];</span><br><span class="line">Edge MST[N - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">inputSample(v);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入源点序号：\n"</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">Prim(v[n], v, MST);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"最小生成树为：\n"</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; N - <span class="number">1</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">    MST[i].printEdge();</span><br><span class="line">&#125;</span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>   </p>
<h4 id="最小生成树Kruskal算法"><a href="#最小生成树Kruskal算法" class="headerlink" title="最小生成树Kruskal算法"></a>最小生成树Kruskal算法</h4><p> </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 8</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 100000</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AdjList</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="keyword">int</span> dist;</span><br><span class="line">    AdjList* next;</span><br><span class="line">    AdjList() &#123;</span><br><span class="line">        next = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vertex</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line">    AdjList* adj;</span><br><span class="line">    <span class="keyword">int</span> root;</span><br><span class="line">    <span class="keyword">int</span> visited;</span><br><span class="line"></span><br><span class="line">```</span><br><span class="line">Vertex() &#123;</span><br><span class="line">    adj = <span class="literal">NULL</span>;</span><br><span class="line">    root = <span class="number">-1</span>;</span><br><span class="line">    visited = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">```</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> v;</span><br><span class="line">    <span class="keyword">int</span> w;</span><br><span class="line">    <span class="keyword">int</span> l;</span><br><span class="line">    Edge(<span class="keyword">int</span> v = <span class="number">0</span>, <span class="keyword">int</span> w = <span class="number">0</span>, <span class="keyword">int</span> l = <span class="number">0</span>) :v(v), w(w), l(l) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printEdge</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; v &lt;&lt; <span class="string">'-'</span> &lt;&lt; w &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Heap</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> size;</span><br><span class="line">    Edge a[N*(N - <span class="number">1</span>)];</span><br><span class="line">    Heap() &#123;</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">checkOdd</span><span class="params">(Heap&amp; minHeap)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!(minHeap.size % <span class="number">2</span>)) &#123;</span><br><span class="line">        minHeap.a[minHeap.size + <span class="number">1</span>].l = MAX;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">incertMinHeap</span><span class="params">(Edge e, Heap&amp; minHeap)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> hole = ++minHeap.size;</span><br><span class="line">    <span class="keyword">while</span> (hole != <span class="number">1</span> &amp;&amp; e.l &lt; minHeap.a[hole / <span class="number">2</span>].l) &#123;</span><br><span class="line">        minHeap.a[hole] = minHeap.a[hole / <span class="number">2</span>];</span><br><span class="line">        hole = hole / <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    minHeap.a[hole] = e;</span><br><span class="line">    checkOdd(minHeap);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Edge <span class="title">deleteMin</span><span class="params">(Heap&amp; minHeap)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Edge min = minHeap.a[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span> hole = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (hole &lt;= minHeap.size / <span class="number">2</span> &amp;&amp; (minHeap.a[minHeap.size].l &gt; minHeap.a[hole * <span class="number">2</span> + <span class="number">1</span>].l || minHeap.a[minHeap.size].l &gt; minHeap.a[hole * <span class="number">2</span>].l)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (minHeap.a[hole * <span class="number">2</span> + <span class="number">1</span>].l &lt; minHeap.a[hole * <span class="number">2</span>].l) &#123;</span><br><span class="line">            minHeap.a[hole] = minHeap.a[hole * <span class="number">2</span> + <span class="number">1</span>];</span><br><span class="line">            hole = hole * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            minHeap.a[hole] = minHeap.a[hole * <span class="number">2</span>];</span><br><span class="line">            hole = hole * <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    minHeap.a[hole] = minHeap.a[minHeap.size];</span><br><span class="line">    minHeap.size--;</span><br><span class="line">    checkOdd(minHeap);</span><br><span class="line">    <span class="keyword">return</span> min;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(Vertex v, Vertex g[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (v.root == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> v.id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> find(g[v.root], g);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">unionSet</span><span class="params">(<span class="keyword">int</span> r1, <span class="keyword">int</span> r2, Vertex g[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        g[r2].root = g[r1].id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">input</span><span class="params">(Vertex &amp;v, <span class="keyword">int</span> data, <span class="keyword">int</span> dist)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    AdjList*&amp; p = v.adj;</span><br><span class="line">    <span class="keyword">if</span> (data == <span class="number">0</span> &amp;&amp; dist == <span class="number">0</span>) &#123;</span><br><span class="line">        p = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!p) &#123;</span><br><span class="line">        p = <span class="keyword">new</span> AdjList;</span><br><span class="line">        p-&gt;data = data;</span><br><span class="line">        p-&gt;dist = dist;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        AdjList* temp = p;</span><br><span class="line">        <span class="keyword">while</span> (p-&gt;next) &#123;</span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        p-&gt;next = <span class="keyword">new</span> AdjList;</span><br><span class="line">        p-&gt;next-&gt;data = data;</span><br><span class="line">        p-&gt;next-&gt;dist = dist;</span><br><span class="line">        p = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inputSample</span><span class="params">(Vertex v[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        v[i].id = i;</span><br><span class="line">    &#125;</span><br><span class="line">    input(v[<span class="number">1</span>], <span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">    input(v[<span class="number">1</span>], <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">    input(v[<span class="number">1</span>], <span class="number">4</span>, <span class="number">1</span>);</span><br><span class="line">    input(v[<span class="number">2</span>], <span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">    input(v[<span class="number">2</span>], <span class="number">4</span>, <span class="number">3</span>);</span><br><span class="line">    input(v[<span class="number">2</span>], <span class="number">5</span>, <span class="number">10</span>);</span><br><span class="line">    input(v[<span class="number">3</span>], <span class="number">1</span>, <span class="number">4</span>);</span><br><span class="line">    input(v[<span class="number">3</span>], <span class="number">4</span>, <span class="number">2</span>);</span><br><span class="line">    input(v[<span class="number">3</span>], <span class="number">6</span>, <span class="number">5</span>);</span><br><span class="line">    input(v[<span class="number">4</span>], <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    input(v[<span class="number">4</span>], <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">    input(v[<span class="number">4</span>], <span class="number">3</span>, <span class="number">2</span>);</span><br><span class="line">    input(v[<span class="number">4</span>], <span class="number">5</span>, <span class="number">7</span>);</span><br><span class="line">    input(v[<span class="number">4</span>], <span class="number">6</span>, <span class="number">8</span>);</span><br><span class="line">    input(v[<span class="number">4</span>], <span class="number">7</span>, <span class="number">4</span>);</span><br><span class="line">    input(v[<span class="number">5</span>], <span class="number">2</span>, <span class="number">10</span>);</span><br><span class="line">    input(v[<span class="number">5</span>], <span class="number">4</span>, <span class="number">7</span>);</span><br><span class="line">    input(v[<span class="number">5</span>], <span class="number">7</span>, <span class="number">6</span>);</span><br><span class="line">    input(v[<span class="number">6</span>], <span class="number">3</span>, <span class="number">5</span>);</span><br><span class="line">    input(v[<span class="number">6</span>], <span class="number">4</span>, <span class="number">8</span>);</span><br><span class="line">    input(v[<span class="number">6</span>], <span class="number">7</span>, <span class="number">1</span>);</span><br><span class="line">    input(v[<span class="number">7</span>], <span class="number">4</span>, <span class="number">4</span>);</span><br><span class="line">    input(v[<span class="number">7</span>], <span class="number">5</span>, <span class="number">6</span>);</span><br><span class="line">    input(v[<span class="number">7</span>], <span class="number">6</span>, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Kruskal</span><span class="params">(Vertex g[], Edge MST[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Heap minHeap;</span><br><span class="line">    Edge e;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; N; i++) &#123;</span><br><span class="line">        AdjList* p = g[i].adj;</span><br><span class="line">        <span class="keyword">while</span> (p) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!g[p-&gt;data].visited) &#123;</span><br><span class="line">                <span class="function">Edge <span class="title">e</span><span class="params">(i, p-&gt;data, p-&gt;dist)</span></span>;</span><br><span class="line">                incertMinHeap(e, minHeap);</span><br><span class="line">            &#125;</span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        g[i].visited = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (minHeap.size) &#123;</span><br><span class="line">        e = deleteMin(minHeap);</span><br><span class="line">        <span class="keyword">int</span> r1 = find(g[e.v], g);</span><br><span class="line">        <span class="keyword">int</span> r2 = find(g[e.w], g);</span><br><span class="line">        <span class="keyword">if</span> (r1 != r2) &#123;</span><br><span class="line">            MST[++i] = e;</span><br><span class="line">            unionSet(r1, r2, g);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Vertex v[N];</span><br><span class="line">    Edge MST[N - <span class="number">1</span>];</span><br><span class="line">    inputSample(v);</span><br><span class="line">    Kruskal(v, MST);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"最小生成树为：\n"</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; N - <span class="number">1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        MST[i].printEdge();</span><br><span class="line">    &#125;</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>   </p>
<h4 id="基于最小堆的有权图单源最短路径Dijkstra算法"><a href="#基于最小堆的有权图单源最短路径Dijkstra算法" class="headerlink" title="基于最小堆的有权图单源最短路径Dijkstra算法"></a>基于最小堆的有权图单源最短路径Dijkstra算法</h4><p> </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 16</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 100000</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AdjList</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="keyword">int</span> dist;</span><br><span class="line">    AdjList* next;</span><br><span class="line">    AdjList() &#123;</span><br><span class="line">        next = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vertex</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line">    AdjList* adj;</span><br><span class="line">    <span class="keyword">int</span> dist;</span><br><span class="line">    <span class="keyword">int</span> visited;</span><br><span class="line">    <span class="keyword">int</span> path;</span><br><span class="line">    Vertex() &#123;</span><br><span class="line">        adj = <span class="literal">NULL</span>;</span><br><span class="line">        path = <span class="number">0</span>;</span><br><span class="line">        visited = <span class="number">0</span>;</span><br><span class="line">        dist = MAX;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Heap</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> size;</span><br><span class="line">    Vertex a[N];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">checkOdd</span><span class="params">(Heap&amp; minHeap)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!(minHeap.size % <span class="number">2</span>)) &#123;</span><br><span class="line">        minHeap.a[minHeap.size + <span class="number">1</span>].dist = MAX;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">incertMinHeap</span><span class="params">(Vertex v, Heap&amp; minHeap)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> hole = ++minHeap.size;</span><br><span class="line">    <span class="keyword">while</span> (hole != <span class="number">1</span> &amp;&amp; v.dist &lt; minHeap.a[hole / <span class="number">2</span>].dist) &#123;</span><br><span class="line">        minHeap.a[hole] = minHeap.a[hole / <span class="number">2</span>];</span><br><span class="line">        hole = hole / <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    minHeap.a[hole] = v;</span><br><span class="line">    checkOdd(minHeap);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Vertex <span class="title">deleteMin</span><span class="params">(Heap&amp; minHeap)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Vertex min = minHeap.a[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span> hole = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (hole &lt;= minHeap.size / <span class="number">2</span> &amp;&amp; (minHeap.a[minHeap.size].dist &gt; minHeap.a[hole * <span class="number">2</span> + <span class="number">1</span>].dist || minHeap.a[minHeap.size].dist &gt; minHeap.a[hole * <span class="number">2</span>].dist)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (minHeap.a[hole * <span class="number">2</span> + <span class="number">1</span>].dist &lt; minHeap.a[hole * <span class="number">2</span>].dist) &#123;</span><br><span class="line">            minHeap.a[hole] = minHeap.a[hole * <span class="number">2</span> + <span class="number">1</span>];</span><br><span class="line">            hole = hole * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            minHeap.a[hole] = minHeap.a[hole * <span class="number">2</span>];</span><br><span class="line">            hole = hole * <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    minHeap.a[hole] = minHeap.a[minHeap.size];</span><br><span class="line">    minHeap.size--;</span><br><span class="line">    checkOdd(minHeap);</span><br><span class="line">    <span class="keyword">return</span> min;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">input</span><span class="params">(Vertex &amp;v, <span class="keyword">int</span> data, <span class="keyword">int</span> dist)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    AdjList*&amp; p = v.adj;</span><br><span class="line">    <span class="keyword">if</span> (data == <span class="number">0</span> &amp;&amp; dist == <span class="number">0</span>)&#123;</span><br><span class="line">        p = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!p) &#123;</span><br><span class="line">        p = <span class="keyword">new</span> AdjList;</span><br><span class="line">        p-&gt;data = data;</span><br><span class="line">        p-&gt;dist = dist;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        AdjList* temp = p;</span><br><span class="line">        <span class="keyword">while</span> (p-&gt;next) &#123;</span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        p-&gt;next = <span class="keyword">new</span> AdjList;</span><br><span class="line">        p-&gt;next-&gt;data = data;</span><br><span class="line">        p-&gt;next-&gt;dist = dist;</span><br><span class="line">        p = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inputSample</span><span class="params">(Vertex v[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        v[i].id = i;</span><br><span class="line">    &#125;</span><br><span class="line">    input(v[<span class="number">1</span>], <span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">    input(v[<span class="number">1</span>], <span class="number">4</span>, <span class="number">1</span>);</span><br><span class="line">    input(v[<span class="number">2</span>], <span class="number">4</span>, <span class="number">3</span>);</span><br><span class="line">    input(v[<span class="number">2</span>], <span class="number">5</span>, <span class="number">10</span>);</span><br><span class="line">    input(v[<span class="number">3</span>], <span class="number">1</span>, <span class="number">4</span>);</span><br><span class="line">    input(v[<span class="number">3</span>], <span class="number">6</span>, <span class="number">5</span>);</span><br><span class="line">    input(v[<span class="number">4</span>], <span class="number">3</span>, <span class="number">2</span>);</span><br><span class="line">    input(v[<span class="number">4</span>], <span class="number">5</span>, <span class="number">2</span>);</span><br><span class="line">    input(v[<span class="number">4</span>], <span class="number">6</span>, <span class="number">8</span>);</span><br><span class="line">    input(v[<span class="number">4</span>], <span class="number">7</span>, <span class="number">4</span>);</span><br><span class="line">    input(v[<span class="number">5</span>], <span class="number">7</span>, <span class="number">6</span>);</span><br><span class="line">    input(v[<span class="number">7</span>], <span class="number">6</span>, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">(Vertex &amp;s, Vertex g[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Vertex v;</span><br><span class="line">    AdjList* p;</span><br><span class="line">    Heap minHeap;</span><br><span class="line">    minHeap.size = <span class="number">0</span>;</span><br><span class="line">    s.dist = <span class="number">0</span>;</span><br><span class="line">    incertMinHeap(s, minHeap);</span><br><span class="line">    <span class="keyword">while</span> (minHeap.size) &#123;</span><br><span class="line">        v = deleteMin(minHeap);</span><br><span class="line">        <span class="keyword">while</span> (g[v.id].visited) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!minHeap.size) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            v = deleteMin(minHeap);</span><br><span class="line">        &#125;</span><br><span class="line">        g[v.id].visited = <span class="number">1</span>;</span><br><span class="line">        p = v.adj;</span><br><span class="line">        <span class="keyword">while</span> (p) &#123;</span><br><span class="line">            <span class="keyword">if</span> (g[p-&gt;data].visited == <span class="number">0</span> &amp;&amp; p-&gt;dist + v.dist &lt; g[p-&gt;data].dist) &#123;</span><br><span class="line">                g[p-&gt;data].dist = p-&gt;dist + v.dist;</span><br><span class="line">                g[p-&gt;data].path = v.id;</span><br><span class="line">                incertMinHeap(g[p-&gt;data], minHeap);</span><br><span class="line">            &#125;</span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printPath</span><span class="params">(Vertex v, Vertex g[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (v.path) &#123;</span><br><span class="line">        printPath(g[v.path], g);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"-&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; v.id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">check</span><span class="params">(Vertex v[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    AdjList* p;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">        p = v[i].adj;</span><br><span class="line">        <span class="keyword">while</span> (p) &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; p-&gt;data &lt;&lt; <span class="string">' '</span> &lt;&lt; p-&gt;dist &lt;&lt; <span class="string">' '</span> &lt;&lt; p-&gt;next &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">Vertex v[N];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">inputSample(v);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入源点序号：\n"</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">Dijkstra(v[n], v);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入终点序号：\n"</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"最短路径为：\n"</span>;</span><br><span class="line">printPath(v[n], v);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"路径权重："</span> &lt;&lt; v[n].dist;</span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>   </p>
<h4 id="邻接表存储有向无环图以队列法拓扑排序"><a href="#邻接表存储有向无环图以队列法拓扑排序" class="headerlink" title="邻接表存储有向无环图以队列法拓扑排序"></a>邻接表存储有向无环图以队列法拓扑排序</h4><p> </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 16</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">listNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    listNode* next;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QueueNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    QueueNode* next;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(<span class="keyword">int</span> a, QueueNode*&amp; rear)</span> </span>&#123;</span><br><span class="line">    rear-&gt;a = a;</span><br><span class="line">    rear-&gt;next = <span class="keyword">new</span> QueueNode;</span><br><span class="line">    rear = rear-&gt;next;</span><br><span class="line">    rear-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dequeue</span><span class="params">(QueueNode*&amp; front)</span> </span>&#123;</span><br><span class="line">    QueueNode* temp = front;</span><br><span class="line">    front = front-&gt;next;</span><br><span class="line">    temp-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> temp-&gt;a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inputLesson</span><span class="params">(listNode* head[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    head[<span class="number">0</span>] = <span class="literal">NULL</span>;</span><br><span class="line">    head[<span class="number">1</span>] = <span class="keyword">new</span> listNode;</span><br><span class="line">    head[<span class="number">1</span>]-&gt;data = <span class="number">3</span>;</span><br><span class="line">    head[<span class="number">1</span>]-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    head[<span class="number">2</span>] = <span class="keyword">new</span> listNode;</span><br><span class="line">    head[<span class="number">2</span>]-&gt;data = <span class="number">3</span>;</span><br><span class="line">    head[<span class="number">2</span>]-&gt;next = <span class="keyword">new</span> listNode;</span><br><span class="line">    head[<span class="number">2</span>]-&gt;next-&gt;data = <span class="number">13</span>;</span><br><span class="line">    head[<span class="number">2</span>]-&gt;next-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    head[<span class="number">3</span>] = <span class="keyword">new</span> listNode;</span><br><span class="line">    head[<span class="number">3</span>]-&gt;data = <span class="number">7</span>;</span><br><span class="line">    head[<span class="number">3</span>]-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    head[<span class="number">4</span>] = <span class="keyword">new</span> listNode;</span><br><span class="line">    head[<span class="number">4</span>]-&gt;data = <span class="number">5</span>;</span><br><span class="line">    head[<span class="number">4</span>]-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    head[<span class="number">5</span>] = <span class="keyword">new</span> listNode;</span><br><span class="line">    head[<span class="number">5</span>]-&gt;data = <span class="number">6</span>;</span><br><span class="line">    head[<span class="number">5</span>]-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    head[<span class="number">6</span>] = <span class="keyword">new</span> listNode;</span><br><span class="line">    head[<span class="number">6</span>]-&gt;data = <span class="number">15</span>;</span><br><span class="line">    head[<span class="number">6</span>]-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    head[<span class="number">7</span>] = <span class="keyword">new</span> listNode;</span><br><span class="line">    head[<span class="number">7</span>]-&gt;data = <span class="number">10</span>;</span><br><span class="line">    head[<span class="number">7</span>]-&gt;next = <span class="keyword">new</span> listNode;</span><br><span class="line">    head[<span class="number">7</span>]-&gt;next-&gt;data = <span class="number">11</span>;</span><br><span class="line">    head[<span class="number">7</span>]-&gt;next-&gt;next = <span class="keyword">new</span> listNode;</span><br><span class="line">    head[<span class="number">7</span>]-&gt;next-&gt;next-&gt;data = <span class="number">12</span>;</span><br><span class="line">    head[<span class="number">7</span>]-&gt;next-&gt;next-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    head[<span class="number">8</span>] = <span class="keyword">new</span> listNode;</span><br><span class="line">    head[<span class="number">8</span>]-&gt;data = <span class="number">9</span>;</span><br><span class="line">    head[<span class="number">8</span>]-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    head[<span class="number">9</span>] = <span class="keyword">new</span> listNode;</span><br><span class="line">    head[<span class="number">9</span>]-&gt;data = <span class="number">10</span>;</span><br><span class="line">    head[<span class="number">9</span>]-&gt;next = <span class="keyword">new</span> listNode;</span><br><span class="line">    head[<span class="number">9</span>]-&gt;next-&gt;data = <span class="number">11</span>;</span><br><span class="line">    head[<span class="number">9</span>]-&gt;next-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    head[<span class="number">10</span>] = <span class="keyword">new</span> listNode;</span><br><span class="line">    head[<span class="number">10</span>]-&gt;data = <span class="number">14</span>;</span><br><span class="line">    head[<span class="number">10</span>]-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    head[<span class="number">11</span>] = <span class="literal">NULL</span>;</span><br><span class="line">    head[<span class="number">12</span>] = <span class="literal">NULL</span>;</span><br><span class="line">    head[<span class="number">13</span>] = <span class="literal">NULL</span>;</span><br><span class="line">    head[<span class="number">14</span>] = <span class="literal">NULL</span>;</span><br><span class="line">    head[<span class="number">15</span>] = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">scanAll</span><span class="params">(listNode* <span class="built_in">list</span>[], <span class="keyword">int</span> inDegree[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        listNode* p;</span><br><span class="line">        p = <span class="built_in">list</span>[i];</span><br><span class="line">        <span class="keyword">while</span> (p)</span><br><span class="line">        &#123;</span><br><span class="line">            inDegree[p-&gt;data]++;</span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">topSort</span><span class="params">(listNode* <span class="built_in">list</span>[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> v;</span><br><span class="line">    <span class="keyword">int</span> inDegree[N];</span><br><span class="line">    listNode* p;</span><br><span class="line">    QueueNode* front, *rear;</span><br><span class="line">    front = rear = <span class="keyword">new</span> QueueNode;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">        inDegree[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    scanAll(<span class="built_in">list</span>, inDegree);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; N; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!inDegree[i]) &#123;</span><br><span class="line">            enqueue(i, rear);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (front != rear) &#123;</span><br><span class="line">        v = dequeue(front);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; v &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">        p = <span class="built_in">list</span>[v];</span><br><span class="line">        <span class="keyword">while</span> (p) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!(--inDegree[p-&gt;data])) &#123;</span><br><span class="line">                enqueue(p-&gt;data, rear);</span><br><span class="line">            &#125;</span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    listNode* <span class="built_in">list</span>[N];</span><br><span class="line">    inputLesson(<span class="built_in">list</span>);</span><br><span class="line">    topSort(<span class="built_in">list</span>);</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>        </p>
<p>2016年3月</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
  </entry>
  <entry>
    <title>记录一些好用的软件</title>
    <url>/blog/2017/05/16/e8-ae-b0-e5-bd-95-e4-b8-80-e4-ba-9b-e5-a5-bd-e7-94-a8-e7-9a-84-e8-bd-af-e4-bb-b6/</url>
    <content><![CDATA[<p>regex match tracer  正则表达式匹配工具 </p>
<p>phpstudy  简易快速搭建一个Apache服务器，同时启动PHP+MySQL </p>
<p>beyond compare  专业文本比对工具 </p>
<p>switchhosts  本地hosts文件快速切换 </p>
<p>unlocker  快速解除特定软件进程 </p>
<p>takecolor  屏幕取色   </p>
<p>ComfyFileRecovery  数据恢复 </p>
<p>TeamViewer  远程协助 </p>
<p>Typora  本地markdown编辑器 </p>
<p>Pixel Ruler  屏幕像素测量 </p>
<p>FastStone Capture  屏幕截图</p>
]]></content>
      <categories>
        <category>应用</category>
      </categories>
  </entry>
  <entry>
    <title>通过NuGet包管理器快速在Visual Studio中配置OpenGL环境</title>
    <url>/blog/2018/10/15/e9-80-9a-e8-bf-87nuget-e5-8c-85-e7-ae-a1-e7-90-86-e5-99-a8-e5-bf-ab-e9-80-9f-e5-9c-a8visual-studio-e4-b8-ad-e9-85-8d-e7-bd-aeopengl-e7-8e-af-e5-a2-83/</url>
    <content><![CDATA[<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">PM&gt;</span> Install-Package nupengl.core -Version 0.1.0.1</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>工具</category>
      </categories>
  </entry>
  <entry>
    <title>git日志别名配置命令行git lg</title>
    <url>/blog/2018/07/24/git-e6-97-a5-e5-bf-97-e5-88-ab-e5-90-8d-e9-85-8d-e7-bd-ae-e5-91-bd-e4-bb-a4-e8-a1-8cgit-lg/</url>
    <content><![CDATA[<p><code>git config --global alias.lg &quot;log --color --graph --pretty=format:&#39;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&#39; --abbrev-commit&quot;</code></p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
  </entry>
  <entry>
    <title>世界，你好！</title>
    <url>/blog/2017/03/20/hello-world-1/</url>
    <content><![CDATA[<p>你好哇！</p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript闭包原理分析</title>
    <url>/blog/2018/03/23/javascript-e9-97-ad-e5-8c-85-e5-8e-9f-e7-90-86-e5-88-86-e6-9e-90/</url>
    <content><![CDATA[<p>写了几个小例子揭示JS中闭包的本质，适合自己运行后分析。</p>
<hr>
<p>HTML文件  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"lib/jquery-3.1.0.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"closure_example.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>0<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>3<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>4<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>5<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">style</span>=<span class="string">"display:none"</span> <span class="attr">class</span>=<span class="string">"hide"</span>&gt;</span>什么是闭包<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p> </p>
<hr>
<p>JS代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">给6个按钮绑定事件，点击打印按钮的序号</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line">    $(<span class="string">'button'</span>).eq(i).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">解决方案一：借用DOM元素的属性存储序号i</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line">    $(<span class="string">'button'</span>).eq(i).attr(<span class="string">'i'</span>, i).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log($(<span class="keyword">this</span>).attr(<span class="string">'i'</span>));</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">解决方案二：利用IIFE将i作为参数传递给内部函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line">    (<span class="function"><span class="keyword">function</span> (<span class="params">i</span>) </span>&#123;</span><br><span class="line">        $(<span class="string">'button'</span>).eq(i).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(i);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">错误方案：IIFE使用位置错误</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line">    $(<span class="string">'button'</span>).eq(i).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        (<span class="function"><span class="keyword">function</span> (<span class="params">i</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(i);</span><br><span class="line">        &#125;)(i);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">解决方案三：利用IIFE所创造的“块级作用域”，将i赋值给局部变量</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line">    (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> temp = i;</span><br><span class="line">        $(<span class="string">'button'</span>).eq(temp).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(temp);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">什么是闭包？</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">closure</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        i++;</span><br><span class="line">        <span class="built_in">console</span>.log(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> foo = closure();</span><br><span class="line">foo();</span><br><span class="line">foo();</span><br><span class="line">foo();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bar = closure();</span><br><span class="line">bar();</span><br><span class="line">bar();</span><br><span class="line">bar();</span><br><span class="line"></span><br><span class="line">$(<span class="string">'.hide'</span>).show().on(<span class="string">'click'</span>, foo)</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>LAMP搭建私有云OwnCloud流程</title>
    <url>/blog/2018/10/13/lamp-e6-90-ad-e5-bb-ba-e7-a7-81-e6-9c-89-e4-ba-91owncloud-e6-b5-81-e7-a8-8b/</url>
    <content><![CDATA[<h2 id="STEP1-在Ubuntu-16-04搭建LAMP"><a href="#STEP1-在Ubuntu-16-04搭建LAMP" class="headerlink" title="STEP1: 在Ubuntu 16.04搭建LAMP"></a>STEP1: 在Ubuntu 16.04搭建LAMP</h2><h3 id="Apache-installation"><a href="#Apache-installation" class="headerlink" title="Apache installation"></a>Apache installation</h3><p>To install webserver i.e. Apache, open terminal &amp; execute the following command,</p>
<p><code>$ sudo apt-get install apache2</code></p>
<p>Once the package has been installed, start the apache service &amp; enable it for boot,</p>
<p><code>$ sudo systemctl start apache2</code></p>
<p><code>$ sudo systemctl enable apache2</code></p>
<p>Now we can test the apache installation. To test the apache installation, open web browser &amp; in the address bar enter the following url,</p>
<p><code>http://localhost</code></p>
<h3 id="MySQL-installation"><a href="#MySQL-installation" class="headerlink" title="MySQL installation"></a>MySQL installation</h3><p>Next thing to install is database, we are using MySql as our choice of database server. To install MySql on Ubuntu machine, run the following command from terminal</p>
<p><code>$ sudo apt-get install mysql-server mysql-client</code></p>
<p>During the MySql installation, we will be asked to provide ‘root’ password, provide a suitable password &amp; than confirm it to complete the installation. Once the installation has been completed, start the MySql service &amp; enable it for boot,</p>
<p><code>$ sudo systemctl start mysql</code></p>
<p><code>$ sudo systemctl enable mysql</code></p>
<p>We can now connect to the database to check the installation, to connect to MySql, use the following command,</p>
<p><code>$ mysql -u root -p</code></p>
<p>And than enter the root password that we provided at the time of installation to connect to mysql,</p>
<h2 id="PHP-installation"><a href="#PHP-installation" class="headerlink" title="PHP installation"></a>PHP installation</h2><p>Dynamic content of a website is processed by PHP, its a general purpose programming language. To install php on the system, execute the following command from terminal,</p>
<p><code>$ sudo apt-get install php7.0-mysql php7.0-curl php7.0-json php7.0-cgi libapache2-mod-php7.0 php7.0</code></p>
<p>Once the isntallation has been complete, we will test the php. To do that, open</p>
<p><code>$ sudo vim /var/www/html/test.php</code></p>
<p>&amp; enter the following content to it,</p>
<p><code>&lt;?   phpinfo();   ?&gt;</code></p>
<p>Save the file &amp; restart the apache service,</p>
<p><code>$ sudo systemctl restart apache2</code></p>
<p>Now open the browser &amp; enter the following URL,</p>
<p><code>http://localhost/test.php</code></p>
<p>We should now see the following page with details about the installed PHP,</p>
<p>We know have our LAMP stack on Ubuntu OS ready to use, we can now deploy the dynamic websites on this stack.</p>
<h2 id="STEP2-搭建OwnCloud"><a href="#STEP2-搭建OwnCloud" class="headerlink" title="STEP2: 搭建OwnCloud"></a>STEP2: 搭建OwnCloud</h2><p>我们需要在自己的设备里安装这些包：</p>
<pre><code>$ sudo yum install php-mysql php-json php-xml php-mbstring php-zip php-gd curl php-curl php-pdo
</code></pre>
<p>安装 OwnCloud，我们现在需要在服务器上下载 OwnCloud 安装包。使用下面的命令从官方网站下载安装包（10.0.4）：</p>
<pre><code>$ wget https://download.owncloud.org/community/owncloud-10.0.4.tar.bz2
</code></pre>
<p>使用下面的命令解压：</p>
<pre><code>$ tar -xvf owncloud-10.0.4.tar.bz2
</code></pre>
<p>现在，将所有解压后的文件移动至 <code>/var/www/html</code>：</p>
<pre><code>$ mv owncloud/* /var/www/html
</code></pre>
<p>注意还有两个隐藏文件需要分别移动：</p>
<pre><code>$ mv owncloud/.htaccess /var/www/html
$ mv owncloud/.user.ini /var/www/html
</code></pre>
<p>下一步，我们需要在 Apache 的配置文件 <code>apache2.conf</code> 上做些修改：</p>
<pre><code>$ sudo vim /etc/apache2/apache2.conf
</code></pre>
<p>更改下面的选项：</p>
<pre><code>AllowOverride All
</code></pre>
<p>保存该文件，并修改 OwnCloud 文件夹的文件权限：</p>
<pre><code>$ sudo chown -R www-data:www-data /var/www/html/
$ sudo chmod 777 /var/www/html/config/
</code></pre>
<p>然后重启 Apache 服务器执行修改：</p>
<pre><code>$ sudo systemctl restart apache2
</code></pre>
<p>现在，我们需要在 MySQL 上创建一个数据库，保存来自 OwnCloud 的数据。使用下面的命令创建数据库owncloud和数据库用户ocuser：</p>
<pre><code>$ mysql -u root -p
mysql &gt; create database owncloud;
mysql &gt; GRANT ALL ON owncloud.* TO ocuser@localhost IDENTIFIED BY &#39;owncloud&#39;;
mysql &gt; flush privileges;
mysql &gt; exit
</code></pre>
<p>修改ocuser用户密码：</p>
<pre><code>$ mysql -u root -p
mysql &gt; use mysql; 
mysql &gt; UPDATE user SET authentication_string=PASSWORD(&quot;your password&quot;) WHERE user=&#39;ocuser&#39;;
mysql &gt; FLUSH PRIVILEGES;
mysql &gt; quit;
</code></pre>
<p>在浏览器中输入你的服务器IP地址，显示如下界面，填写配置，服务器端搭建，完成！</p>
<p><img src="http://diaryfun.info/wp-content/uploads/2018/10/234816ylnpqg2azlxpnlqz.jpg"></p>
<p>去官网下载并安装客户端：<a href="https://owncloud.org/download/%E3%80%82" target="_blank" rel="noopener">https://owncloud.org/download/。</a></p>
<p>ownCloud，启动！</p>
<p><img src="http://diaryfun.info/wp-content/uploads/2018/10/Snipaste_2018-10-13_12-49-40.png"></p>
<p>参考链接：</p>
<p><a href="https://linuxtechlab.com/install-lamp-stack-on-ubuntu" target="_blank" rel="noopener">https://linuxtechlab.com/install-lamp-stack-on-ubuntu</a></p>
<p><a href="https://linux.cn/article-9418-1.html" target="_blank" rel="noopener">https://linux.cn/article-9418-1.html</a></p>
<p>若有大佬对此文存在修改意见，或是配置过程中存在错误，请在评论区留言。</p>
<hr>
<p>补充常用OCC命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo -u www-data php occ files:cleanup</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo -u www-data php occ trashbin:cleanup</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo -u www-data php occ versions:cleanup</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>应用</category>
      </categories>
  </entry>
  <entry>
    <title>React Starter Kit 学习笔记</title>
    <url>/blog/2018/03/24/react-starter-kit-e5-ad-a6-e4-b9-a0-e7-ac-94-e8-ae-b0/</url>
    <content><![CDATA[<p>根据<a href="http://reactjs.cn/react/docs/getting-started.html" target="_blank" rel="noopener">http://reactjs.cn/react/docs/...</a>页面中Starter Kit 15.3.1中的例子汇总修改而成。</p>
<hr>
<p>HTML代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>React test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"react_transition.css"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"lib/react-with-addons.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"lib/react-dom.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"lib/browser.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container3"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container4"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container5"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container6"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container7"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container8"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container9"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container10"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"react_test.js"</span> <span class="attr">type</span>=<span class="string">"text/babel"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<p>JS代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> container1 = <span class="built_in">document</span>.getElementById(<span class="string">'container1'</span>)</span><br><span class="line"><span class="keyword">const</span> container2 = <span class="built_in">document</span>.getElementById(<span class="string">'container2'</span>)</span><br><span class="line"><span class="keyword">const</span> container3 = <span class="built_in">document</span>.getElementById(<span class="string">'container3'</span>)</span><br><span class="line"><span class="keyword">const</span> container4 = <span class="built_in">document</span>.getElementById(<span class="string">'container4'</span>)</span><br><span class="line"><span class="keyword">const</span> container5 = <span class="built_in">document</span>.getElementById(<span class="string">'container5'</span>)</span><br><span class="line"><span class="keyword">const</span> container6 = <span class="built_in">document</span>.getElementById(<span class="string">'container6'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//1 'Hello' + name</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Welcome</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span> &gt;</span> Hello, &#123; props.name &#125; <span class="tag">&lt; /<span class="attr">h1</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> element = &lt; Welcome name = <span class="string">"Diary"</span> / &gt; ;</span><br><span class="line">ReactDOM.render(</span><br><span class="line">    element,</span><br><span class="line">    container1</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2 流逝时间计时器</span></span><br><span class="line"><span class="keyword">var</span> Elapsed = React.createClass(&#123;</span><br><span class="line">    render: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> elapsed = <span class="built_in">Math</span>.round(<span class="keyword">this</span>.props.elapsed / <span class="number">100</span>);</span><br><span class="line">        <span class="keyword">var</span> seconds = elapsed / <span class="number">10</span> + (elapsed % <span class="number">10</span> ? <span class="string">''</span> : <span class="string">'.0'</span>);</span><br><span class="line">        <span class="keyword">var</span> message =</span><br><span class="line">            <span class="string">'React has been successfully running for '</span> + seconds + <span class="string">' seconds.'</span>;</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">p</span> &gt;</span> &#123; message &#125; <span class="tag">&lt; /<span class="attr">p</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> start = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    ReactDOM.render( &lt; Elapsed elapsed = &#123; <span class="keyword">new</span> <span class="built_in">Date</span>().getTime() - start &#125;</span><br><span class="line">        / \&gt; ,</span><br><span class="line">        container2</span><br><span class="line">    );</span><br><span class="line">&#125;, <span class="number">50</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3 按钮点击计数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Counter = React.createClass(&#123;</span><br><span class="line">    getInitialState: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123; </span><br><span class="line">            count: <span class="number">2</span>,</span><br><span class="line">            sum: <span class="number">100</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    handleClick: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">            count: <span class="keyword">this</span>.state.count * <span class="keyword">this</span>.state.count,</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    handleDoubleClick: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">            count: <span class="number">2</span>,</span><br><span class="line">            sum: <span class="number">1000</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    render: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ( </span><br><span class="line">            &lt; button onClick = &#123; <span class="keyword">this</span>.handleClick &#125; onDoubleClick = &#123; <span class="keyword">this</span>.handleDoubleClick &#125;&gt;</span><br><span class="line">            sum - count: &#123; <span class="keyword">this</span>.state.sum - <span class="keyword">this</span>.state.count &#125; &lt; <span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">        );</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;);</span></span><br><span class="line"><span class="regexp">ReactDOM.render( &lt; Counter /</span> &gt; ,</span><br><span class="line">    container3</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">//4 流逝时间计时器（ES6写法）</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExampleApplication</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">var</span> elapsed = <span class="built_in">Math</span>.round(<span class="keyword">this</span>.props.elapsed / <span class="number">100</span>);</span><br><span class="line">        <span class="keyword">var</span> seconds = elapsed / <span class="number">10</span> + (elapsed % <span class="number">10</span> ? <span class="string">''</span> : <span class="string">'.0'</span>);</span><br><span class="line">        <span class="keyword">var</span> message =</span><br><span class="line">            <span class="string">`React has been successfully running for <span class="subst">$&#123;seconds&#125;</span> seconds.`</span>;</span><br><span class="line"></span><br><span class="line">​    	<span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">p</span> &gt;</span> &#123; message &#125; <span class="tag">&lt; /<span class="attr">p</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> start = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    ReactDOM.render( &lt; ExampleApplication elapsed = &#123; <span class="keyword">new</span> <span class="built_in">Date</span>().getTime() - start &#125;/&gt;,</span><br><span class="line">        container4</span><br><span class="line">    );</span><br><span class="line">&#125;, <span class="number">50</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//5 实时求解一元二次方程</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> QuadraticCalculator = React.createClass(&#123;</span><br><span class="line">  getInitialState: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      a: <span class="number">1</span>,</span><br><span class="line">      b: <span class="number">3</span>,</span><br><span class="line">      c: <span class="number">-4</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  /\*\*</span><br><span class="line">   \* This <span class="function"><span class="keyword">function</span> <span class="title">will</span> <span class="title">be</span> <span class="title">re</span>-<span class="title">bound</span> <span class="title">in</span> <span class="title">render</span> <span class="title">multiple</span> <span class="title">times</span>. <span class="title">Each</span> .<span class="title">bind</span>(<span class="params"></span>) <span class="title">will</span></span></span><br><span class="line"><span class="function">   \* <span class="title">create</span> <span class="title">a</span> <span class="title">new</span> <span class="title">function</span> <span class="title">that</span> <span class="title">calls</span> <span class="title">this</span> <span class="title">with</span> <span class="title">the</span> <span class="title">appropriate</span> <span class="title">key</span> <span class="title">as</span> <span class="title">well</span> <span class="title">as</span></span></span><br><span class="line"><span class="function">   \* <span class="title">the</span> <span class="title">event</span>. <span class="title">The</span> <span class="title">key</span> <span class="title">is</span> <span class="title">the</span> <span class="title">key</span> <span class="title">in</span> <span class="title">the</span> <span class="title">state</span> <span class="title">object</span> <span class="title">that</span> <span class="title">the</span> <span class="title">value</span> <span class="title">should</span> <span class="title">be</span></span></span><br><span class="line"><span class="function">   \* <span class="title">mapped</span> <span class="title">from</span>.</span></span><br><span class="line"><span class="function">   */</span></span><br><span class="line"><span class="function">  <span class="title">handleInputChange</span>: <span class="title">function</span>(<span class="params">key, event</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> partialState = &#123;&#125;;</span><br><span class="line">    partialState\[key\] = <span class="built_in">parseFloat</span>(event.target.value);</span><br><span class="line">    <span class="keyword">this</span>.setState(partialState);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="keyword">this</span>.state.a;</span><br><span class="line">    <span class="keyword">var</span> b = <span class="keyword">this</span>.state.b;</span><br><span class="line">    <span class="keyword">var</span> c = <span class="keyword">this</span>.state.c;</span><br><span class="line">    <span class="keyword">var</span> root = <span class="built_in">Math</span>.sqrt(<span class="built_in">Math</span>.pow(b, <span class="number">2</span>) - <span class="number">4</span> * a * c);</span><br><span class="line">    <span class="keyword">var</span> denominator = <span class="number">2</span> * a;</span><br><span class="line">    <span class="keyword">var</span> x1 = (-b + root) / denominator;</span><br><span class="line">    <span class="keyword">var</span> x2 = (-b - root) / denominator;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line"></span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;strong&gt;</span><br><span class="line">          &lt;em&gt;ax&lt;<span class="regexp">/em&gt;&lt;sup&gt;2&lt;/</span>sup&gt; + <span class="xml"><span class="tag">&lt;<span class="name">em</span>&gt;</span>bx<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span> + <span class="xml"><span class="tag">&lt;<span class="name">em</span>&gt;</span>c<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span> = <span class="number">0</span></span><br><span class="line">        &lt;<span class="regexp">/strong&gt;</span></span><br><span class="line"><span class="regexp">        &lt;h4&gt;Solve for &lt;em&gt;x&lt;/</span>em&gt;:&lt;<span class="regexp">/h4&gt;</span></span><br><span class="line"><span class="regexp">        &lt;p&gt;</span></span><br><span class="line"><span class="regexp">          &lt;label&gt;</span></span><br><span class="line"><span class="regexp">            a: &lt;input type="number" value=&#123;a&#125; onChange=&#123;this.handleInputChange.bind(null, 'a')&#125; /</span>&gt;</span><br><span class="line">          &lt;<span class="regexp">/label&gt;</span></span><br><span class="line"><span class="regexp">          &lt;br /</span>&gt;</span><br><span class="line">          &lt;label&gt;</span><br><span class="line">            b: <span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"number"</span> <span class="attr">value</span>=<span class="string">&#123;b&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;this.handleInputChange.bind(null,</span> '<span class="attr">b</span>')&#125; /&gt;</span></span></span><br><span class="line">          &lt;<span class="regexp">/label&gt;</span></span><br><span class="line"><span class="regexp">          &lt;br /</span>&gt;</span><br><span class="line">          &lt;label&gt;</span><br><span class="line">            c: <span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"number"</span> <span class="attr">value</span>=<span class="string">&#123;c&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;this.handleInputChange.bind(null,</span> '<span class="attr">c</span>')&#125; /&gt;</span></span></span><br><span class="line">          &lt;<span class="regexp">/label&gt;</span></span><br><span class="line"><span class="regexp">          &lt;br /</span>&gt;</span><br><span class="line">          x: <span class="xml"><span class="tag">&lt;<span class="name">strong</span>&gt;</span>&#123;x1&#125;, &#123;x2&#125;<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span></span><br><span class="line">        &lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line"></span><br><span class="line">​    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;QuadraticCalculator /&gt;,</span><br><span class="line">  container5</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">//6 调用React组件CSSTransitionGroup制作动画效果</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> CSSTransitionGroup = React.addons.CSSTransitionGroup;</span><br><span class="line"><span class="keyword">var</span> INTERVAL = <span class="number">2000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> AnimateDemo = React.createClass(&#123;</span><br><span class="line">getInitialState: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;<span class="attr">current</span>: <span class="number">0</span>&#125;;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">componentDidMount: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.interval = setInterval(<span class="keyword">this</span>.tick, INTERVAL);</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">componentWillUnmount: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  clearInterval(<span class="keyword">this</span>.interval);</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">tick: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.setState(&#123;<span class="attr">current</span>: <span class="keyword">this</span>.state.current + <span class="number">1</span>&#125;);</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> children = \[\];</span><br><span class="line">  <span class="keyword">var</span> colors = \[<span class="string">'#fac'</span>, <span class="string">'#cdc'</span>, <span class="string">'#36d'</span>, <span class="string">'#ca0'</span>, <span class="string">'#0aa'</span>\];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="keyword">this</span>.state.current, pos=<span class="number">0</span>; i &lt; <span class="keyword">this</span>.state.current + colors.length; i++, pos++) &#123;</span><br><span class="line">    <span class="keyword">var</span> style = &#123;</span><br><span class="line">      left: pos * <span class="number">128</span>,</span><br><span class="line">      background: colors\[i % colors.length\]</span><br><span class="line">    &#125;;</span><br><span class="line">    children.push(<span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&#123;i&#125;</span> <span class="attr">className</span>=<span class="string">"animateItem"</span> <span class="attr">style</span>=<span class="string">&#123;style&#125;</span>&gt;</span>&#123;i&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;CSSTransitionGroup</span><br><span class="line">      className=<span class="string">"animateExample"</span></span><br><span class="line">      transitionEnterTimeout=&#123;<span class="number">250</span>&#125;</span><br><span class="line">      transitionLeaveTimeout=&#123;<span class="number">250</span>&#125;</span><br><span class="line">      transitionName=<span class="string">"example"</span>&gt;</span><br><span class="line">      &#123;children&#125;</span><br><span class="line">    &lt;<span class="regexp">/CSSTransitionGroup&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">&#125;);</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">ReactDOM.render(</span></span><br><span class="line"><span class="regexp">&lt;AnimateDemo /</span>&gt;,</span><br><span class="line">container6</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<hr>
<p>CSS代码（仅在例6中使用）</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.example-enter</span>,</span><br><span class="line"><span class="selector-class">.example-leave</span> &#123;</span><br><span class="line">  <span class="attribute">-webkit-transition</span>: all .<span class="number">25s</span>;</span><br><span class="line">  <span class="attribute">transition</span>: all .<span class="number">25s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.example-enter</span>,</span><br><span class="line"><span class="selector-class">.example-leave</span><span class="selector-class">.example-leave-active</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0.01</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.example-leave</span><span class="selector-class">.example-leave-active</span> &#123;</span><br><span class="line">  <span class="attribute">margin-left</span>: -<span class="number">128px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.example-enter</span> &#123;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">128px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.example-enter</span><span class="selector-class">.example-enter-active</span>,</span><br><span class="line"><span class="selector-class">.example-leave</span> &#123;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.animateExample</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">128px</span>;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">384px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.animateItem</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">36px</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">128px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">128px</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">-webkit-transition</span>: all .<span class="number">25s</span>; <span class="comment">/* <span class="doctag">TODO:</span> make this a move animation */</span></span><br><span class="line">  <span class="attribute">transition</span>: all .<span class="number">25s</span>; <span class="comment">/* <span class="doctag">TODO:</span> make this a move animation */</span></span><br><span class="line">  <span class="attribute">width</span>: <span class="number">128px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>一路向北</title>
    <url>/blog/2011/09/28/%E4%B8%80%E8%B7%AF%E5%90%91%E5%8C%97/</url>
    <content><![CDATA[<p>要写一篇文章，只是一时的冲动。</p>
<p>还有多少的勇气，还有多少次的，一路向北。</p>
 <br>

<p>在43上听《一路向北》，突然又让我想到了很多，与歌词无关，与曲调无关，仅仅是因为歌名，与那段电吉他所带来的震撼。</p>
<br>

<p>道可道，非常道。</p>
<p>忘了想写些什么，总之有很多想说却又无法去记录的思索。总觉得自己有着哲人的思考，诗人的敏感，以及独我的狂妄。当然，再加上一点傻，就是完整的我了。傻是我坚守的核心。</p>
 <br>

<p>大智若愚，大巧若拙，大音希声，大象无形。</p>
<p>我一路向北，就想这样一路向北，沿途得到一些，失去一些，经历一些，改变一些，有回忆，有憧憬，有珍惜，有遗憾。时不时地反省一下自我，看清一个真实的自己，然后继续执著地向前，不犹豫，不后悔。</p>
 <br>

<p>我说，没有什么过不去，无论美好或是悲哀。</p>
 <br>

<p>还好，我还能坚守我自己。</p>
<p>那就让我，一路向北。</p>
]]></content>
  </entry>
  <entry>
    <title>Vue.js 表格组件</title>
    <url>/blog/2018/03/24/vue-js-e8-a1-a8-e6-a0-bc-e7-bb-84-e4-bb-b6/</url>
    <content><![CDATA[<p>HTML：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"target"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>  JS：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Vue组件开始</span></span><br><span class="line"><span class="keyword">var</span> Grid = Vue.extend(&#123;</span><br><span class="line">    template: <span class="string">'&lt;table class="table" :class="&#123;layoutFixed: config.layoutFixed&#125;"&gt;\</span></span><br><span class="line"><span class="string">                &lt;thead&gt;\</span></span><br><span class="line"><span class="string">                    &lt;tr&gt;\</span></span><br><span class="line"><span class="string">                        &lt;th v-for="col in config.colModel" \</span></span><br><span class="line"><span class="string">                        v-if="col.sort" \</span></span><br><span class="line"><span class="string">                        :width="col.width" \</span></span><br><span class="line"><span class="string">                        :col="col.name" \</span></span><br><span class="line"><span class="string">                        :title="removeTag(col.display)" &gt;\</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                        &lt;div class="sort ellipsis" :sortType="col.sortType"&gt;&#123; &#123;col.display&#125;&#125;\</span></span><br><span class="line"><span class="string">                        &lt;i class="icon-chevron-up" @click="sortUp"&gt;&lt;/i&gt;\</span></span><br><span class="line"><span class="string">                        &lt;i class="icon-chevron-down" @click="sortDown"&gt;&lt;/i&gt;\</span></span><br><span class="line"><span class="string">                        &lt;/div&gt;&lt;/th&gt;\</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">​                        &lt;th v-else \</span></span><br><span class="line"><span class="string">​                        class="ellipsis"\</span></span><br><span class="line"><span class="string">​                        :width="col.width" \</span></span><br><span class="line"><span class="string">​                        :col="col.name" \</span></span><br><span class="line"><span class="string">​                        :title="removeTag(col.display)" &gt;&#123; &#123;col.display&#125;&#125;&lt;/th&gt;\</span></span><br><span class="line"><span class="string">​                    &lt;/tr&gt;\</span></span><br><span class="line"><span class="string">​                &lt;/thead&gt;\</span></span><br><span class="line"><span class="string">​                &lt;tbody&gt;\</span></span><br><span class="line"><span class="string">​                    &lt;tr v-for="row in resData.rows"&gt;\</span></span><br><span class="line"><span class="string">​                        &lt;td v-for="col in config.colModel"\</span></span><br><span class="line"><span class="string">​                        :title="removeTag(row\[col.name\])" v-handle="&#123;handler:col.handler, v:row\[col.name\], data:row&#125;"&gt;&#123; &#123;row\[col.name\]&#125;&#125;&lt;/td&gt;\</span></span><br><span class="line"><span class="string">​                    &lt;/tr&gt;\</span></span><br><span class="line"><span class="string">​                &lt;/tbody&gt;\</span></span><br><span class="line"><span class="string">​            &lt;/table&gt;'</span>,</span><br><span class="line">​    data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">​        <span class="keyword">return</span> &#123;</span><br><span class="line">​            url: <span class="string">''</span>,</span><br><span class="line">​            config: &#123;&#125;,</span><br><span class="line">​            param: &#123;&#125;,</span><br><span class="line">​            resData: &#123;&#125;</span><br><span class="line">​        &#125;;</span><br><span class="line">​    &#125;,</span><br><span class="line">​    computed: &#123;</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">    getData: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            url: <span class="keyword">this</span>.url,</span><br><span class="line">            type: <span class="string">'GET'</span>,</span><br><span class="line">            data: <span class="keyword">this</span>.param,</span><br><span class="line">            success: <span class="function"><span class="keyword">function</span> (<span class="params">json</span>) </span>&#123;</span><br><span class="line">                json = <span class="built_in">JSON</span>.parse(json);</span><br><span class="line">                self.resData = json.data;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    sortUp: <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">        $.extend(<span class="keyword">this</span>.param, &#123;</span><br><span class="line">            sortType: $(event.target).parent().attr(<span class="string">'sorttype'</span>),</span><br><span class="line">            orderType: <span class="string">"1"</span></span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">this</span>.getData();</span><br><span class="line">    &#125;,</span><br><span class="line">    sortDown: <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">        $.extend(<span class="keyword">this</span>.param, &#123;</span><br><span class="line">            sortType: $(event.target).parent().attr(<span class="string">'sorttype'</span>),</span><br><span class="line">            orderType: <span class="string">"2"</span></span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">this</span>.getData();</span><br><span class="line">    &#125;,</span><br><span class="line">    removeTag: <span class="function"><span class="keyword">function</span> (<span class="params">str</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (str) &#123;</span><br><span class="line">            str = str.toString();</span><br><span class="line">            <span class="keyword">return</span> str.replace(<span class="regexp">/&lt;("\[^"\]*"|'\[^'\]*'|\[^"'&gt;\])&gt;/g</span>, <span class="string">''</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">''</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    log: <span class="function"><span class="keyword">function</span> (<span class="params">str</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line">directives: &#123;</span><br><span class="line">    handle: &#123;</span><br><span class="line">        inserted: <span class="function"><span class="keyword">function</span> (<span class="params">el, binding</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> handler = binding.value.handler;</span><br><span class="line">            <span class="keyword">if</span> (handler &amp;&amp; $.isFunction(handler)) &#123;</span><br><span class="line">                handler(binding.value.v, binding.value.data, $(el), $(el).parent(<span class="string">'tr'</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line">mounted: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.getData();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">Vue.component(<span class="string">'grid'</span>, Grid);</span><br><span class="line"><span class="comment">//Vue组件结束</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建Vue实例开始</span></span><br><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Grid(&#123;</span><br><span class="line">    el: config.renderTo,</span><br><span class="line">    data: &#123;</span><br><span class="line">        url: config.url,</span><br><span class="line">        config: config</span><br><span class="line">    &#125;,</span><br><span class="line">    computed: &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//创建Vue实例结束</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>Sublime Text 3 常用插件清单</title>
    <url>/blog/2018/10/10/sublime-text-3-e5-b8-b8-e7-94-a8-e6-8f-92-e4-bb-b6-e6-b8-85-e5-8d-95/</url>
    <content><![CDATA[<p>BracketHighlighter</p>
<p>DocBlockr </p>
<p>Emmet </p>
<p>SideBarEnhancements </p>
<p>ColorPicker </p>
<p>ConvertToUTF8 </p>
<p>HTML-CSS-JS Prettify   </p>
<p>Git </p>
<p>jQuery </p>
<p>Python 3   </p>
<p>Theme - Spacegray  </p>
<hr>
<p> </p>
<p> Sublime Text 3 License Code</p>
<blockquote>
<p>----- BEGIN LICENSE —– sgbteam Single User License EA7E-1153259 8891CBB9 F1513E4F 1A3405C1 A865D53F 115F202E 7B91AB2D 0D2A40ED 352B269B 76E84F0B CD69BFC7 59F2DFEF E267328F 215652A3 E88F9D8F 4C38E3BA 5B2DAAE4 969624E7 DC9CD4D5 717FB40C 1B9738CF 20B3C4F1 E917B5B3 87C38D9C ACCE7DD8 5F7EF854 86B9743C FADC04AA FB0DA5C0 F913BE58 42FEA319 F954EFDD AE881E0B —— END LICENSE ——</p>
</blockquote>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
  </entry>
  <entry>
    <title>个人歌词集（2010-2013）</title>
    <url>/blog/2019/03/09/%E4%B8%AA%E4%BA%BA%E6%AD%8C%E8%AF%8D%E9%9B%86%EF%BC%882010-2013%EF%BC%89/</url>
    <content><![CDATA[<h4 id="向日葵盛开的夏天"><a href="#向日葵盛开的夏天" class="headerlink" title="向日葵盛开的夏天"></a>向日葵盛开的夏天</h4><br>

<p>校门外的老树前­</p>
<p>操场旁边的林荫间­</p>
<p>你坐在我旁边­</p>
<p>看我描点­</p>
<p>连成一条抛物线­</p>
<br>

<p>风在空中拉着线­</p>
<p>阳光洒满清澈的弦­</p>
<p>你我面前­</p>
<p>天空好远­</p>
<p>找不到最高点­</p>
<br>

<br>

<p>（一天天、一天天、一年年、一年年、一个又一个的夏天、风吹过的校园、斑驳的树影间、操场的阳光前、我在你旁边、看你抬头望着天、那么多值得珍藏的画面、都变成电影里磨损无声的胶片、怎么也、看不清了从前、而我呢、依然、奔跑在这校园、顺着空气想念、刻画下我们曾经的笑脸、书写着我们永恒的怀恋、向日葵盛开的夏天、在风中不变、在阳光下永远、永远不变、记忆里、半透明了夏天、­）</p>
<br>

 <br>

 

<p>你说你还记得那个夏天</p>
<p>向日葵开遍</p>
<p>阳光下的荒原­</p>
 <br>

<p>你说你深爱着那个夏天</p>
<p>坚定的侧脸­</p>
<p>夏天从未改变­</p>
<br>

 <br>

<p>向日葵盛开的夏天­</p>
<p>我们在山坡上一起许愿­</p>
<p>面对天边­</p>
<p>沿着视线­</p>
<p>你说你看不见­</p>
<p>未来多遥远­</p>
<br>

<p>向日葵盛开的夏天­</p>
<p>我们和向日葵(肩并着肩)一起默念­</p>
<p>面向阳光­</p>
<p>背对忧伤­</p>
<p>你说我们都一样(我们都一样)­</p>
<p>面朝希望­</p>
<p>不曾绝望</p>
 <br>

 <br>

 

<p>（印象中的向日葵是阳光下大片的金色海洋、其中、每一株向日葵都是一个原点、点动成线、线动成面、一株株肩并着肩、一排排汇聚视线、焦点指向天边、阴影抛给地面、整齐地心连着心然后连成一片、嗯、面向阳光、就拥有了阳光般明媚的笑脸、背对忧伤、就瞬间找回了倔强的坚强、阳光、倔强、倔强的阳光、阳光的倔强、就在那个夏天、向日葵盛开的夏天、你说了不变、­）</p>
<br>

 <br>

 

<p>你说你还记得那个夏天(细腻的风揉进葱绿的夏天)­</p>
<p>向日葵开遍(向日葵)­</p>
<p>阳光下的荒原(哼唱着阳光陪着你入眠)­</p>
<br>

<p>你说你深爱着那个夏天(被时光碾碎迷醉的夏天)­</p>
<p>坚定的侧脸(你单纯的侧脸)­</p>
<p>夏天从未改变(嗯、不会改变)­</p>
<br>

 <br>

 

<p>向日葵盛开的夏天­</p>
<p>我们在山坡上一起许愿­</p>
<p>面对天边­</p>
<p>沿着视线­</p>
<p>你说你看不见­</p>
<p>未来多遥远­</p>
<br>

<p>向日葵盛开的夏天­</p>
<p>我们和向日葵(肩并着肩)一起默念­</p>
<p>面向阳光­</p>
<p>背对忧伤­</p>
<p>你说我们都一样(我们都一样)­</p>
 <br>

<p>向日葵盛开的夏天­</p>
<p>我们在山坡上一起许愿­</p>
<p>面对天边­</p>
<p>沿着视线­</p>
<p>你说你看不见­</p>
<p>未来多遥远­</p>
<br>

<p>向日葵盛开的夏天­</p>
<p>我们和向日葵(肩并着肩)一起默念­</p>
<p>面向阳光­</p>
<p>背对忧伤­</p>
<p>你说我们都一样(我们都一样)­</p>
<p>面朝希望­</p>
<p>不曾绝望</p>
 <br>

 <br>

 



<p>（一天天、一天天、一年年、一年年、一个又一个的夏天、）­</p>
 <br>

<p>向日葵盛开的夏天­</p>
<br>

<p>（你说过的、不变）­</p>
<br>



<h4 id="夏天的边缘"><a href="#夏天的边缘" class="headerlink" title="夏天的边缘"></a>夏天的边缘</h4><br>

<p>你试着走过­</p>
<p>一整个夏天­</p>
<p>不知不觉错过</p>
<p>走到了边缘</p>
 <br>

<p>多么想回到起点</p>
<p>可惜早已找不见</p>
<p>你倔强地抬头看天</p>
<p>阳光满脸</p>
<p>却那么遥远</p>
 <br>

 <br>

<p>你在窗台摇风铃</p>
<p>风也变得很安静</p>
<p>你很用心</p>
<p>画下几笔</p>
<p>浓绿的树影</p>
 <br>

<p>你说害怕记不清</p>
<p>夏天里走过的风景</p>
<p>你的眼睛</p>
<p>我看不清</p>
<p>是阴还是晴</p>
 <br>

 <br>

<p>明媚阳光你不敢猜</p>
<p>晴朗天空晕不开</p>
<p>雨下过后才慢慢明白</p>
<p>你的等待</p>
<p>只是无奈</p>
 <br>

<p>梦在绿荫下面徘徊</p>
<p>迷路的风回不来</p>
<p>枯叶散落在雨后的街</p>
<p>一片一片被时间瓦解</p>
 <br>

 <br>

 

<p>我在树下印脚印</p>
<p>你在一旁看风景</p>
<p>你很安静</p>
<p>冲淡表情</p>
<p>陪我等天晴</p>
 <br>

<p>我说总是喜欢听</p>
<p>夏天里雨滴的声音</p>
<p>走走停停</p>
<p>穿过密林</p>
<p>树叶却落尽</p>
<br>

 <br>

 

<p>明媚阳光你不敢猜（不敢猜）</p>
<p>晴朗天空晕不开（晕不开）</p>
<p>雨下过后才慢慢明白（我慢慢明白）</p>
<p>你的等待（我的）</p>
<p>只是无奈（无奈）</p>
 <br>

<p>梦在绿荫下面徘徊（梦不再）</p>
<p>迷路的风回不来（逃不开）</p>
<p>枯叶散落在雨后的街（淋湿的街）</p>
<p>一片一片被时间瓦解</p>
 <br>

<p>哒哒啦哒 哒哒啦哒 哒哒啦哒 哒哒哒</p>
<p>哒哒啦哒 哒哒啦哒 哒哒啦哒 哒哒哒</p>
<p>哒哒啦哒 哒哒啦哒 哒哒啦哒 哒哒哒</p>
<p>哒哒啦哒 哒哒啦哒 哒哒啦哒 哒哒哒</p>
 <br>

 <br>

<p>你说已经 不再期待</p>
<p>不再期待 他回来</p>
 <br>

<p>屋顶阴霾 却无法散开</p>
<p>我的等待 只剩等待</p>
 <br>

<p>梦在绿荫下面徘徊（哒哒啦哒 哒哒啦哒）</p>
<p>迷路的风回不来（哒哒啦哒 哒哒哒）</p>
<p>枯叶散落在雨后的街</p>
<p>一片一片用泪水书写</p>
<p>痛觉</p>
 <br>

 <br>

 

<p>你没离开</p>
<p>你不释怀</p>
<p>你站在、夏天的边缘</p>
 <br>

<p>独自走在、夏天的边缘</p>
<br>

<h4 id="不快乐"><a href="#不快乐" class="headerlink" title="不快乐"></a>不快乐</h4><br>

<p>刚冲的咖啡凉了</p>
<p>窗外的灯全灭了</p>
<p>你还在桌前坐着</p>
<p>想熬到天都亮了</p>
 <br>

<p>你给我打电话了</p>
<p>你说你不想说话</p>
<p>我听着你沉默着</p>
<p>我心里泛起苦涩</p>
 <br>

 <br>

<p>你懂得、没有人完全快乐</p>
<p>我说了这句、忍不住挂了</p>
<p>我懂得、你只是想找人诉说</p>
<p>我有些后悔、我太狠心了</p>
 <br>

 <br>

<p>你不快乐</p>
<p>我以为你懂得</p>
<p>没有人能够轻易代替你快乐</p>
<p>不知道该如何抉择</p>
<p>情绪总是莫名的</p>
<p>你总是把伤痛都清楚记得</p>
 <br>

<p>你不快乐</p>
<p>我想你不值得</p>
<p>不值得因为挫折而放弃快乐</p>
<p>生命里那么多曲折</p>
<p>为什么不笑着呢</p>
<p>你可以抛开一切更快乐的</p>
 <br>

 <br>

 

 

<p>刚冲的咖啡凉了</p>
<p>窗外的灯全灭了</p>
<p>你还在桌前坐着</p>
<p>想熬到天都亮了</p>
 <br>

<p>你给我打电话了</p>
<p>你说你不想说话</p>
<p>我听着你沉默着</p>
<p>我心里泛起苦涩</p>
 <br>

 <br>

<p>你懂得、没有人完全快乐</p>
<p>我说了这句、忍不住挂了</p>
<p>我懂得、你只是想找人诉说</p>
<p>我有些后悔、我太狠心了</p>
 <br>

 <br>

<p>你不快乐</p>
<p>我以为你懂得</p>
<p>没有人能够轻易代替你快乐</p>
<p>不知道该如何抉择</p>
<p>情绪总是莫名的</p>
<p>你总是把伤痛都清楚记得</p>
 <br>

<p>你不快乐</p>
<p>我想你不值得</p>
<p>不值得因为挫折而放弃快乐</p>
<p>生命里那么多曲折</p>
<p>为什么不笑着呢</p>
<p>你可以抛开一切更快乐的</p>
 <br>

 <br>

 

 

<p>你可以抛开一切更快乐的</p>
 <br>

<p>你可以抛开一切、努力幸福着</p>
 <br>

<h4 id="原来的我"><a href="#原来的我" class="headerlink" title="原来的我"></a>原来的我</h4> <br>

<p>淡蓝色天空把阳光染成透明色</p>
<p>我抱着吉他回想起纸飞机的快乐</p>
<p>不知你是否还记得</p>
<p>书本上青春的颜色</p>
<p>那时的我说我会变得优秀而独特</p>
  <br>

<p>屋檐下的雨天我那时总是幻想着</p>
<p>一个人的大街我偶尔随风狂奔着</p>
<p>是否我注定追逐着</p>
<p>画面里纷飞的失落</p>
<p>有一些梦多么不舍得失去了轮廓</p>
  <br>

  <br>

<p>我说  原来的我</p>
<p>不拥有太多</p>
<p>有更多莫名的快乐</p>
  <br>

<p>你说  现在的我</p>
<p>总偷偷沉默</p>
<p>傻傻地伪装起落寞</p>
  <br>

<p>我说  原来的我</p>
<p>不会想太多</p>
<p>一天天随性地生活</p>
  <br>

<p>你说  现在的我</p>
<p>没从前洒脱</p>
<p>习惯了流浪中奔波   </p>
<p>遗失了太多</p>
 <br>

<h4 id="我的吉他"><a href="#我的吉他" class="headerlink" title="我的吉他"></a>我的吉他</h4> <br>

<p>我从高一开始学吉他</p>
<p>妈妈说要学就要学好他</p>
<p>我试着弹呐弹呐弹几下</p>
<p>手指头疼呐疼呐都不怕</p>
<br>

<p>我从高二试着编吉他</p>
<p>只是功夫太差没办法</p>
<p>我只能练啊练啊烦死啦</p>
<p>干脆就扔到一边不管啦</p>
<br>

<p>我的吉他 你陪我度过作业的轰炸</p>
<p>我的吉他 抱着你快乐就开始喧哗</p>
<p>我的吉他<br>你总是躲在墙角不说话</p>
<p>我爱你啊<br>我可爱的小小小小小吉他</p>
<br>

<p>（蹦吧啦蹦吧啦蹦吧啦）</p>
<br>

<p>我上高三放下了吉他</p>
<p>为学习我不得不收起他</p>
<p>等灰尘落满落满他肩膀</p>
<p>我忽然明白他也老了吧</p>
<br>

<p>我的吉他<br>你带我回到儿时夕阳下</p>
<p>我的吉他<br>有了你梦想拼命在挣扎</p>
<p>我的吉他<br>孤单时只有你陪我说话</p>
<p>我爱你啊<br>我孤独的呆呆傻傻木吉他</p>
<br>

<p>现在我还是爱弹吉他</p>
<p>只是技术依旧烂到家</p>
<p>不管它前路风吹又雨打</p>
<p>我有你什么统统都不怕</p>
<br>

<p>我的吉他 你给我自由勇气和一个家</p>
<p>我的吉他<br>有了你全世界都开满花</p>
<p>我的吉他<br>你总是替我说出心里话</p>
<p>我爱你啊<br>你爱我你是我的好吉他</p>
<br>

<h4 id="关于青春"><a href="#关于青春" class="headerlink" title="关于青春"></a>关于青春</h4><br>

<p>今天，昨天已经远离</p>
<p>晴天，阴天还在待续</p>
<p>每天，都怀念着过去</p>
<p>某天，日记里某一句</p>
 <br>

 <br>

<p>关于青春能说的太多</p>
<p>还记得那天我们手牵手</p>
<p>阳光洒落你身后</p>
<p>突然感觉好温柔</p>
<p>还以为就能这样到尽头</p>
<br>

<p>那树荫后那栋教学楼</p>
<p>你打开窗子冲我喊加油</p>
<p>我们说好了等候</p>
<p>冰淇淋店校门口</p>
<p>可是到如今只剩我一个</p>
<p>一个人走</p>
 <br>

 <br>

<p>我们，分别在那街角</p>
<p>我们，再也无法去寻找</p>
<p>有谁，还在脑海环绕</p>
<p>有谁，打开记忆的喧闹</p>
<br>


 <br>

<p>关于青春一直在错过</p>
<p>我们终究怎么去拥有</p>
<p>回不去的那么多</p>
<p>我们无力再挽留</p>
<p>只能闭上眼一步步走</p>
<br>

<p>那年冬天那团大雪球</p>
<p>滚远了青春我们剩什么</p>
<p>如果提及那承诺</p>
<p>谁还会去再追究</p>
<p>我们都渐渐明白了永久</p>
<br>

<p>关于青春我们那么弱</p>
<p>莫名其妙什么都不说</p>
<p>找不到的是理由</p>
<p>没有声音的借口</p>
<p>总以为什么都能够承受</p>
<br>

<p>如果那天我没有开口</p>
<p>你会不会傻傻的依旧</p>
<p>其实不必多足够</p>
<p>只是我们不成熟</p>
<p>我们说好藏记忆在角落</p>
<p>从今以后</p>
<br>



]]></content>
  </entry>
  <entry>
    <title>个人诗词集（2003-2010）</title>
    <url>/blog/2019/03/08/%E4%B8%AA%E4%BA%BA%E8%AF%97%E8%AF%8D%E9%9B%86%EF%BC%882003-2010%EF%BC%89/</url>
    <content><![CDATA[<h3 id="踏车行（2003）"><a href="#踏车行（2003）" class="headerlink" title="踏车行（2003）"></a>踏车行（2003）</h3><p>一条长蛇贯南北，千山万水形如飞。<br>渭水绵延腾浪过，江山如此展雄威。</p>
<br>



<h3 id="四月天-（2005）"><a href="#四月天-（2005）" class="headerlink" title="四月天 （2005）"></a>四月天 （2005）</h3><p>群鹜飞鸣楼宇间，莺歌燕舞碧云天。</p>
<p>细雨无边千百线，河烟濛阔起清涟。</p>
<p>两处山花两点丽，一弯路转一抹荫。</p>
<p>暮春四月皆绚艳，天人和洽尽欢颜。</p>
<br>



<h3 id="自愁（2005）"><a href="#自愁（2005）" class="headerlink" title="自愁（2005）"></a>自愁（2005）</h3><p>黑烟黄霭几时休？污水翻滚引入流。</p>
<p>可得一日清江水，草木丰茂碧悠悠。</p>
<br>



<h3 id="杂词-·-暮游张家界（2005）"><a href="#杂词-·-暮游张家界（2005）" class="headerlink" title="杂词 · 暮游张家界（2005）"></a>杂词 · 暮游张家界（2005）</h3><p>长庚初露，斜阳更助，如画天涯处。山衬红日水映树，美景引人赴。</p>
<p>峰岩直矗，峭壁生木，金蝉鸣不住。十里长廊诗画路，将心如醉入。</p>
<br>



<h3 id="一剪梅-·-心中秋感（2007-10-6）"><a href="#一剪梅-·-心中秋感（2007-10-6）" class="headerlink" title="一剪梅 · 心中秋感（2007.10.6）"></a>一剪梅 · 心中秋感（2007.10.6）</h3><p>六年风萧两彷徨，雁又空唱，叶雨落黄。梦中泪眼见秋霜，艳菊才爽，串红仍放。</p>
<p>心蕴秋波万里浪，更又无常，但却激昂。浪中回首愁更怅，秋潮见涨，天地苍茫。</p>
<br>



<h3 id="最相思（2008）"><a href="#最相思（2008）" class="headerlink" title="最相思（2008）"></a>最相思（2008）</h3><p>梦绕魂萦夜无休，柔眸泪盼伴情愁。</p>
<p>轻灰留恋风尘去，一眼怎容满城秋？</p>
<br>



<h3 id="沁园春-·-少年志（2008-1-25）"><a href="#沁园春-·-少年志（2008-1-25）" class="headerlink" title="沁园春 · 少年志（2008.1.25）"></a>沁园春 · 少年志（2008.1.25）</h3><p>几路人生？独上微楼，叹何苦忧。愿一身正气，邪风斫就；持恒破浪，图志不休。万里连云，风华漫道，更谁刚强搏劲流。拭惘雾，唤了却尘埃，是非缘由。</p>
<p>嚣烦陋世何求，藏正义光明于心头。望才华横溢，风骚韵润；宽仁睿智，自恃清秋。对斩重霜，立挥潇雪，安得尽扫千古愁。立壮志，正年值少时，抛炫风流。</p>
<br>



<h3 id="雪月（2008-1-27）"><a href="#雪月（2008-1-27）" class="headerlink" title="雪月（2008.1.27）"></a>雪月（2008.1.27）</h3><p>俯首深吟凭冷月，昂头浅唱对华星。</p>
<p>斩风横扫千秋雪，劈浪立挥万里云。</p>
<br>



<h3 id="题钰祥兄之马璐图（2009-12-5）"><a href="#题钰祥兄之马璐图（2009-12-5）" class="headerlink" title="题钰祥兄之马璐图（2009.12.5）"></a>题钰祥兄之马璐图（2009.12.5）</h3><p>春阳萦雪至，树影鸟鸣直。</p>
<p>泉间拂暖玉，莞尔璐如诗。</p>
<br>



<h3 id="浣溪沙-·-清明（2010-4-5）"><a href="#浣溪沙-·-清明（2010-4-5）" class="headerlink" title="浣溪沙 · 清明（2010.4.5）"></a>浣溪沙 · 清明（2010.4.5）</h3><p>闲枝浮梦沐日晴，短阳新柳柳无阴，空阶未雨暗花明。</p>
<p>清风掠水云自溢，暖絮萦烟泪空盈，门外花落谁堪听？</p>
<br>



<h3 id="江城子-·-二班必胜（2010-11-10）"><a href="#江城子-·-二班必胜（2010-11-10）" class="headerlink" title="江城子 · 二班必胜（2010.11.10）"></a>江城子 · 二班必胜（2010.11.10）</h3><p>甘苦与共一春秋，不曾丢，志满楼。五十六人，团结胜一筹。过关斩将谁与休，风华秀，英姿流。</p>
<p>挥汗如雨冷风投，暴雨后，人莫愁。针锋相对，拼搏何须由。二班学子志尚在，今虽败，不低头！</p>
]]></content>
  </entry>
  <entry>
    <title>什么都没写的二十三</title>
    <url>/blog/2017/09/24/%E4%BB%80%E4%B9%88%E9%83%BD%E6%B2%A1%E5%86%99%E7%9A%84%E4%BA%8C%E5%8D%81%E4%B8%89/</url>
    <content><![CDATA[<p>没错，我今天什么都没有写。</p>
<p>抄一首诗在这里。</p>
<blockquote>
<p>赵客缦胡缨，吴钩霜雪明。</p>
<p>银鞍照白马，飒沓如流星。</p>
<p>十步杀一人，千里不留行。</p>
<p>事了拂衣去，深藏身与名。</p>
<p>闲过信陵饮，脱剑膝前横。</p>
<p>将炙啖朱亥，持觞劝侯嬴。</p>
<p>三杯吐然诺，五岳倒为轻。</p>
<p>眼花耳热后，意气素霓生。 </p>
<p>救赵挥金槌，邯郸先震惊。</p>
<p>千秋二壮士，煊赫大梁城。</p>
<p>纵死侠骨香，不惭世上英。</p>
<p>谁能书阁下，白首太玄经。</p>
</blockquote>
<p>愿厚积而薄发。</p>
]]></content>
      <categories>
        <category>生日</category>
      </categories>
  </entry>
  <entry>
    <title>从模型到图形——我的实时渲染管线记录</title>
    <url>/blog/2020/06/30/%E4%BB%8E%E6%A8%A1%E5%9E%8B%E5%88%B0%E5%9B%BE%E5%BD%A2%E2%80%94%E2%80%94%E6%88%91%E7%9A%84%E6%B8%B2%E6%9F%93%E7%AE%A1%E7%BA%BF%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<p>在此回顾记录2019年12月实习期间编写Soft Renderer时的思考。</p>
<br>

<h2 id="主要模块"><a href="#主要模块" class="headerlink" title="主要模块"></a>主要模块</h2><hr>
<p>以下为我实现Soft Renderer时划分的主要模块</p>
<ul>
<li>坐标变换MVP + 视口变换</li>
<li>Bresenham划线算法</li>
<li>Scanline-Zbuffer多边形填充</li>
<li>Phong光照模型 + Phong着色</li>
<li>纹理映射（透视校正插值）</li>
</ul>
<br>

<h2 id="管线流程"><a href="#管线流程" class="headerlink" title="管线流程"></a>管线流程</h2><hr>
<h3 id="模型读取"><a href="#模型读取" class="headerlink" title="模型读取"></a>模型读取</h3><p>顶点的数据结构设定如下，其中<code>pos</code>，<code>normal</code>，<code>texcoord</code>从<code>.obj</code>文件中读取：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vertex</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	Vector3 pos;</span><br><span class="line">	Vector3 wPos;</span><br><span class="line">	Vector3 normal;</span><br><span class="line">	TexCoord texcoord;</span><br><span class="line">	COLORREF color;</span><br><span class="line">	<span class="keyword">float</span> rhw;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>三角面的数据结构如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Triangle</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	Vertex v[<span class="number">3</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<br>

<h3 id="坐标变换MVP-视口变换"><a href="#坐标变换MVP-视口变换" class="headerlink" title="坐标变换MVP + 视口变换"></a>坐标变换MVP + 视口变换</h3><p><em>本项目中采用的是Direct3D标准，即所有向量为行向量，乘法顺序为从左向右。</em></p>
<br>

<h4 id="Model-Matrix"><a href="#Model-Matrix" class="headerlink" title="Model Matrix"></a>Model Matrix</h4><p>模型读取完成后，首先对模型本身的平移(Translate)、旋转(Rotate)、缩放(Scale)三种变换进行处理。</p>
<p>TRS中，必须保证T要在最后相乘。<br>$$<br>Model Matrix &#x3D; Scale \times Rotation \times Translate<br>$$</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Transform::UpdateModelMatrix</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	modelMatrix = scale * rotation * translate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<h5 id="Scale"><a href="#Scale" class="headerlink" title="Scale"></a>Scale</h5><p>Scale矩阵的设置为：<br>$$<br>\left[<br>\begin{matrix}<br>scaleX &amp; 0 &amp; 0 &amp; 0 \\<br>0 &amp; scaleY &amp; 0 &amp; 0 \\<br>0 &amp; 0 &amp; scaleZ &amp; 0 \\<br>0 &amp; 0 &amp; 0 &amp; 1<br>\end{matrix}<br>\right]<br>$$</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Transform::SetScale</span><span class="params">(<span class="keyword">float</span> x, <span class="keyword">float</span> y, <span class="keyword">float</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Matrix44 s = Matrix44::Identity();</span><br><span class="line">	s.m[<span class="number">0</span>][<span class="number">0</span>] = x;</span><br><span class="line">	s.m[<span class="number">1</span>][<span class="number">1</span>] = y;</span><br><span class="line">	s.m[<span class="number">2</span>][<span class="number">2</span>] = z;</span><br><span class="line">	scale = s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<h5 id="Rotation"><a href="#Rotation" class="headerlink" title="Rotation"></a>Rotation</h5><p>欧拉旋转的顺序参照Unity标准，即ZXY。<br>$$<br>Rotation &#x3D; Rz \times Rx \times Ry<br>$$<br>其中绕不同轴的Rotation矩阵的设置为：<br>$$<br>Rx &#x3D;<br>\left[<br>\begin{matrix}<br>1 &amp; 0 &amp; 0 &amp; 0\\<br>0 &amp; \cos x &amp; \sin x &amp; 0\\<br>0 &amp; -\sin x &amp; \cos x &amp; 0 \\<br>0 &amp; 0 &amp; 0 &amp; 1<br>\end{matrix}<br>\right]<br>Ry &#x3D;<br>\left[<br>\begin{matrix}<br>\cos y &amp; 0 &amp; -\sin y &amp; 0 \\<br>0 &amp; 1 &amp; 0 &amp; 0 \\<br>\sin y &amp; 0 &amp; \cos y &amp; 0 \\<br>0 &amp; 0 &amp; 0 &amp; 1<br>\end{matrix}<br>\right]<br>Rz &#x3D;<br>\left[<br>\begin{matrix}<br>\cos z &amp; \sin z &amp; 0 &amp; 0 \\<br>-\sin z &amp; \cos z &amp; 0 &amp; 0 \\<br>0 &amp; 0 &amp; 1 &amp; 0 \\<br>0 &amp; 0 &amp; 0 &amp; 1<br>\end{matrix}<br>\right]<br>$$</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Transform::SetRotation</span><span class="params">(<span class="keyword">float</span> x, <span class="keyword">float</span> y, <span class="keyword">float</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Matrix44 rx = Matrix44::Identity();</span><br><span class="line">	Matrix44 ry = Matrix44::Identity();</span><br><span class="line">	Matrix44 rz = Matrix44::Identity();</span><br><span class="line"></span><br><span class="line">	rx.m[<span class="number">1</span>][<span class="number">1</span>] = cosf(D2R(x));</span><br><span class="line">	rx.m[<span class="number">2</span>][<span class="number">2</span>] = cosf(D2R(x));</span><br><span class="line">	rx.m[<span class="number">2</span>][<span class="number">1</span>] = -sinf(D2R(x));</span><br><span class="line">	rx.m[<span class="number">1</span>][<span class="number">2</span>] = sinf(D2R(x));</span><br><span class="line"></span><br><span class="line">	ry.m[<span class="number">2</span>][<span class="number">2</span>] = cosf(D2R(y));</span><br><span class="line">	ry.m[<span class="number">0</span>][<span class="number">0</span>] = cosf(D2R(y));</span><br><span class="line">	ry.m[<span class="number">0</span>][<span class="number">2</span>] = -sinf(D2R(y));</span><br><span class="line">	ry.m[<span class="number">2</span>][<span class="number">0</span>] = sinf(D2R(y));</span><br><span class="line"></span><br><span class="line">	rz.m[<span class="number">0</span>][<span class="number">0</span>] = cosf(D2R(z));</span><br><span class="line">	rz.m[<span class="number">1</span>][<span class="number">1</span>] = cosf(D2R(z));</span><br><span class="line">	rz.m[<span class="number">1</span>][<span class="number">0</span>] = -sinf(D2R(z));</span><br><span class="line">	rz.m[<span class="number">0</span>][<span class="number">1</span>] = sinf(D2R(z));</span><br><span class="line"></span><br><span class="line">	rotation = rz * rx * ry;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中<code>D2R</code>函数含义为Degree to Radian</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">float</span> PI = <span class="number">3.14159265358f</span>;</span><br><span class="line"><span class="function"><span class="keyword">const</span> <span class="keyword">float</span> <span class="title">D2R</span><span class="params">(<span class="keyword">float</span> deg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> deg * PI / <span class="number">180</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Rotation矩阵必然正交</strong>，原理为：<br>$$<br>\left[<br>\begin{matrix}<br>1 &amp; 0 &amp; 0 &amp; 0 \\<br>0 &amp; 1 &amp; 0 &amp; 0 \\<br>0 &amp; 0 &amp; 1 &amp; 0 \\<br>0 &amp; 0 &amp; 0 &amp; 1<br>\end{matrix}<br>\right]<br>\text {（原坐标轴）}<br>\times R &#x3D;<br>R\text {（新坐标轴）}<br>$$<br>经旋转后的新坐标轴必然保持正交。</p>
<br>

<h5 id="Translate"><a href="#Translate" class="headerlink" title="Translate"></a>Translate</h5><p>Translate矩阵的设置为：<br>$$<br>\left[<br>\begin{matrix}<br>1 &amp; 0 &amp; 0 &amp; 0 \\<br>0 &amp; 1 &amp; 0 &amp; 0 \\<br>0 &amp; 0 &amp; 1 &amp; 0 \\<br>TranslateX &amp; TranslateY &amp; TranslateZ &amp; 1<br>\end{matrix}<br>\right]<br>$$</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Transform::SetTranslate</span><span class="params">(<span class="keyword">float</span> x, <span class="keyword">float</span> y, <span class="keyword">float</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Matrix44 t = Matrix44::Identity();</span><br><span class="line">	t.m[<span class="number">3</span>][<span class="number">0</span>] = x;</span><br><span class="line">	t.m[<span class="number">3</span>][<span class="number">1</span>] = y;</span><br><span class="line">	t.m[<span class="number">3</span>][<span class="number">2</span>] = z;</span><br><span class="line">	translate = t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<h4 id="View-Matrix"><a href="#View-Matrix" class="headerlink" title="View Matrix"></a>View Matrix</h4><p>接下来，需要将顶点由World Space转入View Space，思路为：<br>$$<br>任一点  \xrightarrow{Follow} 相机 \xrightarrow{Translate} 原点 \xrightarrow{Rotate} 将uvw旋转至与xyz重合<br>$$<br>相机的数据结构为：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Camera</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	Vector3 pos;</span><br><span class="line">	Vector3 lookAt;</span><br><span class="line">	Vector3 up;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>求出View Space的坐标向量uvw：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Vector3 forward = (camera.lookAt - camera.pos).Normalize();</span><br><span class="line">Vector3 right = (camera.up ^ forward).Normalize();</span><br><span class="line">Vector3 up = (forward ^ right).Normalize();</span><br></pre></td></tr></table></figure>

<p>$$<br>u &#x3D; right \\v &#x3D; up \\w &#x3D; forward<br>$$</p>
<p>接下来的目标是将View Space的坐标轴uvw乘以View Matrix变换至与World Space的坐标轴xyz重合，即：<br>$$<br>u \rightarrow x \\v \rightarrow y \\w \rightarrow z<br>$$<br>而由上述思路可知：<br>$$<br>Matrix_{view} &#x3D; M_T \times M_R<br>$$<br>首先易知：<br>$$<br>M_T &#x3D;\left[\begin{matrix}1 &amp; 0 &amp; 0 &amp; 0 \\0 &amp; 1 &amp; 0 &amp; 0 \\0 &amp; 0 &amp; 1 &amp; 0 \\-Camera_{posX} &amp; -Camera_{posY} &amp; -Camera_{posZ} &amp; 1\end{matrix}\right]<br>$$<br>乘以$M_T$后，此时两坐标系原点已重合，然后考虑 $M_R$，首先考虑其逆过程$xyz \rightarrow uvw $：</p>
<p><em>（uvw为方向向量，不会因上一步的平移而改变）</em><br>$$<br>[1, 0, 0] \times R &#x3D; [u_x, u_y, u_z] \\ [0, 1, 0] \times R &#x3D; [v_x, v_y, v_z] \\ [0, 0, 1] \times R &#x3D; [w_x, w_y, w_z]<br>$$<br>则对于$uvw \rightarrow xyz $<br>$$<br>M_R &#x3D; R^{-1}<br>$$<br>由<strong>旋转矩阵必正交</strong>可得：<br>$$<br>R^{-1} &#x3D; R^T<br>$$<br>则<br>$$<br>M_R &#x3D; R^T &#x3D;\left[\begin{matrix}u_x &amp; v_x &amp; w_x &amp; 0 \\u_y &amp; v_y &amp; w_y &amp; 0 \\u_z &amp; v_z &amp; w_z &amp; 0 \\0 &amp; 0 &amp; 0 &amp; 1\end{matrix}\right]<br>$$<br>最终代码为：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Matrix44 t = Matrix44::Identity();</span><br><span class="line">t.m[<span class="number">3</span>][<span class="number">0</span>] = -camera.pos.x;</span><br><span class="line">t.m[<span class="number">3</span>][<span class="number">1</span>] = -camera.pos.y;</span><br><span class="line">t.m[<span class="number">3</span>][<span class="number">2</span>] = -camera.pos.z;</span><br><span class="line"></span><br><span class="line">Matrix44 r = Matrix44::Identity();</span><br><span class="line">r.m[<span class="number">0</span>][<span class="number">0</span>] = right.x;</span><br><span class="line">r.m[<span class="number">1</span>][<span class="number">0</span>] = right.y;</span><br><span class="line">r.m[<span class="number">2</span>][<span class="number">0</span>] = right.z;</span><br><span class="line">r.m[<span class="number">0</span>][<span class="number">1</span>] = up.x;</span><br><span class="line">r.m[<span class="number">1</span>][<span class="number">1</span>] = up.y;</span><br><span class="line">r.m[<span class="number">2</span>][<span class="number">1</span>] = up.z;</span><br><span class="line">r.m[<span class="number">0</span>][<span class="number">2</span>] = forward.x;</span><br><span class="line">r.m[<span class="number">1</span>][<span class="number">2</span>] = forward.y;</span><br><span class="line">r.m[<span class="number">2</span>][<span class="number">2</span>] = forward.z;</span><br><span class="line"></span><br><span class="line">viewMatrix = t * r;</span><br></pre></td></tr></table></figure>

<br>

<h4 id="Projection-Matrix"><a href="#Projection-Matrix" class="headerlink" title="Projection Matrix"></a>Projection Matrix</h4><p>接下来进行透视变换，透视变换的过程为：<br>$$<br>视锥体 \xrightarrow{透视矩阵} Clip Space  \xrightarrow{透视除法} NDC<br>$$<br>其中，Direct3D的NDC(Normalized Device Coordinate)范围为 $[-1, 1] [-1, 1] [0, 1]$</p>
<p>定义屏幕宽高比为<code>aspect</code>，Y方向的视场角为<code>fovy</code>，相机到近平面与远平面的距离分别为$ N $和$ F $</p>
<p>现在，我们试图将视锥体内的顶点线性映射至NDC空间，可得：<br>$$<br>x’ &#x3D; x \frac {1}{z\tan \frac{fovx}{2}} \\<br>y’ &#x3D; y \frac {1}{z\tan \frac{fovy}{2}} \\<br>z’ &#x3D; \frac{z - N}{F - N}<br>$$<br>想要将以上形式写成矩阵乘法形式非常困难，主要原因是$x’$和$y’$之中多出一个$\frac1z$，而且$z’$中的$z$无法提出为因式，于是这里我们需要使用一个<strong>十分重要的trick</strong>：</p>
<p>由于z值的最终用途是比较顶点深度，并不需要精确映射，仅需满足在$(N, 0)$点到$(F, 1)$点之间保持单调即可。同时，我们先从$x’$和$y’$中提出公因子$\frac1z$，等到矩阵乘法之后再做处理，于是我们可以先将投影矩阵写为：<br>$$<br>\left[<br>\begin{matrix}<br>\cot(fovx&#x2F;2) &amp; 0 &amp; 0 &amp; 0 \\<br>0 &amp; \cot(fovy&#x2F;2) &amp; 0 &amp; 0 \\<br>0 &amp; 0 &amp; a &amp; 1 \\<br>0 &amp; 0 &amp; b &amp; 0<br>\end{matrix}<br>\right]<br>$$<br>其中$a$和$b$为待求未知数，而<strong>其中的1巧妙地将变换前的$z$保存在变换后的$w’$中</strong>，此时：<br>$$<br>x’ &#x3D; x \cot (fovx&#x2F;2) \\<br>y’ &#x3D; y \cot (fovy&#x2F;2) \\<br>z’ &#x3D; az + b \\<br>w’ &#x3D; z<br>$$<br>此时进行透视除法(Perspective provider)，即除以$w’$，得到如下结果：<br>$$<br>x’ &#x3D; \frac 1z x \cot (fovx&#x2F;2) \\<br>y’ &#x3D; \frac 1z y \cot (fovy&#x2F;2) \\<br>z’ &#x3D; \frac {az + b}{z} \\<br>w’ &#x3D; 1<br>$$<br>其中$x’$和$y’$完全符合要求，$z’ &#x3D; \frac {az + b}{z}$ 为反比例函数，在$[N, F]$区间内必然单调，符合要求。</p>
<p>将$(N, 0)$和$(F, 1)$点代入该式，得：<br>$$<br>\begin{cases}<br>\frac {aN + b}{N} &#x3D; 0 \\<br>\frac {aF + b}{F} &#x3D; 1<br>\end{cases}<br>$$<br>解得：<br>$$<br>\begin{cases}<br>a &#x3D; \frac {F}{F - N} \\<br>b &#x3D; \frac {-NF}{F - N}<br>\end{cases}<br>$$<br>设$Q &#x3D; \frac {F}{F - N}$，则最终：<br>$$<br>\left[<br>\begin{matrix}<br>\cot(fovx&#x2F;2) &amp; 0 &amp; 0 &amp; 0 \\<br>0 &amp; \cot(fovy&#x2F;2) &amp; 0 &amp; 0 \\<br>0 &amp; 0 &amp; Q &amp; 1 \\<br>0 &amp; 0 &amp; -NQ &amp; 0<br>\end{matrix}<br>\right]<br>$$</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Transform::SetprojectionMatrix</span><span class="params">(<span class="keyword">float</span> fovy, <span class="keyword">float</span> w, <span class="keyword">float</span> h, <span class="keyword">float</span> zn, <span class="keyword">float</span> zf)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">float</span> aspect = w / h;</span><br><span class="line">	<span class="keyword">float</span> cot = <span class="number">1</span> / tanf(fovy * <span class="number">0.5f</span>);</span><br><span class="line">	<span class="keyword">float</span> Q = zf / (zf - zn);</span><br><span class="line"></span><br><span class="line">	Matrix44 p;</span><br><span class="line">	p.m[<span class="number">0</span>][<span class="number">0</span>] = cot / aspect;</span><br><span class="line">	p.m[<span class="number">1</span>][<span class="number">1</span>] = cot;</span><br><span class="line">	p.m[<span class="number">2</span>][<span class="number">2</span>] = Q;</span><br><span class="line">	p.m[<span class="number">3</span>][<span class="number">2</span>] = -Q * zn;</span><br><span class="line">	p.m[<span class="number">2</span>][<span class="number">3</span>] = <span class="number">1</span>;</span><br><span class="line">	projectionMatrix = p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意，这一步中<strong>最终深度信息z并非线性映射</strong>，其函数二阶导小于0，即z经映射后更接近于远平面。</p>
<br>

<h4 id="Viewport-Matrix"><a href="#Viewport-Matrix" class="headerlink" title="Viewport Matrix"></a>Viewport Matrix</h4><p>最后一步，视口变换本质上是将顶点从NDC空间映射至视口空间，即为：<br>$$<br>NDC \rightarrow Viewport \\<br>x: [-1, 1] \rightarrow [x_0, x_0 + width] \\<br>y: [-1, 1] \rightarrow [y_0, y_0 + height] \\<br>z: [0, 1] \rightarrow [z_{min}, z_{max}]<br>$$<br>首先进行区间缩放，缩放矩阵如下，其中Viewport坐标系Y轴竖直向下，需要与之前取反：<br>$$<br>\left[<br>\begin{matrix}<br>\frac{width}2 &amp; 0 &amp; 0 &amp; 0 \\<br>0 &amp; -\frac{height}2 &amp; 0 &amp; 0 \\<br>0 &amp; 0 &amp; z_{max} - z_{min} &amp; 0 \\<br>0 &amp; 0 &amp; 0 &amp; 1<br>\end{matrix}<br>\right]<br>$$<br>缩放后的区间为：<br>$$<br>x: [-1, 1] \rightarrow [-\frac{width}2, \frac{width}2] \\<br>y: [-1, 1] \rightarrow [-\frac{height}2, \frac{height}2] \\<br>z: [0, 1] \rightarrow [0, z_{max} - z_{min}]<br>$$<br>之后我们需要平移矩阵与Viewport区间进行对齐：<br>$$<br>\left[<br>\begin{matrix}<br>1 &amp; 0 &amp; 0 &amp; 0 \\<br>0 &amp; 1 &amp; 0 &amp; 0 \\<br>0 &amp; 0 &amp; 1 &amp; 0 \\<br>x_0 + \frac{width}2 &amp; y_0 + \frac{height}2 &amp; z_{min} &amp; 1<br>\end{matrix}<br>\right]<br>$$<br>两矩阵相乘则得到Viewport Matrix如下：<br>$$<br>\left[<br>\begin{matrix}<br>\frac{width}2 &amp; 0 &amp; 0 &amp; 0 \\<br>0 &amp; -\frac{height}2 &amp; 0 &amp; 0 \\<br>0 &amp; 0 &amp; z_{max} - z_{min} &amp; 0 \\<br>x_0 + \frac{width}2 &amp; y_0 + \frac{height}2 &amp; z_{min} &amp; 1<br>\end{matrix}<br>\right]<br>$$</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Transform::SetViewportMatrix</span><span class="params">(<span class="keyword">float</span> x, <span class="keyword">float</span> y, <span class="keyword">float</span> w, <span class="keyword">float</span> h, <span class="keyword">float</span> zmin = <span class="number">0</span>, <span class="keyword">float</span> zmax = <span class="number">1</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Matrix44 vp = Matrix44::Identity();</span><br><span class="line">	vp.m[<span class="number">0</span>][<span class="number">0</span>] = w * <span class="number">0.5f</span>;</span><br><span class="line">	vp.m[<span class="number">3</span>][<span class="number">0</span>] = x + w * <span class="number">0.5f</span>;</span><br><span class="line">	vp.m[<span class="number">1</span>][<span class="number">1</span>] = -h * <span class="number">0.5f</span>;</span><br><span class="line">	vp.m[<span class="number">3</span>][<span class="number">1</span>] = y + h * <span class="number">0.5f</span>;</span><br><span class="line">	vp.m[<span class="number">2</span>][<span class="number">2</span>] = zmax - zmin;</span><br><span class="line">	vp.m[<span class="number">3</span>][<span class="number">2</span>] = zmin;</span><br><span class="line">	viewportMatrix = vp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<h3 id="Bresenham划线算法"><a href="#Bresenham划线算法" class="headerlink" title="Bresenham划线算法"></a>Bresenham划线算法</h3><p>该算法主要用于模型的线框显示，主要思路是通过增量绘制而减少乘除，同时通过乘2的方式避免浮点数出现，最终提高绘制效率。</p>
<p>具体算法细节暂略。</p>
<br>

<h3 id="Scanline-Zbuffer多边形填充"><a href="#Scanline-Zbuffer多边形填充" class="headerlink" title="Scanline-Zbuffer多边形填充"></a>Scanline-Zbuffer多边形填充</h3><p>该阶段主要进行三角面内部颜色的填充。</p>
<p>首先根据y值对顶点进行排序为v0, v1, v2。</p>
<p>然后分别计算三条线段上x线性插值系数随y增加而累加的步长</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">float</span> step01 = (v1.pos.y - v0.pos.y) == <span class="number">0</span> ? <span class="number">0</span> : <span class="number">1</span> / (v1.pos.y - v0.pos.y);</span><br><span class="line"><span class="keyword">float</span> step02 = (v2.pos.y - v0.pos.y) == <span class="number">0</span> ? <span class="number">0</span> : <span class="number">1</span> / (v2.pos.y - v0.pos.y);</span><br><span class="line"><span class="keyword">float</span> step12 = (v2.pos.y - v1.pos.y) == <span class="number">0</span> ? <span class="number">0</span> : <span class="number">1</span> / (v2.pos.y - v1.pos.y);</span><br></pre></td></tr></table></figure>

<p>第一段，从v0出发，对线段v0v1和v0v2之间区域进行水平扫描线填充：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> scanlineY = (<span class="keyword">int</span>)v0.pos.y;</span><br><span class="line"><span class="keyword">for</span> (; scanlineY &lt; v1.pos.y; scanlineY++)</span><br><span class="line">&#123;</span><br><span class="line">	ScanLine(scanlineY, x01, x02, Vertex::Lerp(v0, v1, k01), Vertex::Lerp(v0, v2, k02));</span><br><span class="line"></span><br><span class="line">	k01 += step01;</span><br><span class="line">	k02 += step02;</span><br><span class="line"></span><br><span class="line">	x01 = (<span class="keyword">int</span>)LerpFloat(v0.pos.x, v1.pos.x, k01);</span><br><span class="line">	x02 = (<span class="keyword">int</span>)LerpFloat(v0.pos.x, v2.pos.x, k02);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第二段，从v1处继续，对线段v1v2和v0v2之间区域进行水平扫描线填充：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (; scanlineY &lt;= v2.pos.y; scanlineY++)</span><br><span class="line">&#123;</span><br><span class="line">	ScanLine(scanlineY, x12, x02, Vertex::Lerp(v1, v2, k12), Vertex::Lerp(v0, v2, k02));</span><br><span class="line"></span><br><span class="line">	k12 += step12;</span><br><span class="line">	k02 += step02;</span><br><span class="line">		</span><br><span class="line">	x12 = (<span class="keyword">int</span>)LerpFloat(v1.pos.x, v2.pos.x, k12);</span><br><span class="line">	x02 = (<span class="keyword">int</span>)LerpFloat(v0.pos.x, v2.pos.x, k02);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中填充像素时，需要将待绘制像素的z值与zBuffer中z值比较：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RenderBuffer::FillPixel</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">float</span> z, COLORREF c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (y &gt;= height || y &lt; <span class="number">0</span> || x &gt;= width || x &lt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (z &gt;= <span class="number">0</span> &amp;&amp; z &lt; zBuffer[x + y * width])</span><br><span class="line">	&#123;</span><br><span class="line">		zBuffer[x + y * width] = z;</span><br><span class="line">		frameBuffer[x + y * width] = c;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<h3 id="Phong光照模型-Phong着色"><a href="#Phong光照模型-Phong着色" class="headerlink" title="Phong光照模型 + Phong着色"></a>Phong光照模型 + Phong着色</h3><p>下面采用Phong光照模型为物体添加光照，以正确显示其在Directional Light下的颜色。</p>
<p>Phong着色与Gourand着色对应，指的是在片元着色器阶段而不是在顶点着色器阶段计算光照。</p>
<p>Directional Light的数据结构为：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DirectionalLight</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	Vector3 direction;</span><br><span class="line">	Vector3 color;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>Phong光照模型中<br>$$<br>Phong &#x3D; Ambient + Diffuse + Specular<br>$$<br>其中与Directional Light无关的环境光Ambient非常简单：<br>$$<br>Ambient &#x3D; AmbientColor \times AmbientStrength<br>$$<br>漫反射Diffuse和镜面反射Specular则需要分别计算其因子，然后与光照颜色和片元颜色相乘：<br>$$<br>Diffuse &#x3D; LightColor \times Fragment Color \times DiffuseFactor \\<br>Specular &#x3D; LightColor \times Fragment Color \times SpecularFactor<br>$$<br>漫反射因子公式为：<br>$$<br>DiffuseFactor &#x3D; L \cdot N<br>$$<br>其中，入射光方向$L$为<code>-DirectionalLight.direction</code>，法向量方向$N$的计算稍后讲解。</p>
<p>镜面反射因子公式为，其中$shininess$越大，高光部分越密集：<br>$$<br>SpecularFactor &#x3D; (R \cdot V)^{shininess}<br>$$<br>其中，画图计算易得反射光方向R与视线方向V：<br>$$<br>R &#x3D; 2N(L \cdot N) - L \\<br>V &#x3D; CameraPos - FragmentWorldPos<br>$$<br>以上代码如下，注意颜色相乘时需要使用哈达玛积(Hadamard Product)使对应分量相乘：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">Vector3 <span class="title">DirectionalLight::Apply</span><span class="params">(Vertex v, Camera camera)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	direction = direction.Normalize();</span><br><span class="line">	<span class="keyword">float</span> diffuseFactor = max(-direction * v.normal, <span class="number">0</span>);</span><br><span class="line">	Vector3 diffuse = Vector3::HadamardProduct(ColorToVector3(v.color), color) * diffuseFactor;</span><br><span class="line"></span><br><span class="line">	Vector3 reflect = Vector3::Reflect(-direction, v.normal).Normalize();</span><br><span class="line">	<span class="keyword">float</span> specularFactor = <span class="built_in">pow</span>(max(reflect * (camera.pos - v.wPos).Normalize(), <span class="number">0</span>), shininess);</span><br><span class="line">	Vector3 specular = Vector3::HadamardProduct(ColorToVector3(v.color), color) * specularFactor;</span><br><span class="line"></span><br><span class="line">	Vector3 result = diffuse + specular;</span><br><span class="line">	<span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>于是，光照计算中最重要的难点就是<strong>法向量变换</strong>，由于我们是在WorldSpace下进行光照计算，所以需要通过一个NormalMatrix将模型的法向量信息从LocalSpace变换到WorldSpace。</p>
<p>首先考虑切向量$T$的变换，取三角面两顶点$V1$，$V2$，则有：<br>$$<br>T &#x3D; V1 - V2<br>$$<br>记ModelMatrix为$M$，则变换后的切向量：<br>$$<br>T’ &#x3D; V1M - V2M &#x3D; (V1 - V2)M &#x3D; TM<br>$$<br>即<strong>切向量的变换矩阵与顶点完全相同</strong>。</p>
<p>而法向量与切向量必然始终垂直，记NormalMatrix为$M_N$则有：<br>$$<br>N \cdot T &#x3D; 0 \\<br>N’ \cdot T’ &#x3D; NM_N(TM)^T &#x3D; NM_NM^TT^T &#x3D; 0<br>$$<br>可得：<br>$$<br>M_NM^T &#x3D; I<br>$$<br>即：<br>$$<br>M_N &#x3D; (M^T)^{-1}<br>$$<br>由之前的顶点变换矩阵公式，且缩放矩阵$S^T &#x3D; S$，旋转矩阵正交，法向量<strong>平移无效</strong>，可知：<br>$$<br>M &#x3D; SRT \\<br>M_N &#x3D; (T^TR^TS^T)^{-1} &#x3D; S^{-1}R<br>$$<br>代码如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Transform::UpdateNormalMatrix</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	normalMatrix = scale.InverseDiagonal() * rotation;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">Matrix44 <span class="title">Matrix44::InverseDiagonal</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Matrix44 mt = *<span class="keyword">this</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		mt.m[i][i] = mt.m[i][i] == <span class="number">0</span> ? <span class="number">0</span> : <span class="number">1</span> / mt.m[i][i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> mt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<h3 id="纹理映射（透视校正插值）"><a href="#纹理映射（透视校正插值）" class="headerlink" title="纹理映射（透视校正插值）"></a>纹理映射（透视校正插值）</h3><p>之前在模型读取时，我们读取了三角形顶点所对应的纹理坐标<code>texcoord</code>，然而在求三角形内部纹理坐标时，如果直接在屏幕坐标系内对三角形内部的点进行重心插值<em>（或双线性插值，结果相同）</em>，则会得到不正确的结果，这主要由之前的透视变换造成，需要进行透视校正插值(Perspective-Correct Interpolation)。</p>
<p>画出一条线段$A(x_0, z_0)B(x_1, z_1)$透视投影在距离相机$d$的近平面上线段$a(u_0, d)b(u_1, d)$的图，其中待插值点$C(x, z)$投影在点$c(u, d)$，易得：<br>$$<br>\frac {x_0}{z_0} &#x3D; \frac {u_0}{d} \\<br>\frac {x_1}{z_1} &#x3D; \frac {u_1}{d} \\<br>\frac {x}{z} &#x3D; \frac {u}{d}<br>$$<br>设线段$ab$上线性插值系数为$s$，线段$AB$上线性插值系数为$t$，则有：<br>$$<br>u &#x3D; u_0 + s(u_1 - u_0) \\<br>x &#x3D; x_0 + t(x_1 - x_0) \\<br>z &#x3D; z_0 + t(z_1 - z_0)<br>$$<br>我们已知系数$s$，需要求正确的插值系数$t$，解得：<br>$$<br>t &#x3D; \frac{sz_0}{sz_0 + (1 - s)z_1}<br>$$<br>进一步得：<br>$$<br>\frac 1z &#x3D; (1 - s) \frac 1{z_0} + s \frac 1{z_1}<br>$$<br>若$AB$两点分别有属性$I_0I_1$，则插值后得到$C$点属性为：<br>$$<br>\frac Iz &#x3D; (1 - s) \frac {I_0}{z_0} + s \frac {I_1}{z_1}<br>$$<br>接下来问题的关键是，如何<strong>正确获取顶点在ViewSpace中的$z$值</strong>，此处不能直接使用透视除法后的顶点$z$值，因为其仅代表非线性映射后的深度值（我在这个问题上掉坑并找了三天BUG）。前文透视投影部分中提到，变换前的$z$保存在变换后的$w’$中，所以在进行透视除法之前，一定要注意保存一份RHW(Reciprocal of Homogeneous W, $\frac 1{w’}$)值备用。</p>
<p>此时，纹理坐标即为一个需要透视校正插值的属性$I$，于是代码如下，此处$\frac 1z$即等于RHW：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">float</span> z = <span class="number">1</span> / LerpFloat(v0.rhw, v1.rhw, k);</span><br><span class="line">r.rhw = <span class="number">1</span> / z;</span><br><span class="line"></span><br><span class="line">r.texcoord.x = z * LerpFloat(v0.texcoord.x * v0.rhw, v1.texcoord.x * v1.rhw, k);</span><br><span class="line">r.texcoord.y = z * LerpFloat(v0.texcoord.y * v0.rhw, v1.texcoord.y * v1.rhw, k);</span><br><span class="line"><span class="keyword">return</span> r;</span><br></pre></td></tr></table></figure>

<br>



<p>全文完，由纸质实习笔记整理而成。</p>
]]></content>
  </entry>
  <entry>
    <title>但愿直面 你的孤独</title>
    <url>/blog/2014/09/24/%E4%BD%86%E6%84%BF%E7%9B%B4%E9%9D%A2%20%E4%BD%A0%E7%9A%84%E5%AD%A4%E7%8B%AC/</url>
    <content><![CDATA[<p>“我不挽留，而他们也没再回来。”</p>
<p>我20岁，我会挽留，而我已不奢望他们再回来。</p>
<p>以孤独为话题，很容易就写得可笑而辛酸。</p>
<p>我是个念旧的人，或者说是一个喜欢赋予感情的的人。笔袋里的尺子，是初三的，上面有颗小磁铁，是从眼保仪上卸下来的，吸着枚一毛的硬币，2005年的；自动铅是前女友给的，陪伴我记录了17、18、19岁这三年，我不能扔了它。</p>
<p>可是你的旧物，你的朋友，你的才能，乃至你的生命，你所拥有的一切，不是总有一天会丢失的吗？</p>
<p>你本一无所有，是拥有带给你恐惧。</p>
<p>我一贯不赞成，将人生想象得苦闷而无聊，即使它本来的面目就是这样，我们要相信一些美好的，才能从这个拥挤的世界里看到光。亲情、友情、爱情，你总得相信几样，有些东西明知道是错的，还是要去坚守，何况，这世界本无对错。我相信孤独的力量，那么我的心里就有光，“从茫茫人海中一眼就能认出你，因为你的身上有别人没有的光芒”，这样的人一般都是“独行侠”。那么，孤独是朋友，我想认识他。</p>
<p>你曾经在生日的零点以后，收到一条有一条的祝福，你以为那就是不孤独；你曾经刚写完文章，就看到大家长长的回复，你以为那就是不孤独；你不会忘记，你17岁生日那天，抱着满满一大袋快要装不下的生日礼物上了公交车，你以为那就是不孤独。可是呢现在呢？有谁还会清楚地记得你的生日，有谁还会写长长的留言？你以为你孤独了，你失落，你悲伤，你觉得无所适从了。</p>
<p> “虽然言语的波浪永远在我们上面喧哗，而我们的深处却永远是沉默的。”</p>
<p>人生而孤独，以我此生仅限的经历来看，孤独是一种常态，而不孤独则是激发态。“回顾我有生以来的岁月，发现还是孤独的时间最多，我对世界呼喊了那么久，才知道自己的声带有问题，喊声的频率不对，没有人能听到，人生不就是如此吗？”我们将处并长时间处于孤独的道路上，你独自奋进的身影那么远，你的频率又有谁能知道呢？正因为这个世界充满了不友善，友善才显得格外珍贵；正因为人生而孤独，所以才对陪伴的人心存感激。孤独不是结果，而是一个美好的前提。</p>
<p>当你翻开好友列表，你有300好友，但你再也无法去打扰谁。你看着他们的动态，觉得他们恍若还未走远，但你已经无法再插话了。屏幕对面的人怎么样，你觉得他应该在忙，纵使他理你又怎样，你和他聊天，只不过是为了得到片刻的慰藉，你不可能一直得到慰藉，你也不可能凭此度过此生，你对朋友的依赖太深，就无法独立。</p>
<br>

<p>对面你的好朋友发一句“哦”，你竟无言以对。</p>
<p>不是累了倦了，不是友情淡了，而是你要长大了。</p>
<p>于是你放下手机，戴上耳机。</p>
<p>但愿直面，你的孤独。</p>
]]></content>
      <categories>
        <category>生日</category>
      </categories>
  </entry>
  <entry>
    <title>再见王子</title>
    <url>/blog/2012/09/24/%E5%86%8D%E8%A7%81%E7%8E%8B%E5%AD%90/</url>
    <content><![CDATA[<p>真实是唯一的信仰，自己是唯一的偶像。</p>
<br>


<p>很高兴我现在，我的十八岁，依然是这样。这篇文章有几段未完成的原稿，但是被我落在了兰州，很可惜，我已经忘得差不多了，这篇本来打算在高考之后就发表的文章，被我一拖再拖，没想到到了现在，却要在这漂泊异乡的时候写下来，作为给自己十八岁最好的礼物，这样子，貌似会更加的刻骨铭心吧。</p>
<p>十八岁生日，以前盼望了很久，总以为那会是很重要，很美好，很难忘的一天。然而，事实呢，在一个远离家乡陌生的地方，和一些还不是很熟的同学，想着想坐却坐不到的43，却还听着那些从前在43上天天听着的熟悉的歌，我想，这大概会是我十八年来最孤独最冷清最落寞的一次生日了吧，不过，成人礼么，或许就应该是这样一种特殊的历练，不是么？</p>
 <br>

<p>​       再见王子。</p>
<br>


<p>怎么说呢？在我的意识之中，或许存在着另一个平行时空，在那里住着另一个自己，他是一个很优秀的人，真的很优秀，而且他有一个很善良，很单纯，并且很可爱，当然也很喜欢他的女朋友。他总是很乐观，他总是会很自信地笑。面对困难，他总是比我更有勇气；遭遇挫折，他总是比我更加坚强。当我收获进步而暗自得意的时候，我总是能够看到他谦逊的姿态；当我遭受打击而倍感失落的时候，我总是能够看到他温暖的笑容。他就这样陪伴着我，像空气，像一阵风，像一个影子一般的存在。</p>
<p>他有着风一样的自由。他总会在人群之中穿梭，以自己的节奏。从一条大街到另一条大街，从一个路口到下一个路口，像风一样，逆着人潮，就这样穿过浮华与喧嚣，迈着坚定的步伐，带着灼热的目光，走向那未知的远方。</p>
<p>他有着近乎完美的品质，有一颗完美主义的心。每一个想做的事，他都会认真尝试；每出现一点瑕疵，他都会力争完美。他会弹吉他，会唱歌，会编曲，会制作，他会一切我想学或是正在学而尚未精通的东西，他精通历史、地理、数学、哲学，他比我更加博学多识。“天行健，君子以自强不息”，他总是想让自己更加优秀；“地势坤，君子以厚德载物”，他总是能够放下自私，真诚地对待一切。</p>
<p>他还有一张阳光一般明媚而温暖的侧脸。不管心情怎么样，他都会给周围的每一个人一份阳光，一份温暖的笑。他的乐观，他的自信，好像是我永远都学不到的财富。</p>
<p>正因为这样，他有很多好朋友，很多很多真诚的好朋友。</p>
<p>无论在什么样的环境下，他还是时刻保持着自己特立独行的姿态，坚守着自己的灵魂，他始终我行我素，他有着他的风格，他从不退缩。</p>
<p>他总喜欢顶风前行，我能感受到他炽烈的勇气；他总喜欢冒雨奔跑，我能感受到他挥洒的执着。无论认定的方向多么深不可测，他都会选择尝试；无论四周的黑暗多么浓厚而沉重，他都会握紧光明。</p>
<p>因为他有着纯真的梦想，并且他知道，梦想总会到达。</p>
<br>

<p>而现在呢？</p>
<br>


<p>他微笑的脸，好久不见。</p>
<br>


<p>我离开了他住的城市，离开了他无比热爱着的家乡，离开了他熟悉的街道，离开了他所习惯的生活的色调。</p>
<p>嘿，我是要离开他了么？</p>
<br>


<p>再见，王子。</p>
<br>

<p>要和从前略带稚气的自己告别，却又要紧紧地握住一个真实的自己，这会是一种怎样的蜕变。</p>
<p>我不知道。</p>
<br>


<p>仿佛又能看见他，看到他温暖的侧脸，他就那样像往常一样微笑着对我说：“你可以的。”</p>
<p>是的，我可以的。</p>
<p>我会并着你的勇气一起坚持。</p>
<br>


<p>再见吧，我的王子，梦想还没有消失。</p>
<p>再见吧，王子。</p>
<br>

 <br>

 <br>

 <br>

<p>再见，王子</p>
]]></content>
      <categories>
        <category>生日</category>
      </categories>
  </entry>
  <entry>
    <title>十七岁、我所认为的美好</title>
    <url>/blog/2011/09/24/%E5%8D%81%E4%B8%83%E5%B2%81%E3%80%81%E6%88%91%E6%89%80%E8%AE%A4%E4%B8%BA%E7%9A%84%E7%BE%8E%E5%A5%BD/</url>
    <content><![CDATA[<p>十七，一个简单的数字，在我心里有种说不出的感觉。没有十八岁成人礼的重要，十七岁的生日，很平淡的样子，没有什么纷扰，只有我最爱的自由，一个人，坐在这里，写下这篇文章。</p>
<p>还有最后一年，我对自己说。还有最后一年我可以称自己为未成年，还有最后一年我可以犯傻与推脱，可是我早不该这样了，我知道。</p>
<p>关于独立，关于成熟，我不想说太多，以前的我或许看起来像一个小男生，但我一直更愿意让别人觉得我是一个大男孩。而现在的我，是一个大男孩，没问题。</p>
<p>17岁的大男孩，没有什么可以阻挡我的方向。我有我的信仰，我有我的光芒，我有我的意志，我有我的疯狂，这些都是我的，这些也都是构成我必不可少的要素。这个世界上独一无二的我，是我坚定不移地放在心里的，小太阳。</p>
<p>我不够闪亮，没关系，平凡的温暖就是我最大的亮点；我不够优秀，没关系，炽热的执著会是我最终的强音。    ——小太阳宣言</p>
<p>翻着以前的说说，也找到了这条曾经发表的《小太阳宣言》。不可否认的是，我一直在变，从稚气到成熟，从昏惑到透彻，慢慢地学会控制自己的情绪，慢慢地学会了感性与理性的调配。每一次的痛苦都是一次成长，我也深刻地体会到了这句话。我知道我还会这样继续变下去，但是，那个独一无二的我是绝对不能改变的，小太阳的精神，必须坚守。</p>
<p>快乐，提到快乐，我说过，没有人能够使我不快乐，除了我自己。所以说，保有一颗乐观的心，比什么都重要。</p>
<p>最后，想说一下珍惜与感恩。世界上没有哪个人是应该对我好的，这一点我应该明白。我要感谢，感谢现在还在我身边陪伴着的人，感谢那些一直默默支持并关心我的人，感谢所有喜欢或是曾经喜欢过我的人，感谢那些在乎我且真心对我好的人，感谢父母，最后，感谢自己。</p>
 <br>

 


<p>十七岁</p>
<p>相信一切美好的，就这样吧。</p>
]]></content>
      <categories>
        <category>生日</category>
      </categories>
  </entry>
  <entry>
    <title>卖萌的臭傻逼</title>
    <url>/blog/2015/06/27/%E5%8D%96%E8%90%8C%E7%9A%84%E8%87%AD%E5%82%BB%E9%80%BC/</url>
    <content><![CDATA[<p>今天，我遇到一个卖萌的臭傻逼。</p>
<p>他一直在图书馆窗子外面叫，</p>
<p>喵了个咪的。</p>
<p>整个图书馆的人都嫌他烦。</p>
<p>断断续续，</p>
<p>叫了一下午。</p>
<p>他一直在外面窗台上走来走去。</p>
<p>他好像想进图书馆。</p>
<p>他是黄色的。</p>
<p>外面一直在下雨。</p>
<p>我想过去把他放进来，</p>
<p>但是不是会影响同学们学习。</p>
<p>算了不装逼了。</p>
<p>雨越下越大。</p>
<p>叫声越来越惨。</p>
<p>有几个人时不时看他，</p>
<p>然后又低头学习。</p>
<p>我戴上眼镜看他。</p>
<p>确实是黄色的。</p>
<p>不看了学习。</p>
<p>他是不是被淋了。</p>
<p>淋死了咋办。</p>
<p>算了学习。</p>
<p>关我毛事。</p>
<p>不行我要去救他。</p>
<p>回宿舍拿伞。</p>
<p>我先去图书馆后面看看。</p>
<p>从来没去过。</p>
<p>就当探险了。</p>
<p>没戴眼镜看不清路。</p>
<p>算了踩水里就不好玩了。</p>
<p>回去拿伞。</p>
<p>回到了图书馆。</p>
<p>怎么不见了。</p>
<p>是不是死了。</p>
<p>就当他死了吧。</p>
<p>十分钟后。</p>
<p>这鸟人怎么又来了。</p>
<p>叫得一声比一声惨。</p>
<p>图书馆的同学们又看他。</p>
<p>你们为什么没人去救他。</p>
<p>我再看他一眼我就学习。</p>
<p>他好像在看我。</p>
<p>不行我还没有学习。</p>
<p>不行我出去一趟。</p>
<p>我拿着我的超级无敌酷炫加强版大黑伞。</p>
<p>我觉得我一定是遗传了我爷我爸救麻雀救蛇救斑鸠的**基因</p>
<p>我走向黑暗的图书馆背面。</p>
<p>这次戴眼镜了。</p>
<p>好像可以过去。</p>
<p>墙边没水坑。</p>
<p>我顺着墙。</p>
<p>前面是窗子了。</p>
<p>我看见他了。</p>
<p>确实是黄色的。</p>
<p>咪咪。</p>
<p>他不过来。</p>
<p>好像有所防备。</p>
<p>扔个树枝过去看看。</p>
<p>他没有去捡树枝。</p>
<p>后悔没带吃的。</p>
<p>不能再向前了。</p>
<p>否则就被图书馆里的同学们看到了。</p>
<p>那样太逗比了。</p>
<p>我蹲下从窗台下面偷偷过去。</p>
<p>这好像叫做蛙步。</p>
<p>打着伞。</p>
<p>我好像一个蘑菇。</p>
<p>到了。</p>
<p>他在窗台上紧张地看着窗台下的我。</p>
<p>眼睛很圆。</p>
<p>脸很小。</p>
<p>符合现代审美。</p>
<p>小母猫？</p>
<p>不对长这么萌应该是男的。</p>
<p>他不安地在窗台上走来走去。</p>
<p>然后不见了。</p>
<p>我再往前两步。</p>
<p>确保视野无死角。</p>
<p>怎么真的不见了。</p>
<p>我检查了下空调机的缝隙。</p>
<p>什么都没有。</p>
<p>我去他从哪走的。</p>
<p>为何瞬间消失。</p>
<p>我眼神不好。</p>
<p>我认了。</p>
<p>不对我是来干嘛的。</p>
<p>不对窗台上好像并不会淋到雨。</p>
<p>上面有挡的。</p>
<p>醉了。</p>
<p>回去好好学习。</p>
<p>我回到图书馆。</p>
<p>坐定。</p>
<p>看看大家看我的表情。</p>
<p>并无异样。</p>
<p>还好没有被发现。</p>
<p>学习。</p>
<p>学你个头回宿舍。</p>
<p>完</p>
<p>卖萌的臭傻逼</p>
<p>2015.6.26</p>
]]></content>
  </entry>
  <entry>
    <title>坐标系变换的简易理解——以切线空间与世界空间为例</title>
    <url>/blog/2020/08/03/%E5%9D%90%E6%A0%87%E7%B3%BB%E5%8F%98%E6%8D%A2%E7%9A%84%E7%AE%80%E6%98%93%E7%90%86%E8%A7%A3%E2%80%94%E2%80%94%E4%BB%A5%E5%88%87%E7%BA%BF%E7%A9%BA%E9%97%B4%E4%B8%BA%E4%BE%8B/</url>
    <content><![CDATA[<p>最初接触坐标系变换时，很难形象理解所乘矩阵的含义，现在我归纳一下向量坐标的坐标系变换<em>（即不需要考虑位移）</em>的简易理解：</p>
<hr>
<p><em>本篇文章中所讨论坐标系均为笛卡尔正交坐标系</em></p>
<p>设<strong>旧坐标系</strong>与<strong>新坐标系</strong>，其中新旧坐标系的区分方式为新坐标系的坐标轴由旧坐标系表示，已知新坐标系的坐标轴在旧坐标系$XYZ$下的表示分别为向量$T$, $B$, $N$。</p>
<p>当已知向量旧坐标系下坐标$(x, y, z)$，求新坐标系下坐标时，则直接考虑求$(x, y, z)$在新坐标轴上的投影，即分别求$t &#x3D; (x, y, z) \cdot T$, $b &#x3D; (x, y, z) \cdot B$, $n &#x3D; (x, y, z) \cdot N$， 即待求坐标$(t, b, n)$为：<br>$$<br>(x, y, z) \cdot<br>\left[<br>\begin{matrix}<br>T_x &amp; B_x &amp; N_x \\<br>T_y &amp; B_y &amp; N_x \\<br>T_z &amp; B_z &amp; N_z<br>\end{matrix}<br>\right]<br>$$</p>
<p>当已知向量新坐标系下坐标$(t, b, n)$，求旧坐标系下坐标时，由于坐标$(t, b, n)$各分量分别代表相应轴方向上的长度，则直接考虑将当前坐标$(t, b, n)$各分量分别与相应轴相乘之后再合成，即求$t (T_x, T_y, T_z) + b (B_x, B_y, B_z) + n (N_x, N_y, N_z)$，其中$X$轴上的分量为$tT_x + bB_x + nN_x$，以此类推，即待求坐标$(x, y, z)$为：<br>$$<br>(t, b, n) \cdot<br>\left[<br>\begin{matrix}<br>T_x &amp; T_y &amp; T_z \\<br>B_x &amp; B_y &amp; B_z \\<br>N_x &amp; N_y &amp; N_z<br>\end{matrix}<br>\right]<br>$$<br>正好可以发现两个变换矩阵互为转置，且由于坐标轴正交，则两矩阵正交，可得两个变换矩阵互为逆矩阵，这与两坐标系变换互为逆过程相符。</p>
]]></content>
  </entry>
  <entry>
    <title>基于Perlin Noise随机生成游戏地图</title>
    <url>/blog/2019/03/05/%E5%9F%BA%E4%BA%8EPerlin-Noise%E9%9A%8F%E6%9C%BA%E7%94%9F%E6%88%90%E6%B8%B8%E6%88%8F%E5%9C%B0%E5%9B%BE/</url>
    <content><![CDATA[<p><strong>摘要</strong></p>
<p>程序化内容生成（PCG）在游戏中的应用是使用随机数或伪随机数来实现游戏内容的程序化生成，其导致游戏内容更加不可预测，为游戏增加更多的可能性，为玩家带来更加持续的新鲜感。同时，这种方法也为游戏开发人员带来了许多优势，例如减少了内存消耗，辅助开发者更加迅速地进行游戏设计，以及对于基于人工的游戏开发作为一种补充。电子游戏中，地形地貌是游戏内容的重要组成部分，也会对游戏的整体美术风格与玩家的游戏体验造成很大影响。本文旨在提供一种顶视角2D像素风格游戏中实时生成无限地形地貌的可实行方案，希望能够提供一套基于Perlin noise的算法，通过输入有限个伪随机数种子，最终计算出较为美观的顶视角2D像素风格户外地貌，并且提供较强的多样性，使玩家在探索游戏地图时收获新鲜感与乐趣。</p>
<p><strong>关键词 :</strong> 程序化内容生成, perlin噪声, 像素游戏 </p>
<p><strong>1.</strong> <strong>引言</strong></p>
<p>电子游戏中，地形地貌是游戏内容的重要组成部分，也会对游戏的整体美术风格与玩家的游戏体验造成很大影响。在以往的游戏中，地形地貌多为游戏设计与游戏开发人员事先设计好的内容，游戏一旦发布就已经固定，不具备任何随机性，而且不具备随着玩家的游戏进程实时生成，实时延展且无限延展的特性。近十年来，一大批内含程序化地形地貌生成的游戏涌现出来，如《Minecraft》，《Terraria》，《Don’t Starve》，《Enter the Gungeon》，这些游戏中或多或少的用到了程序化内容生成的思想，使其游戏内容尤其是游戏地形地貌更加的丰富和随机，带给玩家更持久的新鲜感，继而提供了更大的重复可玩性。</p>
<p>程序化内容生成（PCG）在游戏中的应用是使用随机数或伪随机数来实现游戏内容的程序化生成，其导致游戏内容更加不可预测，为游戏增加更多的可能性，为玩家带来更加持续的新鲜感。同时，这种方法也为游戏开发人员带来了许多优势，例如减少了内存消耗，辅助开发者更加迅速地进行游戏设计，以及对于基于人工的游戏开发作为一种补充[1]。PCG可以应用在影响游戏玩法的各种元素之上：地形，地图，图层，故事，对话，任务，角色，规则，变化或武器。PCG一种重要的应用就是生成无限的游戏内容，它可以用于实时生成具有足够变化性的内容。在1980年代，《Rogue》游戏为PCG开辟了一条新的道路，它创造了对后世影响深远的贡献，即游戏中的冒险是通过算法来生成的，每次游玩，就会创造一个全新的冒险[2]。后来很多游戏开发者模仿《Rogue》使用PCG来生成其游戏内容，以至于后来形成了一个新的roguelike游戏类型。Julian Togeliu等人提出了PCG在游戏创作中的三大目标和九大挑战，三大目标即多级多内容PCG，基于PCG的游戏设计和生成完整游戏，而九大挑战之中则包含非通用原创性内容生成这一挑战，其中提到了如今的roguelike游戏之中的地牢生成缺乏创意性[3]。Mark Hendrikx等人提出了程序化内容生成在游戏中应用的几个层次，自下而上分别为游戏比特层、游戏空间层、游戏系统层、游戏情节层、游戏设计层以及衍生内容层，其中，游戏地形地貌的程序化生成包含在游戏空间层，是基础而重要的一层[4]。</p>
<p>然而，在顶视角2D像素风格游戏中，游戏地形地貌如何合理并且丰富地展现给玩家是一个重要的问题。目前的顶视角2D游戏中使用的程序化地图生成技术，多数为地牢游戏中地牢房间的随机生成，而户外地形地貌生成的现有实现方案多数缺乏美观性。如何在顶视角2D游戏中程序化生成有一定风格的户外地形地貌，是一个有待解决的问题。</p>
<p>本文旨在提供一种顶视角2D像素风格游戏中实时生成无限地形地貌的可实行方案，希望能够提供一套算法，通过输入有限个伪随机数种子，最终计算出较为美观的顶视角2D像素风格户外地貌，并且提供较强的多样性，使玩家在探索游戏地图时收获新鲜感与乐趣。</p>
<p>为了实现这些目标，本文选用Perlin噪声为主要的伪随机数生成算法[5]，实现一个二维Perlin噪声网格，并且在此基础上建立由数值到地形类型的映射关系。另外，本文将根据每个点计算出的Perlin噪声值来指定生成地图资源如树木石头的概率。最后，将在水域地形上创造碰撞体，在特定地形上设定摩擦系数，改变角色的移动速率。</p>
<p><strong>2.</strong> <strong>相关工作</strong></p>
<p>研究人员早已认识到程序化内容生成（PCG）在电子游戏创作中的重要性，之前有很多人从不同方面做出过相关的工作。在游戏开发中使用程序内容生成技术主要限于特定类型的游戏元素。PCG很少被用于生成整个游戏关卡，但是有一个值得注意的例外。地下城类型的游戏是一种在冒险和角色扮演游戏中经常遇到的游戏类型，其游戏关卡经常由PCG生成。由于其独特的游戏节奏，游戏玩法和游戏空间的组合，地牢关卡设计成为最适合展示PCG优势的地方。Roland van der Linden等人开展了关于生成地下城游戏关卡的程序方法的研究，他们总结了常见的做法，讨论了不同方法的优缺点，并确定了未来的一些有希望的挑战[6]。一般来说，当前的程序性地下城生成方法缺少的不是性能，而是更加强大的生成过程，以及对于生成过程更准确和更丰富的控制。这个领域仍然处于起步阶段，许多研究挑战仍然存在，例如，为设计师提高这些方法的直观性和可访问性。</p>
<p>关于将程序化内容生成应用于其他类型游戏地图生成领域，之前有人做出过一些实现方案。Lara-Cabrera等人为即时战略游戏《Planet Wars》提供了一个平衡的程序化地图生成器。该生成器使用进化策略生成和演化地图，并使用锦标赛系统评估这些地图的平衡质量，他们进行了几次实验，获得了一组可玩并且平衡的游戏地图[7]。Lawrence Johnson等人利用元胞自动机算法实现了洞穴关卡的无限生成，他们将基于元胞自动机的简单算法在无限洞穴游戏中进行评估，生成可玩且设计良好的基于隧道的地图。该算法具有非常低的计算成本，允许实时内容生成，并且所提出的地图在关卡设计方面提供了足够的灵活性[8]。Miguel Frade等人使用基于遗传算法的遗传地形程序技术自动演化地形，以获得所需的有足够可访问性的游戏地图[9]。Jean-David G´enevaux等人提出了一个框架，允许使用受水文学启发的概念快速直观地建模地形[10]。Houssam Hnaidi等人介绍了一种从一组参数化曲线生成地形的扩散方法，该曲线描述了地形特征，如山脊线，河床或悬崖。他们的方法为用户提供了基于矢量的直观的面向特征的地形控制。 不同类型的约束（例如高程，倾斜角和粗糙度）可以附加到曲线上，以便定义地形的形状，通过使用有效的多重网格扩散算法从曲线表示生成地形。 该算法可以在GPU上有效地实现，这允许用户以交互方式创建各种各样的景观[11]。</p>
<p>除了上述的地形地貌生成算法，还有许多研究者对于地图相关物的生成进行了一系列研究。Stefan Greuter提出了一种实时生成“伪无限”虚拟城市的方法。城市包含根据需要生成的几何变化的建筑物。建筑物生成参数由从建筑物位置导出的整数播种的伪随机数生成器创建。不同的建筑几何形状是从一组平面图中挑选出来。每个建筑物的楼层是通过在迭代过程中组合随机生成的多边形来创建的[12]。Soon Tee Teoh设计了一种算法模拟河流和海洋的侵蚀作用，来创建自然的河流、河流三角洲、沿海悬崖和海滩[13]。</p>
<p>与之前的程序化地形地貌生成相比，本文的地形地貌生成方法的难点之一在于如何在顶视角2D像素风格地图上表现出立体感，给与玩家以较为拟真的体验。另一个难点在于如何丰富地形地貌的多样性，以使玩家保持长久的新鲜感与游戏趣味。</p>
<p><strong>3.</strong> <strong>实现方法</strong></p>
<p>3.1.Perlin noise</p>
<p>Perlin噪声是一个非常强大的算法，经常用于程序生成随机内容，在游戏和其他像电影等多媒体领域广泛应用。算法发明者Ken Perlin也因此算法获得奥斯卡科技成果奖。在游戏开发领域，柏林噪声可以用于生成波形，起伏不平的材质或者纹理。例如，它能用于程序生成地形、火焰燃烧特效、水和云等等。柏林噪声绝大部分应用在二维，三维层面上，但某种意义上也能拓展到四维。一维柏林噪声可用于生成横版卷轴地形、模拟手绘线条等，在二维层面可以通过插值生成地形，而三维柏林噪声则可以模拟海平面上起伏的波浪。</p>
<p>Perlin噪声算法可以用于生成更加连续而平滑的随机数，没有白噪声的毛刺感，所以是生成游戏中地形地貌的一个重要工具。</p>
<p>3.2.计算噪声图</p>
<p>要使用Perlin噪声生成游戏地形地貌，需要计算出一个二维Perlin噪声，具体的实现方式需要以下几步。第一步，本文先用一个伪随机数生成器生成一个伪随机数序列，这个伪随机数生成器可以使用经典的线性同余法。第二步，需要在游戏场景中创建一个二维网格，本文暂且把每个单元格的大小设置为100*100，这个大小可以按需调整。之后，本文给二维网格的每个点指定一个随机的二维梯度向量，这些随机向量两个维度的值都是从第一步中伪随机数序列中抽取得到，之后对这个向量进行单位化，这样就得到了一张每个网格点都对应一个指向某个随机方向的单位向量的二维网格。第三步，也是最重要的一步，开始计算场景中每个点的噪声值，即一个0到1之间的随机数。</p>
<p>关于这个计算方法，本文将任取一个点举例说明。想要计算一个点的噪声值，首先，要先找到他所在的单元格，并且确定该单元格四个角的坐标点，这一操作可以通过整型变量除法得到。例如本文取坐标为（157，-233）的这个点，就可以得到其所在单元格的四个角的坐标分别为：（100，-300）、（100，-200）、（200，-300）、（200，-200）。然后通过两点位置矢量相减的方法分别得到这四个角指向待计算点的四个向量，将这四个向量分别与其所在的角的网格点对应的随机单位向量点乘，得到四个值，将这四个值根据待计算点在单元格内部的相对于左下角的uv值进行双线性插值。所谓uv值，即为相对于左下角的局部坐标系的坐标与单元格大小的比值，例如点（157，-233）局部坐标uv值即为（0.57,0.67），根据u值进行两次线性插值，再对结果根据v值进行一次线性插值，即为双线性插值。这样所得到的最终结果已与所需要的结果非常接近，但是可以发现，这样的计算结果的取值范围为（                                                  ）。于是最后将结果乘以   之后加1再除以2，即得到本文所需要的取值范围（0,1）的噪声值。</p>
<p>3.3.配置地形数值映射表</p>
<p>虽然计算平滑且一阶导数连续的噪声值是本文地形地貌生成算法的重要一步，但是仅仅得到游戏场景中每个点的噪声值还是不够的，还需要建立噪声值与地形地貌之间的映射关系，才可以指导在屏幕上渲染什么样式的地形地貌贴图。本文将（0,1）这个范围根据需要分为若干个小区间，每一个小区间映射到一种类型的地形地貌。例如（0.2,0.35）映射为草地，那么当某一点的噪声值落在（0.2,0.35）区间内的时候，即可以根据其草地的特性为其贴上相应的地砖或是绘制相应的颜色。除此以外，还可以给每一种地形设置摩擦系数，以限制玩家角色在其上的奔跑速度，或者设置游戏中资源如在此种地形之上的生成概率，以控制资源在不同地形上的分布。</p>
<p><strong>4.</strong> <strong>结果与展望</strong></p>
<p>本文在Unity引擎中利用引擎中的Tilemap系统实现了该算法，计算出一张足够大的二维Perlin噪声网格以键值对的形式保存在C#的字典结构中，然后根据这些噪声值在Tilemap系统中给各点贴上了地砖Tiles，并且根据设定的概率值添加了树木和石头等游戏中需要用到的资源，最后形成了比较好的效果。</p>
<p>在这个基于Perlin Noise生成游戏地图的算法基础之上，还有很多可以改进的点，比如更好的美术效果，在地图上加入剧情引导等。如何用PCG技术随机生成更具风格化与可玩性的游戏地图，还有待之后的研究不断进行探索。</p>
<p>参考文献</p>
<p>[1]  Shaker N, Togelius J, Nelson M J. Procedural Content Generation in Games[M]. Cham: Springer International Publishing, 2016.</p>
<p>[2]  Amato A. Procedural Content Generation in the Game Industry[A]. 见: O. Korn, N. Lee. Game Dynamics[M]. Cham: Springer International Publishing, 2017: 15–25.</p>
<p>[3]  Togelius J, Champandard A J, Lanzi P L, et al. Procedural content generation: Goals, challenges and actionable steps[C]&#x2F;&#x2F;Dagstuhl Follow-Ups. Schloss Dagstuhl-Leibniz-Zentrum fuer Informatik, 2013, 6.</p>
<p>[4]  Hendrikx M, Meijer S, Van Der Velden J等. Procedural content generation for games: A survey[J]. ACM Transactions on Multimedia Computing, Communications, and Applications, 2013, 9(1): 1–22.</p>
<p>[5]  Liu D, Yan S, Ji R-R等. Image retrieval with query-adaptive hashing[J]. ACM Transactions on Multimedia Computing, Communications, and Applications, 2013, 9(1): 1–16.</p>
<p>[6]  van der Linden R, Lopes R, Bidarra R. Procedural Generation of Dungeons[J]. IEEE Transactions on Computational Intelligence and AI in Games, 2014, 6(1): 78–89.</p>
<p>[7]  Lara-Cabrera R, Cotta C, Fernández-Leiva A J. Procedural map generation for a RTS game[C]&#x2F;&#x2F;13th International GAME-ON Conference on Intelligent Games and Simulation. 2012: 53-58.</p>
<p>[8]  Johnson L, Yannakakis G N, Togelius J. Cellular automata for real-time generation of infinite cave levels[A]. Proceedings of the 2010 Workshop on Procedural Content Generation in Games - PCGames ’10[C]. Monterey, California: ACM Press, 2010: 1–4.</p>
<p>[9]  Frade M, de Vega F F, Cotta C. Evolution of Artificial Terrains for Video Games Based on Accessibility[A]. 见: C. Di Chio, S. Cagnoni, C. Cotta等. Applications of Evolutionary Computation[M]. Berlin, Heidelberg: Springer Berlin Heidelberg, 2010, 6024: 90–99.</p>
<p>[10] Génevaux J-D, Galin É, Guérin E等. Terrain generation using procedural models based on hydrology[J]. ACM Transactions on Graphics, 2013, 32(4): 143.</p>
<p>[11] Hnaidi H, Guérin E, Akkouche S等. Feature based terrain generation using diffusion equation[J]. Computer Graphics Forum, 2010, 29(7): 2179–2186.</p>
<p>[12] Greuter S, Parker J, Stewart N, et al. Real-time procedural generation ofpseudo infinite’cities[C]&#x2F;&#x2F;Proceedings of the 1st international conference on Computer graphics and interactive techniques in Australasia and South East Asia. ACM, 2003: 87-ff.</p>
<p>[13] Teoh S T. River and Coastal Action in Automatic Terrain Generation[C]&#x2F;&#x2F;CGVR. 2008: 3-9.</p>
]]></content>
  </entry>
  <entry>
    <title>夏 · 碑铭</title>
    <url>/blog/2010/06/04/%E5%A4%8F%20%C2%B7%20%E7%A2%91%E9%93%AD/</url>
    <content><![CDATA[<h4 id="立夏"><a href="#立夏" class="headerlink" title="立夏"></a>立夏</h4><p>夏天了，不是么?    ­</p>
<p> &nbsp;</p>
<p>树梢的风停了­</p>
<p>氤氲的梦醒了­</p>
<p>天边的云碎了</p>
<p> 惺忪的眼醉了­</p>
<p>冬候鸟掠过枝叶摇晃下纹丝不动的晴朗­</p>
<p>大片大片的洋槐扑灭了又一轮纵火的黄昏­</p>
<p>&nbsp;</p>
<h4 id="小满­"><a href="#小满­" class="headerlink" title="小满­"></a>小满­</h4><p>嗯、又是夏天了­</p>
<p>&nbsp;</p>
<p>雾气渐涨­</p>
<p>雨水斑驳­</p>
<p>风荡入密叶层层覆盖下的半片天空­</p>
<p>在叶与叶的罅隙间­</p>
<p>点点遗漏­</p>
<p>然后­</p>
<p>从拐角­</p>
<p>撑开树影­</p>
<p>握紧手心的潮热­</p>
<p>光芒­</p>
<p>在眼底灼灼绽放­</p>
<p>&nbsp;</p>
<h4 id="芒种"><a href="#芒种" class="headerlink" title="芒种"></a>芒种</h4><p>夏天了，怎么样?­</p>
<p>&nbsp;</p>
<p>直走­</p>
<p>一直走­</p>
<p>走过滴水的画室­</p>
<p>走过鸟鸣的诗­</p>
<p>破裂的乐谱­</p>
<p>唱起温润的歌声­</p>
<p>乱了琴弦­</p>
<p>湿了薄烟­</p>
<p>浓绿的墨色­</p>
<p>在叶脉之中浅浅蔓延­</p>
<p>微笑上扬­</p>
<p>风从树林的一端向另一端渐次拨起褶皱­</p>
<p>奔跑着­</p>
<p>&nbsp;</p>
<h4 id="夏至­"><a href="#夏至­" class="headerlink" title="夏至­"></a>夏至­</h4><p>夏未至­</p>
<p>&nbsp;</p>
<p>冲向，死亡的夏天­­</p>
<p>冲向死亡的，夏天­</p>
<p>&nbsp;</p>
<p>2010.夏至</p>
]]></content>
  </entry>
  <entry>
    <title>工作细节笔记</title>
    <url>/blog/2020/07/24/%E5%B7%A5%E4%BD%9C%E7%BB%86%E8%8A%82%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h4 id="MarshalAs-UnmanagedType-I1"><a href="#MarshalAs-UnmanagedType-I1" class="headerlink" title="[MarshalAs(UnmanagedType.I1)]"></a><strong>[MarshalAs(UnmanagedType.I1)]</strong></h4><p>Indicates how to marshal the data between managed and unmanaged code.</p>
<h4 id="ExecuteAlways"><a href="#ExecuteAlways" class="headerlink" title="[ExecuteAlways]"></a><strong>[ExecuteAlways]</strong></h4><p>Makes instances of a script always execute, both as part of Play Mode and when editing.</p>
<h4 id="TextAsset"><a href="#TextAsset" class="headerlink" title="TextAsset"></a><strong>TextAsset</strong></h4><p><strong>Text Assets</strong> are a format for imported text files. When you drop a text file into your Project Folder, it will be converted to a Text Asset. The supported text formats are:</p>
<ul>
<li><p><strong>.txt</strong></p>
</li>
<li><p><strong>.html</strong></p>
</li>
<li><p><strong>.htm</strong></p>
</li>
<li><p><strong>.xml</strong></p>
</li>
<li><p><strong>.bytes</strong></p>
</li>
<li><p><strong>.json</strong></p>
</li>
<li><p><strong>.csv</strong></p>
</li>
<li><p><strong>.yaml</strong></p>
</li>
<li><p><strong>.fnt</strong></p>
</li>
</ul>
<h4 id="XPath"><a href="#XPath" class="headerlink" title="XPath"></a><strong>XPath</strong></h4><p>XML Path Language</p>
<p>使用**tagName[@attributeName&#x3D;’a’]**取特定子节点</p>
<p>使用”@”取属性节点</p>
<h4 id="C-string"><a href="#C-string" class="headerlink" title="C# @string"></a><strong>C# @string</strong></h4><p>逐字字符串（不进行转义），正则表达式中经常需要使用</p>
<h4 id="XmlDocument-Save-XmlWriter"><a href="#XmlDocument-Save-XmlWriter" class="headerlink" title="XmlDocument.Save(XmlWriter)"></a><strong>XmlDocument.Save(XmlWriter)</strong></h4><p>保存Xml文件</p>
<h4 id="TRANSFORM-TEX"><a href="#TRANSFORM-TEX" class="headerlink" title="TRANSFORM_TEX ()"></a><strong>TRANSFORM_TEX ()</strong></h4><p>简单来说，TRANSFORM_TEX主要作用是拿顶点的uv去和材质球的tiling和offset作运算， 确保材质球里的缩放和偏移设置是正确的。</p>
<p>下面这两个函数是等价的:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">o.uv = TRANSFORM_TEX(v.texcoord,_MainTex);</span><br><span class="line">o.uv = v.texcoord.xy * _MainTex_ST.xy + _MainTex_ST.zw;</span><br></pre></td></tr></table></figure>

<p>_MainTex_ST.xy是tiling</p>
<p>_MainTex_ST.zw是offset</p>
<p>如果Tiling 和Offset你留的是默认值，即Tiling为（1，1） Offset为（0，0）</p>
<p><em>UnityCG.cginc</em></p>
 <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Transforms 2D UV by scale/bias property</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TRANSFORM_TEX(tex,name) (tex.xy * name##_ST.xy + name##_ST.zw)</span></span><br></pre></td></tr></table></figure>

<h4 id="预编译符号-和"><a href="#预编译符号-和" class="headerlink" title="预编译符号##和#"></a><strong>预编译符号##和#</strong></h4><p>##：预编译时将符号直接拼接</p>
<p>#：预编译时将符号转为字符串</p>
<h4 id="CustomEditor-“C-ScriptName”"><a href="#CustomEditor-“C-ScriptName”" class="headerlink" title="CustomEditor “C#ScriptName”"></a><strong>CustomEditor “C#ScriptName”</strong></h4><p>自定义shader材质编辑面板</p>
<h4 id="Load-DirectX-HLSL-Texture-Object"><a href="#Load-DirectX-HLSL-Texture-Object" class="headerlink" title="Load (DirectX HLSL Texture Object)"></a><strong>Load (DirectX HLSL Texture Object)</strong></h4><p>顶点着色器中获取纹理</p>
<h4 id="UnpackNormalmapRGorAG-Function-in-UnityCG-cginc"><a href="#UnpackNormalmapRGorAG-Function-in-UnityCG-cginc" class="headerlink" title="UnpackNormalmapRGorAG Function in UnityCG.cginc"></a><strong>UnpackNormalmapRGorAG Function in UnityCG.cginc</strong></h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Unpack normal as DXT5nm (1, y, 1, x) or BC5 (x, y, 0, 1)</span></span><br><span class="line"><span class="comment">// Note neutral texture like "bump" is (0, 0, 1, 1) to work with both plain RGB normal and DXT5nm/BC5</span></span><br><span class="line"><span class="function">fixed3 <span class="title">UnpackNormalmapRGorAG</span><span class="params">(fixed4 packednormal)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// This do the trick</span></span><br><span class="line">    packednormal.x *= packednormal.w;</span><br><span class="line">    fixed3 normal;</span><br><span class="line">    normal.xy = packednormal.xy * <span class="number">2</span> - <span class="number">1</span>;</span><br><span class="line">    normal.z = <span class="built_in">sqrt</span>(<span class="number">1</span> - saturate(dot(normal.xy, normal.xy)));</span><br><span class="line">    <span class="keyword">return</span> normal;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>当我22岁时我在想些什么</title>
    <url>/blog/2016/09/24/%E5%BD%93%E6%88%9122%E5%B2%81%E6%97%B6%E6%88%91%E5%9C%A8%E6%83%B3%E4%BA%9B%E4%BB%80%E4%B9%88/</url>
    <content><![CDATA[<p><strong>一、总是在碰撞中回望，脆弱累积成担当。</strong></p>
<br>

<p>2014年9月24日，我一个人去了南京北站，带了只灰色小熊，拍了些不知所云的照片，回来的时候叫那时还只是朋友的前女友出来吃饭，答复说有事，遂一个人去吃了自助，带了张纸放在桌上，上面写着俩字：“别收”。</p>
<p>2015年9月24日，我跑到新校区去听了如今就职的互联网公司的宣讲会，把书包里不小心揉得皱皱巴巴的纸质简历投了出去，结束后，饥肠辘辘，跑到最喜欢的一家自助凭身份证半价吃了一顿，吃了16个蒜蓉扇贝。</p>
<p>2016年9月24日，我在出租屋里，买了个20块钱小蛋糕，给自己做了顿意大利肉酱面，面煮得有点硬，猛然发现自己不小心丢掉了过生日一个人吃自助的传统，蛋糕吃不完。</p>
<br>

<p>回想起这些，明明只不过过去了一两年，但是却觉得已经是很遥远的事情了。细想也是正常，在这转折较多的两年后，我所处的环境与所持的心态已然不同，看了这两年的生日文，则很容易梳理出脉络。</p>
<br>

<p>“孤独是一种常态，而不孤独则是激发态。”——2014年思考孤独的本质及其积极意义。</p>
<p>“像诗人，又像无情的杀手，是柔软而坚不可摧的存在，这样就好了。”——2015年崇尚冷酷的理性力量。</p>
<br>

<p>很高兴能看到自己走过的轨迹，心一点一点地变得坚硬，正应了我这几天在反复思考的一句话：</p>
<p>“凡不能杀死我的，必使我脸皮更厚。”</p>
<br>

<p><strong>二、寄蜉蝣于天地，渺沧海之一粟</strong></p>
<br>

<p>这个问题，要回溯到3年前，我读Peter H.Raven和George B.Johnson所著《生物学（第6版）》的时候，书中探讨了生命起源的一种可能方式，即海底火山喷发时涌出大量气泡，其中个别气泡随机地包裹了有机物，最后形成了细胞的原型，当时我就在想，如果不是某个非常巧的巧合使得地球上第一个单细胞生物出现，我们是不是就完全不会存在？后来学得越多，越觉得生命是一个伟大的巧合。如果水的键角不是104.5°，偏了一点，104.6°，那么是不是物理性质会发生改变，很多反应都不能发生？其导致的连锁效应是不是会导致所有生命不复存在？如果糖酵解过程中某个反应少释放几个焦耳的能量，是不是就会导致生物无法进化到产生智慧文明？</p>
<br>

<p>我觉得答案是，几乎必然。</p>
<br>

<p>就算这些都没有，只要生物漫长进化的过程中某一个岔路走错了，那人类也很可能就永远无法出现。在我看来，人类的出现比彩票中500万的几率小太太太…（太乘以2的64次方）多了。</p>
<br>

<p>“天地不仁，以万物为刍狗。”</p>
<br>

<p>然而我们已经身处在莫大的幸运中而不自知，遇到困难的时候，想到这些，觉得还是应该心怀感恩，感谢这一切。</p>
<br>

<p>嗯，感谢水的键角是104.5°。</p>
<br>

<p><strong>三、关于我的欲望</strong></p>
<br>

<p>“淡泊以明志，宁静以致远。”——这是我从初一到大三笔袋子里面一直夹着的一张纸上面写的一句话。</p>
<br>

<p>其实我一直没懂。</p>
<p>或者说，每一个时代有着不同的理解。</p>
<br>

<p>现在的理解无非是两句话拆开看：</p>
<p>1.认清自己的欲望点，不是自己真正需要的东西就看淡吧。</p>
<p>2.保持平和包容的心态，不必大喜也不必大悲，这样长远来看才是提升生活品质的根本途径。</p>
<br>

<p>先来说第二点，我也是后来才发现，人的情绪往往是大致守恒的，一个人如果容易狂喜，那么他很可能也会经常特别郁闷，就像我们小的时候一样。控制自己的情绪在一个较小的波动范围内，具体操作就是，不对事物抱有过分乐观的期望，也不对事物抱有过分悲观的猜想，这是一个经过理性考量的抉择。</p>
<br>

<p>至于第一点，其实关键点还是那句话：知道自己要的是什么。</p>
<br>

<p>看过《瓦尔登湖》的人应该知道，梭罗在《瓦尔登湖》中提倡一种返璞归真，抛弃那些并不是真实需要的欲望的生活。在我看来，这是一种非常正确的思路，虽然我并不想过他那种劈柴种地的生活。他的思想的关键点不在于瓦尔登湖边朴素却丰富的生活，而是尊重自己的独特性，深谙自己真正的欲望点并且付诸实践。</p>
<br>

<p>我的欲望点是什么，这也是我一直在思考的内容。回顾我感受到快乐的经历，可以先分为两大类：</p>
<p>第一类是达成某种目标所获得的“成就感”，第二类是一种专注状态下的“心流”。</p>
<br>

<p>针对达成某种目标所获得的“成就感”，又可以分为两类：一类是对于自身以及世界的探索，这种探索类似一种挖掘，分为两个方向，向内挖掘自身的能力和向外挖掘这个世界的知识，其实就是对于自我的提升，即“做一个更优秀的人”，这一类从自己与世界的关系来看，算作“输入”；另一类是向外界的自我表达，通俗的来讲，那就是广泛意义上的“装逼”，至于怎么“装逼”，在哪个方向上“装逼”能获得的幸福感最强，这就是每个人差异的地方，至于我倾向于哪种自我表达，这里就省略1000字好了，这一类从自己与世界的关系来看，算作“输出”。</p>
<br>

<p>至于专注状态下的“心流”，根据“心流”的产生机制，只有当能力与挑战难度同时较高且大致匹配时，才能更容易产生“心流”。所以，找到自己的天赋并不断提升相关能力是使“心流”更容易产生的关键。</p>
<p>当然，这两大类欲望都是建立在我“好吃懒做”的生存欲望满足以后的基础之上的。</p>
<br>

<p>于是，我就可以列出一个欲望清单：</p>
<ol>
<li>保证基本生活质量的生存</li>
<li>对于自身以及世界的探索</li>
<li>向外界的自我表达</li>
<li>专注状态下的“心流”</li>
</ol>
<p>如果要排个优先级的话，我选择1&gt;4&gt;2&gt;3</p>
<br>

<p>具体实行的话，那么4项同时完成的很好是比较难得的，其原因在于1与4的冲突，因为拥有一份自己特别喜欢，时时产生“心流”，同时还要为社会产生贡献以换取金钱保证生活质量的工作是比较难得的。于是通常情况下就需要在其中做出权衡，似乎我更倾向于“做自己还算喜欢的工作，顺便挣点钱”的模式。</p>
<br>

<p>无欲则刚，但是天性难违，你需要满足你天性中真正需要的东西。</p>
<p>我想，这才是对待欲望的正确态度。</p>
<br>

<p><strong>四、人生的本质</strong></p>
<p>以前不知道在哪看过这样一句话，“你掉进一口无底深井，但是抓住了一个即将断掉的藤蔓，你看见嘴边的叶子上有一滴闪闪发光的甘露，人的一生，大抵不过是这个吮吸甘露的过程啊。”</p>
<br>

<p>这一句话就够了。</p>
<br>

<p>人生的本质是一段体验。</p>
<p>无论如何，我们终将一事无成，你说呢？</p>
]]></content>
      <categories>
        <category>生日</category>
      </categories>
  </entry>
  <entry>
    <title>当我们一起走过</title>
    <url>/blog/2012/06/10/%E5%BD%93%E6%88%91%E4%BB%AC%E4%B8%80%E8%B5%B7%E8%B5%B0%E8%BF%87/</url>
    <content><![CDATA[<p> 2009-2012，我们都很清楚这三年对我们来说意味着什么，那是我们一起走过的，高中时代。</p>
 <br>

<p>一直想着毕业后要写一首歌，名字就叫做《高中时代》，歌词中叙写些不写作业被老师柴的情景片段，或是记录下一天到晚补作业的苦闷与补完作业之后巨大的满足感。这样的日子固然辛苦，但是从一开始我就明白，这会是我一生中一段美好而宝贵的岁月，一段可以触摸、可以铭刻、可以在微风中莞尔回眸的，年华。</p>
  <br>

<p>一直以为我和班上的大多数同学是没有什么感情的，事实也似乎正是如此，我甚至和班上某些同学三年来几乎从没说过一句话，我觉得这样实在可悲，但我也无能为力。然而，说到高三二班，我却有一种说不出的感情，是景仰，或是自豪？我不知道。有时候觉得高考是一场战役，而我们虽不曾感情多么的深厚，却也一直是在并肩战斗，也能感受到那种同学之间淡淡的友情，尤其是在运动会和篮球赛的时候。印象最深的是高二那次篮球赛，在决赛之中最后时刻因为误判我们以一分差距败北之后，我看到每一个人的表情都很沉重，还记得那天晚自习我在语文书的行隙间填下的那首： </p>
<blockquote>
<p>江城子 · 二班必胜</p>
<p>甘苦与共一春秋，不曾丢，志满楼。五十六人，团结胜一筹。过关斩将谁与休，风华秀，英姿流。</p>
<p>挥汗如雨冷风投，暴雨后，人莫愁。针锋相对，拼搏何须由？二班学子志尚在，今虽败，不低头！</p>
</blockquote>
<p> 二班必胜，我依然这样说。</p>
  <br>

<p>高中以来，和我坐同桌时间最长的莫过于牛笛了。还记得我和牛笛的那个小约定，“毕业后、一起唱笑忘歌”，写着这九个字的小纸条被我放在课程表的后面，但它竟然在不知不觉中神秘地失踪了。“伤心的，都忘记了，只记得这首笑忘歌，那一年天空很高风很清澈，从头到脚趾都快乐。”每当这熟悉的旋律回荡在耳边，就会想起那些校园之中的晴朗日子，阳光下的羽毛球场，以及每一个可以抱着吉他唱出微风或是顶着烈日挥洒汗水的角落，当然，还有许多来不及被记录、被定格的言语与画面。还记得那是一个大风天，我和牛笛一边吼着这首歌，一边挥舞着手中的拍子，近乎疯狂，击打着那在风中飘摇的羽毛球，那一刻，真真切切地感受到了高中时代的轻狂与自由，那种在狂风之中勇往直前的自由。高中时代无以名状的快乐，就好像拥抱了一场大雨瓢泼，却还会微笑着对你说加油，仿佛又可以哼唱着一首歌，随着那绵长的曲调，肆无忌惮地奔向某一个未知的远方。</p>
  <br>

<p> “与牛笛同桌倒计时0000天”，用铅笔肆意涂抹的字迹，新学期来了后还在那张桌子上留着，随手又拍了一张，继续我们未完成的伟大事业，说好了最后一起做一些东西记录高中的，怎么就走了呢？也忘了告别时的最后一句话是什么，或许只是一句再见，又或许是一句加油，不过我知道，是兄弟，不管多远，都会一起努力的。还记得那个写满一行“我爱学习”的草稿本么？本来说好要一起写满整个封面的，可是你走了之后我就再很少写过。</p>
  <br>

<p>最近坐在43上，当车开得飞快，听着歌，有一种高中时代从身旁飞驰而过的感觉，感觉它就要被我狠狠地甩在身后，然后在车厢模糊地抖动中渐行渐远，越来越远。像风一样，时常在我的身旁穿梭，而到了想抓住它的时候，却怎么也抓不住。“如果说要我选出代表青春那个画面，浮现了那滴眼泪那片蓝天那年毕业，那一张 边哭边笑还要拥抱是你的脸，想起来可爱可怜可歌可泣可是多怀念。”一遍又一遍地播放着这首歌，好像留恋完就可以不再留恋。“怀念总是突然怀念不谈条件，当回忆冲破考卷冲出岁月在我眼前，我和你留着汗水喝着汽水在操场边，说好了无论如何一起走到未来的世界。”我就在想，还会有多少这样单纯而自由的时间，还会有多少这样坚定而充满理想的诺言，珍惜吧，我对自己说，至少我曾经这样真实地走过。</p>
  <br>

<p>坐43总容易迟到，尤其是高三的时候，到处都在挖路，一路上堵了又堵。一个43车友对我说，这上学简直就跟二万五千里长征一样，我觉得挺对。有时候车开得特别慢我就很来气，但气很快就消了，这么多年，毕竟和43有种老朋友的感觉。有一次和那个车友一起迟到，在校门口被拦住记名字，我就对她说，赶紧留个帅气的签名吧，等毕业了你想签都没机会了。现在想想，43上“艰难”的上学路，真的也是高中时代一个不错的怀念。</p>
  <br>

<p>高中时代，我们似乎都突然地成熟了许多，很明显，当我们现在看到一群高一小孩在一起打打闹闹乱喊乱叫的时候，总会不禁地对其嗤之以鼻，然而，殊不知当年的我们和现在的他们，其实并没有什么两样。偶然翻到些高一时候写下的文字，其中的思想未免幼稚而单调，文笔也显得华丽与空洞。而现在，我们大多已经成年，三年的时光，给予了我们多少快乐与忧伤、沉默与张扬、浮躁与持重、草率与彷徨，是高中时代，催促着我们在拥挤的年轮中快步向前，是高中时代，拉扯着我们的臂膀，追逐着，换来一张张沉稳而自信的面庞。</p>
 <br>


<p>高中时代我认为最幸运的事，就是遇到了一个知己，或者说一个和我极其相似的朋友。相似的思想、相似的行为、相似的性格、相似的追求，甚至连字体也很有几分相似，还记得那时和他坐过半个学期的同桌，他总是爱把我的卷子拿错。当年高一军训时分在同一个宿舍，初次见到他时那种扑面而来的似曾相识的感觉，到现在我还记得很清。到后来，一起经历了一些事，我和他才每每惊奇地发现，我们的想法总是能无比精准地一拍即合，具体是一些什么事我已经记不清，但那种会心一笑的默契，那种精准得恰到好处的感觉，真的有些难以用言语去表达，有时候，真的难以相信，这世界上怎么会还有一个这么像我的人呢？甚至觉得，他就像是我的一个影子，看到他，同时，也看到了我自己。</p>
 <br>


<p>就记得有一次和他闹翻了，我准备第二天彻底不理他，一去学校，就看到他坐在靠窗的位置上一言不发。当时，就特别想板着脸，装出一副特严肃的样子，然后从他身边经过。结果呢？他抬起头来对着我一个傻笑，我的计划就彻底宣告了破产。那时就想，也许这就是真正的好朋友，想不理都困难，偶尔有了矛盾，只要一枚傻傻的笑，就可以让我们抛开一切，抛开一切彼此间的误解与愤怒。不得不说的是，每一次正式的考试之前，我和他都会以我们特定的方式，击一下掌，来互相鼓励，只记得我每一次都很使劲，有时候觉得不够疼，还要举起手掌再来一下，我也忘了是从哪次考试起我们养成了这个习惯，只是后来的每次考试前，这几乎成为了我们的默契，总是能够感觉到，击一下掌，比其他任何方式都更加能使我们感觉到踏实而充满力量。还记得有一次考试前，天空泛着昏黄的颜色，大概那也是一个大风天，我们单肩背着书包，在操场中央游荡，头发和校服都被吹得有些乱，然后我们驻足、告别、击一下掌、说一句加油。这样的画面在我脑海中挥之不去，不知道为什么，最近总是在大风之中生发出感情，是不是因为大风更能让人感受到被时光打磨着的勇气与力量。</p>
 <br>


<p>毕业，一直觉得这是一个令人向往而又引人伤感的词汇，预示着新的开始，也就意味着不得不与过去告别。再也不能和大家一起被铺天盖地的卷子所埋没，再也不能在暑假补课时充满期待地修改着桌子上写下的倒计时，再也不能被老师叫起来之后支支吾吾，再也不能在要交作业的时候手足无措，再也不能用铅笔在课桌上畅谈梦想，再也不能在课文旁边信手涂鸦，再也不能在教室里争抢着一包富含二氧化硅的北京方便面，再也不能在上课时偷偷啃着华林路444号生产的肉松面包，再也不能趴在教室窗台上张望着楼下经过的女生，再也不能周末放学后一帮人迫不及待地冲向网吧……太多的再也不能，太多的再也回不去，正是那些平常以为再平常不过的小事，搭起了我们三年漫长而又短暂的高中生活，成为了我们记忆中琐碎而美好的片段，突然就想唱和着，“它们都老了吧，它们在哪里啊，我们就这样，各自奔天涯……”</p>
  <br>

<p>“有多少苦痛有你和我一起度过、一起承受，有多少快乐有你和我一起享受、一起感动。”当我们一起走过，再回首，身后早已是落英缤纷，那些美好，那些纯真，就让它留在心底里的某个角落，在疲惫时候，再在风中，酿成一首遥远的、朴实的，勇气之诗。</p>
 <br>


<p>最后，我只想说，毕业后，即使我们天各一方，即使我终究还是忘记了你的名字，但是我也一定会记得，高中时代，三年二班，有我们一起走过。有时候真的不想离别，离开一个熟悉的地方，一些熟悉的人，去一个完全未知的远方，但是，没有办法，我们都只能沿着岁月的轨迹继续前行。未来，或许还会有那么一天，我和你，在某个陌生的地点相遇，那时，如果我还能认出你，我一定会慢慢地走近你，我会坚定地望着你的眼睛，踏实地拍拍你的肩膀，然后就那样一如既往地笑着说，加油，我的好兄弟。</p>
]]></content>
  </entry>
  <entry>
    <title>怎样理解随机过程中的样本函数</title>
    <url>/blog/2018/12/26/%E6%80%8E%E6%A0%B7%E7%90%86%E8%A7%A3%E9%9A%8F%E6%9C%BA%E8%BF%87%E7%A8%8B%E4%B8%AD%E7%9A%84%E6%A0%B7%E6%9C%AC%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<p>结合上面信号分析角度的回答，我说一点自己的理解。</p>
<br>

<p>先说基本定义：</p>
<p><strong>1.随机过程X(t,e)确定时间t，得到一个随机变量X(e)；</strong></p>
<p><strong>2.随机过程X(t,e)确定样本点e，得到一个定义域为T，值域为状态空间子集的普通函数X(t)，即样本函数，又称轨道。</strong></p>
<br>

<p>随机过程可以看成一族随机变量的集合，也可以看成一族样本函数的集合。</p>
<br>

<p>我的理解是：</p>
<p>第一句话是在<strong>t时刻</strong>竖切一刀，从截面上得到此时刻下的概率分布；</p>
<p>第二句话是从随机过程这个很多缕曲线组成的“麻绳”中，横向拉出一条<strong>样本点e</strong>，取出不确定的随机过程中的一条确定的“实例”。这个“实例”消除了不确定性，所以是普通函数，图形表现为一条曲线。</p>
<br>

<p>例如：</p>
<p>在一个盒子中放置一个随机游走的粒子，观察其x方向的位置X(t,e)，这是一个随机过程。</p>
<p>在时刻t打开盒子观察，此时粒子各位置的可能性即构成了**随机变量X(e)**；</p>
<p>在[0,+∞)的时间段内一直打开盒子观察，得到此次观察中每个t时刻粒子的确定位置并记录，得到一个关于t的确定函数曲线，即为**样本函数X(t)**。</p>
<br>

<p>关于各态历经性：</p>
<p>刚才这个例子中，随机过程是具有各态历经性的，因为只要观察时间足够长，那么这个粒子必然会经过盒子中的任一点，即取得的这条样本函数X(t)的值域遍历了整个状态空间。</p>
<p>我们把粒子换成一个<strong>静止的小木块</strong>，初始时刻放在盒子里的<strong>随机位置</strong>，那么接下来其x方向位置也可以视作一个随机过程X(t,e)&#x3D;A(e)，只不过是一个等于不随时间变化的常随机变量A(e)的随机过程。当我们在t时刻观察，由于初始位置是随机的，所以我们观察到的各种可能性即构成随机变量<strong>X(e)&#x3D;A(e)<strong>；而我们持续观察，则会得到一条普通函数</strong>X(t)&#x3D;a</strong>，即此时样本函数为一条平行于t轴的直线，值域为常数a，显然不能覆盖全部状态空间，而且观察时间再长也不会改变，此随机过程无各态历经性。</p>
<br>

<p>一点浅薄理解，若有错误，希望数学专业大佬能够指正。</p>
]]></content>
  </entry>
  <entry>
    <title>我想</title>
    <url>/blog/2011/04/17/%E6%88%91%E6%83%B3/</url>
    <content><![CDATA[<h4 id="一­"><a href="#一­" class="headerlink" title="一­"></a>一­</h4><br>



<p>我想做很多的事，总想做很多的事。­</p>
<br>

<p>­</p>
<p>我想好好学习。­</p>
<p>我想锻炼身体。­</p>
<p>我想弹好吉他。­</p>
<p>我想恋爱。­</p>
<p>我想继续我的小说。­</p>
<p>我想录些我喜欢的歌。­</p>
<p>我想练练唱功。­</p>
<p>我想把编曲精通。­</p>
<p>我想完成我写的歌。­</p>
<p>我想组起小太阳。­</p>
<p>我想每天练哑铃。­</p>
<p>我想每天去跑步。­</p>
<p>我想打好羽毛球。­</p>
<p>我想学好打篮球。­</p>
<p>我想多读些东西。­</p>
<p>我想背新华字典。­</p>
<p>我想挤出时间写日志。­</p>
<p>我想学历史和地理。­</p>
<p>我想拿着相机到处去拍照。­</p>
<p>我想写些文字，记录高中。­</p>
<p>­</p>
<p>总是想做各种各样的事，总是觉得自己都应该做到，总是认为自己完全可以变得更加优秀，总是感觉自己内心拥有着无比强大的力量。可是然后呢，总是没有时间，总是困了累了不得不去睡觉，总是无法坚持着把这些事情一一完成，总是庸庸碌碌地在作业堆里熬过一天又一天。我想，我总是如此，勤奋而懒惰。­</p>
<p>我要趁着年轻做一些想做的事，我总是这样想。当然我也总是尝试去做，想做的事太多，可我却没有那么多的时间，也就力不从心。每次只能去做其中的一两件，只能是顾此失彼，没有办法。我无法让自己不用睡觉，更无法把我的一天变成48个小时。所以，我想我必须学会选择，先选择自己必须做的，再选择自己应该做的，最后选择自己最想做的，在适合的时间做合适的事，只能这样。我想，无论怎样选择，我都必须要努力，带着我如风的自信，带着我必胜的决心，带着我的勇气与意志，做到最好。­</p>
<br>



<p>我想，我想要做的事，不会只是想想。­</p>
<p>­</p>
<br>









<h4 id="二­"><a href="#二­" class="headerlink" title="二­"></a>二­</h4><br>





<p>我想，我总想改变自己。­</p>
<br>



<p>我总想更加自信，却难免偶尔自卑。­</p>
<p>我总想更加善良，却难免偶尔邪恶。­</p>
<p>我总想更加勇敢，却难免偶尔畏怯。­</p>
<p>我总想更加坚毅，却难免偶尔懦弱。­</p>
<p>我总想更加谨慎，却难免偶尔疏忽。­</p>
<p>我总想更加果断，却难免偶尔迟疑。­</p>
<p>我总想更加宽仁，却难免偶尔小气。­</p>
<p>我总想更加睿智，却难免偶尔迷惑。­</p>
<p>我总想更加谦逊，却难免偶尔傲慢。­</p>
<p>我总想更加诚实，却难免偶尔虚伪。­</p>
<p>我总想更加成熟，却难免偶尔幼稚。­</p>
<p>我总想更加稳重，却难免偶尔轻狂。­</p>
<p>我总想更加阳光，却难免偶尔阴郁。­</p>
<p>我总想更有斗志，却难免偶尔怠惰。­</p>
<p>我总想要一个完美的自己，却发现完美的人不存在。­</p>
<p>我想，也许这才是最真实的我，我不需要改变。但我还是想要改变，因为我始终相信，会有那样一个更好的我。­</p>
<p>“仁者不忧，智者不惑，勇者不惧。”小时候第一次看到这句话，心里就萌生了那时最大的理想，那就是做一个仁者+智者+勇者。现在还是一样，虽然我明白我达不到那么完美，但我还是一直在心里默念，我可以。­</p>
<p>“淡泊以明志，宁静以致远。”至今我笔袋里还夹着我写的这张字条。改变自己，其实不需要什么刻意的表现，只要我明白，只要我能时刻看清自己，只要我一直在努力改变。我想，就这样很好。­</p>
<br>



<p>我想，改变自己，我可以更优秀。­</p>
<br>







<h4 id="三­"><a href="#三­" class="headerlink" title="三­"></a>三­</h4><br>





<p>我想，我总会想起你们。­</p>
<br>

<p>­</p>
<p>我的朋友不怎么多，但每一个都很好，我总是对别人这样说，也对自己说。­</p>
<p>一个人独处的时候，总会想起一些人，现在或是曾经，那些在我生命中留下过或大或小足迹的人，那些无论怎样总是陪伴在我左右的人，那些改变过我或是因我而改变的人，那些，我的朋友。­</p>
<p>我喜欢的友情，是那一种淡淡的不夹杂质的味道，这样的感觉就很好。不需要什么精彩的情节，只需要一些平实的温暖，一些无声的鼓励与支持，一种不用说话就全都早已明了的默契，一种不受时间与空间阻隔的熟悉而踏实的感受。或许那只是一句加油，一包牛奶，一次挥手，一个真实的笑，或是在你口渴难忍时抛过来的一瓶矿泉水，或是夜深人静时手机屏幕上突然的一句“还不睡？”我想，我无法记住所有的细节，但是我会记得那一种真实的感觉，每一种，对每一个人独一无二的感受。­</p>
<p>我想，我总会想起你们：我的小太阳们TT、荣、浩、嘉；我的小旭、亮仔、二愣、钰祥兄，以及我所有的初中的朋友们；我的小学同学尹超、王雪晶等等；我的榜样学长马祥、何莉、王旭东；我天生的好兄弟李柏杭和王勇，以及我所有的高中的朋友们；和我一起坐43的朋友们；我的大猪、琦、大兔子、小狮子；我的“小妹妹”小西；和我一起长大的小弟郭锐……­</p>
<br>



<p>我想，我会想着你们，我的朋友。­</p>
]]></content>
  </entry>
  <entry>
    <title>我说，那就飞吧我的天马行空</title>
    <url>/blog/2020/09/24/%E6%88%91%E8%AF%B4%EF%BC%8C%E9%82%A3%E5%B0%B1%E9%A3%9E%E5%90%A7%E6%88%91%E7%9A%84%E5%A4%A9%E9%A9%AC%E8%A1%8C%E7%A9%BA/</url>
    <content><![CDATA[<p>最近几年已经越来越没有时间写生日文，但是我觉得一定要在这个时间点上停下来总结些什么。</p>
<p>其实我今年看到乔布斯2005年在斯坦福毕业典礼上的演讲，才发现他说的几个点正好与我之前几篇生日文中的观点相契合。</p>
<p>Remembering that I’ll be dead soon is the most important tool I’ve ever encountered to help me make the big choices in life. Because almost everything - all external expectations, all pride, all fear of embarrassment or failure - these things just fall away in the face of death, leaving only what is truly important. Remembering that you are going to die is the best way I know to avoid the trap of thinking you have something to lose. You are already naked. There is no reason not to follow your heart.</p>
<p>Your time is limited, so don’t waste it living someone else’s life. Don’t be trapped by dogma - which is living with the results of other people’s thinking. Don’t let the noise of other’s opinions drown out your own inner voice. And most important, have the courage to follow your heart and intuition. They somehow already know what you truly want to become. Everything else is secondary.</p>
<p>I’m convinced that the only thing that kept me going was that I loved what I did. You’ve got to find what you love. And that is as true for your work as it is for your lovers. Your work is going to fill a large part of your life, and the only way to be truly satisfied is to do what you believe is great work. And the only way to do great work is to love what you do.</p>
<br>

<p>那天翻到了高考时的相册，发现已经过去8年了，而我秉持的理想主义似乎从一开始就埋下了脉络。</p>
<br>

<p>2012</p>
<p>真实是唯一的信仰，自己是唯一的偶像。</p>
<br>

<p>2014</p>
<p>可是你的旧物，你的朋友，你的才能，乃至你的生命，你所拥有的一切，不是总有一天会丢失的吗？</p>
<p>你本一无所有，是拥有带给你恐惧。</p>
<br>

<p>2016</p>
<p>你需要满足你天性中真正需要的东西。</p>
<p>人生的本质是一段体验。</p>
<p>无论如何，我们终将一事无成，你说呢？</p>
<br>

<p>2018</p>
<p>一定要明白自己生命中真正最想要的是什么，假如下一秒即将死亡，你最遗憾的事会是什么。</p>
<p>即使暂时得不到，暂时无法做自己想要做的事，也至少理应明晰自己的方向。</p>
<br>

<p><img src="https://raw.githubusercontent.com/DiaryChris/typora-image/master/typora202009/24/170214-369672.jpeg" alt="IMG_5607"></p>
<p><img src="https://raw.githubusercontent.com/DiaryChris/typora-image/master/typora202009/24/170132-325834.jpeg" alt="2012"></p>
<br>

<p>万幸的是，我找到了自己的方向，明晰自己心中的“Great Work”，知道自己真正想做的是什么，这让我觉得我比其他人幸运很多。毕竟很多人究其一生可能都没有真实地热爱过自己的工作，我何其幸运。我花了很多时间，兜兜转转，绕了一大圈才让自己走在了朝向目标的轨道上。我觉得这一切都是值得的，也时刻提醒自己，不要辜负了自己的幸运与他人的真心相助。</p>
<p>我希望找回高三时候的那种感觉，就是那种为了一个清晰的目标而不断突破自身界限的感觉。</p>
<p>因为我知道，是时候发力了，我在正确的轨道上。</p>
<br>

<p>人一生又有几次拼搏的机会呢？</p>
<br>

<p>我说，那就飞吧我的天马行空。</p>
<br>

<p><img src="https://raw.githubusercontent.com/DiaryChris/typora-image/master/typora202009/24/234203-62197.png" alt="image-20200924234201686"></p>
]]></content>
      <categories>
        <category>生日</category>
      </categories>
  </entry>
  <entry>
    <title>我的高考</title>
    <url>/blog/2012/06/22/%E6%88%91%E7%9A%84%E9%AB%98%E8%80%83/</url>
    <content><![CDATA[<p>说实话，高三一年，一直以为高考是一场神圣而庄严的战斗，每一天都为了一个灿烂的目标，坚定的走下去，然而，当卷子发到我手里的时候，我笑了，它的题目并没有想像中的那样正规而严谨，精彩而伟大，相反地，它更像是一场游戏，或是一个命运和我开的玩笑，它告诉我说：比智商和努力以及心态更重要的，其实是你的运气。</p>
<br>

<p>分数下来后，我更加确定了这一点，我高中三年最感激最尊敬的老师张明刚，他对我说：“这就是命。”我想他说的是对的。</p>
<br>

<p>其实在老张拍着我和张文峰肩膀对满满一办公室的老师自信的说：“这两个绝对600分以上。”的时候，我马上就只想赶快逃离这个办公室。没想到还真上600了，真他妈上的好，可笑了。</p>
<br>

<p>知道分数后好兄弟打来电话，我说不出话，真的说不出来，感觉每说一个字都有可能情绪失控，这是什么情况。</p>
<br>

<p>情绪不知道是啥情绪，反正就是想杀人，听《歪腰》结果半边耳机是坏的，想把丁一耳机全砸了。打开QQ，一会儿一个问分数的，我全给关了，然后就盯着屏幕上的歌词发呆。</p>
<br>

<blockquote>
<p>人生就像是歌手上通告  最需要出其不意的滑倒</p>
<p>让眼泪交织哄堂的大笑  要坏掉也要光荣的坏掉</p>
<p>管他的坏就坏掉  谁不会歪腰歪腰 命运偶尔也会 好好笑</p>
<p>我不会鬼吼鬼叫  顶多是歪腰歪腰  就算搞笑我也  绝对不求饶</p>
</blockquote>
<br>

<p>最近很想吼两句这个，感觉像是给我写的。</p>
<br>

<p>最后又去了趟学校，但是又实在不想见老师，结果拉着个脸目光呆滞地进去，老师都说：“没什么的”，然后拉着个脸又出来了。</p>
<br>

<p>最后坐了辆好像是末班车的43回了，也没开窗吹风。</p>
<br>

<p>就是这样，睡觉吧，我又想起来高考前一天晚上我几乎没睡着觉。</p>
<br>

<p>写于2012年夏至后一夜</p>
]]></content>
  </entry>
  <entry>
    <title>无题</title>
    <url>/blog/2011/10/25/%E6%97%A0%E9%A2%98/</url>
    <content><![CDATA[<p>车上只剩我一个人，</p>
<p>当车在这条长长的街上开得像飞一样，</p>
<p>我感受到了最真实的最本质的自由，</p>
<p>我知道，</p>
<p>这是只属于我的无法形容的最宝贵的财富。  </p>
]]></content>
  </entry>
  <entry>
    <title>永远的四班——K40语录</title>
    <url>/blog/2009/03/24/%E6%B0%B8%E8%BF%9C%E7%9A%84%E5%9B%9B%E7%8F%AD%E2%80%94%E2%80%94K40%E8%AF%AD%E5%BD%95/</url>
    <content><![CDATA[<p>第一名：把门开（K)开(K)！<br>第二名：哎，说（刷）对了！<br>第三名：向后转，走！<br>第四名：玩（wan）着！<br>第五名：这题中考不考就找我来。<br>第六名：喝一口，死不了！<br>第七名：现在说闲话的，大声点，让我也听听！<br>第八名：集（di）气瓶<br>第九名：这个我们留到下节课讲~<br>第十名：去！到教育局告我去！！<br>第十一名：玉不琢不成器，大家都是和氏璧！！！！<br>第十二名：对着呢错着呢错着呢对着呢~~　……　哎对着呢！<br>第十三名：人不为己，天诛地灭<br>第十四名：损人不利己的事别做，损人利己的事做一点还是可以理解的~~<br>第十五名：各位，把练习本给我拿（拉）出来！<br>第十六名：蛾子也要学化学！<br>第十七名：来来来干撒起老？<br>第十八名：那人家是特级教师，我是个啥？？<br>第十九名：别听那些专家的，各位<br>第二十名：看来我得采取些武力措施！！   （答：校长好~）<br>第二十一名：啊！你说啥！？（学DFG的）<br>第二十二名：往出走！！！ </p>
]]></content>
  </entry>
  <entry>
    <title>永远的四班——斌强语录</title>
    <url>/blog/2009/03/24/%E6%B0%B8%E8%BF%9C%E7%9A%84%E5%9B%9B%E7%8F%AD%E2%80%94%E2%80%94%E6%96%8C%E5%BC%BA%E8%AF%AD%E5%BD%95/</url>
    <content><![CDATA[<p>第一名：你缺啥？<br>第二名：你挑衅是吧？！<br>第三名：特遗憾一个！<br>第四名：以后上课女生不许看男生！（他不是男生？？？）<br>第五名：你的饭量和成绩成不成正比？<br>第六名：脏宝宝！（阿煤专用）<br>第七名：转笔的同学把你的脑筋多转一转啊！<br>第八名：考那么点分，回家数数碗里的米粒，你对得起吗？<br>第九名：我觉得我像马戏团的驯兽师！<br>第十名: 把你爸叫来!<br>第十一名: 回家和你爸做游戏去!<br>第十二名: 对得起饭不?!<br>第十三名：你是小丑吗？（万ZY专用）<br>第十四名：饭桶一个！！<br>第十五名: 以后买袜子就买一只！（万ZY专用）<br>第十六名：家里吃饱了，到学校消化来了吗？？<br>第十七名：我看你不是傻子，胜似傻子。<br>第十八名：你一天老轰轰哈哈啥呢？！把海鲜吃上你还嗷嗷呢吗？？（阿煤专用）<br>第十九名：再别说了，把嘴扯破了！！！(涛）<br>第二十名：再别转笔了，绑个皮筋，最简单的物理疗法！！（×子专用）<br>第二十一名：回家给你的脑子内存整理一下去！（祥）<br>第二十二名：别动窗户了，再动就从窗户出去！！！<br>第二十三名：家里把你当宠物养着呢吗！？<br>第二十四名：这个题有问题！！！<br>第二十五名：唉！有点乱！！！<br>第二十六名：做一次，还是天天做！？<br>第二十七名：你！ 做上了没有？？<br>第二十八名：你！ 为啥不学习！ 智商就这么弱呗！！！<br>第二十九名：你！ 钱包大的很那！（涛）<br>第三十名：你是不是吃撑着呢！！<br>第三十一名：在上面站着表演呢吗！<br>第三十二名：再不要捋胡子了！<br>第三十三名：我看你不正常！！！<br>第三十四名：再别摇头了，摇头啥意思？？ 忏悔着呢吗？<br>第三十五名：别回头，再回头就别转过来！！<br>第三十六名：满脑子的垃圾，回家倒一倒！！！（万ZY专用）<br>第三十七名：你日常用语咋那么多的！！<br>第三十八名：你咋这么粗呢？！<br>第三十九名：计算题就写个“已知”，“已知”的“知”还写错了、、<br>第四十名：吓死了？死了才好！！~~<br>第四十一名：脸有多厚？？<br>第四十二名：赶紧多吃点臭豆腐，把智商提高点！！！<br>第四十三名：回家把智商测测，看能不能达到百分之零！！！！<br>第四十四名：都做一做，这题比游戏简单！！！<br>第四十五名：你爸是干嘛的！！你爸啥都会吗！？<br>第四十六名：哎（矮）呀！看不懂，这题我也分析不来！！<br>第四十七名：都这么大了还吃手，你说年过完怎么也该长一岁了吧，怎么还吃手啥？<br>第四十八名：自己做又不做，一起学又不学，，你有障碍啊！？<br>第四十九名：叫他领你上高中，上不去高中向他索赔！<br>第五十名：你一天尽笑啥着呢？咋这么乐观？！<br>第五十一名：忘了？ 那么深刻的教训能忘了？！<br>第五十二名：你有本事考个第一！来个笑傲江湖！<br>第五十三名：初中三年···除了长肉，还长了些啥？？<br>第五十四名：如有雷同 ~情绪别激动 ~~<br>第五十五名：记住、 劳动最光荣！！！（万ZY专用）<br>第五十六名：扔垃圾的那个把垃圾吃上！ 你野人吗！？？（薛小宝专用）<br>第五十七名：这是个很失败的电路！！<br>第五十八名：你！说个话咋还瞪着我说？！（Bull专用）<br>第五十九名：你！故意的是吧！？故意装饭桶，，还是真的饭桶？？<br>第六十名：去！后面站着去我受不了了（摸了摸啤酒肚）受不了了啊！！！（薛小宝专用）</p>
]]></content>
  </entry>
  <entry>
    <title>永远的四班——最难忘片段</title>
    <url>/blog/2009/08/30/%E6%B0%B8%E8%BF%9C%E7%9A%84%E5%9B%9B%E7%8F%AD%E2%80%94%E2%80%94%E6%9C%80%E9%9A%BE%E5%BF%98%E7%89%87%E6%AE%B5/</url>
    <content><![CDATA[<p>最难忘片段 1：还记得老李带我们跳大绳，跳了300多下，最后居然把绳子给跳断了。</p>
<p>最难忘片段 2：还记得我们班在运动会上集体总分总是第一，最后一次还得了全校超高分。</p>
<p>最难忘片段 3：还记得我们跳大绳还被武启明拍下来在校电视台播了一下</p>
<p>最难忘片段 4：还记得我们初三学广播操时集体逃跑吗？把教操那女的无奈着。</p>
<p>最难忘片段 5：还记得老李亲自率领我们打扫学校卫生，那叫个干净，还被学校表扬了一下，+10分，赞。</p>
<p>最难忘片段 6：还记得那年教师节放假，正好轮到我们打扫学校卫生，打扫完了我去“丁一”一看，额里面一堆咱们班的。</p>
<p>最难忘片段 7：还记得雷锋日那天，老李让我们出校门去擦马路两边的护栏，我们等了好久都没见记者来采访一下的，哎。</p>
<p>最难忘片段 8：还记得最后一个运动会，我们在一起玩“我爱记歌词”，我还是领唱呢，呵呵！</p>
<p>最难忘片段 9：还记得补课时我们把破袜子放在讲桌上跟斌强扎刺。</p>
<p>最难忘片段 10：还记得四十有一次实验做成功了特高兴，让我们把试管传着看，可是张和万往里面放了个扎面包的条条，我们都看那个去了，把四十气坏了。</p>
<p>最难忘片段 11：还记得四十有一次实验和变魔术似的，试管一摇，绿了；再一摇，蓝了。</p>
<p>最难忘片段 12：还记得斌强有一次骂阿煤，骂着骂着自己忍不住就笑了，一直靠在讲桌上笑了五分钟没讲课</p>
<p>最难忘片段 13：还记得有人在校服背上画画被斌强抓了，之后张故意在背上画了个电路图跟斌强扎刺，还写了个E&#x3D;MC2</p>
<p>最难忘片段 14：还记得我们在放学时喊的“Hooray”</p>
<p>最难忘片段 15：还记得我们学电磁感应时，斌强带来了个手摇发电机，他正摇的时候，我们喊“再快点，不要停”、“亮了，亮了”，斌强越摇越带劲，最后，发电机的手柄被摇断了。</p>
<p>最难忘片段 16：还记得我们的珍藏版校服。</p>
<p>最难忘片段 17：还记得老李打人PP时有多疼，到现在才觉得再疼也值了。</p>
<p>最难忘片段 18：还记得我们在联欢会上给李亮和凤玉婷举办的婚礼。</p>
<p>最难忘片段 19：还记得蛋蛋在广播时说的那句“这首歌送给初三四班的李亮和凤玉婷同学，祝他们友谊地久天长。”</p>
<p>最难忘片段 20：还记得窝窝对我的讽刺：“乖娃娃，站起来。”</p>
<p>最难忘片段 21：还记得窝窝说“勾股定理！”时的语气。</p>
<p>最难忘片段 22：还记得我们做眼保健操时一起跺脚。 </p>
<p>最难忘片段 23：还记得我们一起对斌强发出高压锅的声音。</p>
<p>最难忘片段 24：还记得窝窝拖堂后说：“谁说的下课？他不是学生！”</p>
<p>最难忘片段 25：还记得小波总是把我们的体育课撬了不来上。</p>
<p>最难忘片段 26：还记得斌强和大锤没能和我们一起照毕业照，“特遗憾一个”。。。</p>
<p>最难忘片段 27：还记得窝窝在白板上讲题写不下了，一激动，直接往墙上继续写。</p>
<p>最难忘片段 28：还记得窝窝有一次别的老师来听窝窝的课，窝窝一声不吭直接让我们自己看了35分钟的“回顾与思考”，最后5分钟才开始讲课，又拖了9分钟的堂，强悍~~呵呵！</p>
<p>最难忘片段 29：还记得窝窝在联欢会上用笛子吹了首菊花台，吹得那么快，还让我们跟着唱。</p>
<p>最难忘片段 30：还记得窝窝总是拖堂直到下节课K40快来了才走，K40一来就问“这谁擦的黑板啥？”，我们答：“万子一”四十又问：“为啥不擦黑板？”我们答：“上节课拖堂了，真的拖堂了。”直到最后一节课K40也没搞清楚我们是骗他的还是真的。</p>
<p>最难忘片段 31：还记得我初三时老迟到，而且每次都碰到小红的课，她问我：“怎么回事？”我每次都答：“车慢了”，最后小红都懒得问了。</p>
<p>最难忘片段 32：还记得老李的癖好：每一届初三四班他都要带。</p>
<p>最难忘片段 33：还记得张钰祥对大耗子超级玛丽版的“大大大大肌”</p>
<p>最难忘片段 34：还记得我和贺杰在桌子底下打架，被斌强发现了：“那两个男生，手拉手干啥着呢？！”</p>
<p>最难忘片段 35：还记得最后一节语文晚自习小红被我们的一句“兰老师，谢谢你，我们永远爱你！”感动得哭了，我们大家也都快哭了。</p>
<p>最难忘片段 36：还记得张荣每次“上道”都偷懒，最后被推车了。</p>
<p>最难忘片段 37：还记得我陪小省长等车，等了快一个小时。</p>
<p>最难忘片段 38：还记得我被“笨笨”骂作“老年痴呆”。</p>
<p>最难忘片段 39：还记得我们教室前的“宁静致远”，教室后的一排奖状，以及教室里一砖一瓦的摸样。</p>
<p>最难忘片段 40：还记得我们永远的四班。</p>
]]></content>
  </entry>
  <entry>
    <title>生无所息 行而不止</title>
    <url>/blog/2011/07/09/%E7%94%9F%E6%97%A0%E6%89%80%E6%81%AF%20%E8%A1%8C%E8%80%8C%E4%B8%8D%E6%AD%A2/</url>
    <content><![CDATA[<p>子贡倦于学，告仲尼曰：“愿有所息。”­</p>
<p>仲尼曰：“生无所息。”­</p>
<br>







<p>我，总是会想，未来要去往哪里，一直想到自己也觉得疲惫。有时候也会突然不知所措，不知道等待我的，会是一个怎样的未来。其实，只想坚定的对自己说，就这样，一直走。­</p>
<p>有时候也会抱怨一下“和谐”社会，也会偶尔想到为什么我不是“富二代”。世界上没有什么事是完全公平的，更何况我已经得到了很多很多。仔细一想，我完全不需要羡慕那些富二代，我拥有着那么多他们可能永远都没有机会拥有的思想与快乐。其实就是这样，一个人拥有一些的同时，在另一些方面，就会自然而然的失去一些，这是一条定律。­</p>
<p>这就谈到了选择，假设现在让我重新选择自己的出身与个性，我会毫不犹豫地选择现在的自己，一成不变。我只想说，我凭什么羡慕别人，就像我留言板上的那句寄语，我，就是我的作品。­</p>
<p>一路上总会有阻碍，甚至是选择。我父母极其希望能够强加他们的意志于我的选择，我只说，不可能。我会听取他们的建议，但不会顺从于他们的逼迫。我明白，他们为我考虑得很好，但是我的一生总不可能由他们来规划，也许他们为我找到的是一条捷径，我也更愿意自己去闯，毕竟，那才是我自己的路。我知道，这样很可能会吃更多的苦，碰更多次壁，但是我明白，只要这是我的抉择，我就不会后悔。当然，结果会是怎样，也只能由我自己来承担。肯定会有许许多多的人笑我天真，那就笑吧。我也明白我的倔强，但那不是天真，也许是天性，喜欢简单而随性的自由，这就是我，我不会改变。­</p>
<p>“青春是人生的实验课，错也错得很值得。”“总有一天我们都老了，不会遗憾就OK了。”很喜欢这两句歌词，可以将一切的迷茫打碎。走自己的路，难免会有更多坎坷，没关系，错了就错了，沿途的风景才是最大的快乐。世上只有想不通的人，没有走不通的路，那么我，怕什么。­</p>
<p>我会一直这样走，不想想太多。如果有人愿意陪我，那我也不会奢求太多。一把吉他，几个一生的好朋友，真的就已经足够。我要的只不过是我的信仰，我的快乐。人生的意义，归根究底不就是为自己追寻快乐。人生短暂，我不能让自己后悔。­</p>
<p>生无所息，行而不止。­</p>
<br>



<p>2011.7.8</p>
<p>3:09­</p>
]]></content>
  </entry>
  <entry>
    <title>用/(.*?)d/正则表达式匹配abcd为什么得到的是abcd而不是d?</title>
    <url>/blog/2015/09/30/%E7%94%A8-d-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%8C%B9%E9%85%8Dabcd%E4%B8%BA%E4%BB%80%E4%B9%88%E5%BE%97%E5%88%B0%E7%9A%84%E6%98%AFabcd%E8%80%8C%E4%B8%8D%E6%98%AFd/</url>
    <content><![CDATA[<p><strong>问题：</strong></p>
<ol>
<li>用&#x2F;(.*?)d&#x2F;正则表达式匹配abcd为什么得到的是abcd而不是d？而用”&#x2F;a(.*?)&#x2F;“正则表达式匹配”abcd”则只得到”a”。</li>
<li>用”&#x2F;a(.*?)d&#x2F;“正则表达式匹配”abcd”为什么得到的是”abcd”而不是无法匹配？</li>
</ol>
<p><strong>回答：</strong></p>
<p><strong>看到了一个非常棒的帖子，从NFA引擎机制上解释了这一问题</strong></p>
<p><strong>引用过来供大家参考</strong></p>
<p><strong>本题相关关键内容已加粗并下划线</strong> </p>
<p><em>（其中有两张图大家看完一定就明白了）</em></p>
<blockquote>
<p>对于贪婪与非贪婪模式，可以从应用和原理两个角度进行理解，但如果想真正掌握，还是要从匹配原理来理解的。</p>
<p>先从应用的角度，回答一下“什么是贪婪与非贪婪模式？” </p>
<p><strong>2.1 从应用角度分析贪婪与非贪婪模式</strong></p>
<p>2.1.1 什么是贪婪与非贪婪模式</p>
<p>先看一个例子</p>
<p>举例：</p>
<p>源字符串：aa<div>test1</div>bb<div>test2</div>cc </p>
<p>正则表达式一：<div>.*</div> </p>
<p>匹配结果一：<div>test1</div>bb<div>test2</div> </p>
<p>正则表达式二：<div>.*?</div> </p>
<p>匹配结果二：<div>test1</div>（这里指的是一次匹配结果，所以没包括<div>test2</div>）</p>
<p>根据上面的例子，从匹配行为上分析一下，什是贪婪与非贪婪模式。 </p>
<p>正则表达式一采用的是贪婪模式，在匹配到第一个“”时已经可以使整个表达式匹配成功，但是由于采用的是贪婪模式，所以仍然要向右尝试匹配，查看是否还有更长的可以成功匹配的子串，匹配到第二个“”后，向右再没有可以成功匹配的子串，匹配结束，匹配结果为“<div>test1</div>bb<div>test2</div>”。当然，实际的匹配过程并不是这样的，后面的匹配原理会详细介绍。 </p>
<p>仅从应用角度分析，可以这样认为，贪婪模式，就是在整个表达式匹配成功的前提下，尽可能多的匹配，也就是所谓的“贪婪”，通俗点讲，就是看到想要的，有多少就捡多少，除非再也没有想要的了。 </p>
<p>正则表达式二采用的是非贪婪模式，在匹配到第一个“”时使整个表达式匹配成功，由于采用的是非贪婪模式，所以结束匹配，不再向右尝试，匹配结果为“<div>test1</div>”。 </p>
<p>仅从应用角度分析，可以这样认为，非贪婪模式，就是在整个表达式匹配成功的前提下，尽可能少的匹配，也就是所谓的“非贪婪”，通俗点讲，就是找到一个想要的捡起来就行了，至于还有没有没捡的就不管了。</p>
<p>2.1.2 关于前提条件的说明</p>
<p>在上面从应用角度分析贪婪与非贪婪模式时，一直提到的一个前提条件就是“整个表达式匹配成功”，为什么要强调这个前提，我们看下下面的例子。 </p>
<p>正则表达式三：<div>.*</div>bb </p>
<p>匹配结果三：<div>test1</div>bb </p>
<p>修饰“.”的仍然是匹配优先量词“<em>”，所以这里还是贪婪模式，前面的“<div>.</div></em>”仍然可以匹配到“<div>test1</div>bb<div>test2</div>”，但是由于后面的“bb”无法匹配成功，这时“<div>.<em></em></div>”必须让出已匹配的“bb<div>test2</div>”，以使整个表达式匹配成功。这时整个表达式匹配的结果为“<div>test1</div>bb”，“<div>.</div>”匹配的内容为“<div>test1</div>”。可以看到，在“整个表达式匹配成功”的前提下，贪婪模式才真正的影响着子表达式的匹配行为，如果整个表达式匹配失败，贪婪模式只会影响匹配过程，对匹配结果的影响无从谈起。 </p>
<p>非贪婪模式也存在同样的问题，来看下面的例子。</p>
<p>正则表达式四：<div>.*?</div>cc </p>
<p>匹配结果四：<div>test1</div>bb<div>test2</div>cc </p>
<p>这里采用的是非贪婪模式，前面的“<div>.<em>?</em></div>”仍然是匹配到“<div>test1</div>”为止，此时后面的“cc”无法匹配成功，要求“<div>.?</div>”必须继续向右尝试匹配，直到匹配内容为“<div>test1</div>bb<div>test2</div>”时，后面的“cc”才能匹配成功，整个表达式匹配成功，匹配的内容为“<div>test1</div>bb<div>test2</div>cc”，其中“<div>.*?</div>”匹配的内容为“<div>test1</div>bb<div>test2</div>”。可以看到，在“整个表达式匹配成功”的前提下，非贪婪模式才真正的影响着子表达式的匹配行为，如果整个表达式匹配失败，非贪婪模式无法影响子表达式的匹配行为。 </p>
<p>2.1.3 贪婪还是非贪婪——应用的抉择</p>
<p>通过应用角度的分析，已基本了解了贪婪与非贪婪模式的特性，那么在实际应用中，究竟是选择贪婪模式，还是非贪婪模式呢，这要根据需求来确定。 </p>
<p>对于一些简单的需求，比如源字符为“aa<div>test1</div>bb”，那么取得div标签，使用贪婪与非贪婪模式都可以取得想要的结果，使用哪一种或许关系不大。 </p>
<p>但是就2.1.1中的例子来说，实际应用中，一般一次只需要取得一个配对出现的div标签，也就是非贪婪模式匹配到的内容，贪婪模式所匹配到的内容通常并不是我们所需要的。 </p>
<p>那为什么还要有贪婪模式的存在呢，从应用角度很难给出满意的解答了，这就需要从匹配原理的角度去分析贪婪与非贪婪模式。 </p>
<p><strong>2.2 从匹配原理角度分析贪婪与非贪婪模式</strong></p>
<p>如果想真正了解什么是贪婪模式，什么是非贪婪模式，分别在什么情况下使用，各自的效率如何，那就不能仅仅从应用角度分析，而要充分了解贪婪与非贪婪模式的匹配原理。 </p>
<p>2.2.1 从基本匹配原理谈起</p>
<p>NFA引擎基本匹配原理参考：正则基础之——NFA引擎匹配原理。 </p>
<p>这里主要针对贪婪与非贪婪模式涉及到的匹配原理进行介绍。先看一下贪婪模式简单的匹配过程。 </p>
<p>源字符串：”Regex” </p>
<p>正则表达式：”.*”</p>
</blockquote>
<p><img src="https://pic3.zhimg.com/2eb686420491d04155858328aa2d4156_b.png" alt="img"></p>
<p> 图2-1   注：为了能够看清晰匹配过程，上面的空隙留得较大，实际源字符串为“”Regex””，下同。</p>
<p>来看一下匹配过程。</p>
<ol>
<li>首先由第一个“””取得控制权，匹配位置0位的“””，匹配成功，控制权交给“.*”。</li>
<li>“.*”取得控制权后，由于“*”是匹配优先量词，在可匹配可不匹配的情况下，优先尝试匹配。从位置1处的“R”开始尝试匹配，匹配成功，继续向右匹配，匹配位置2处的“e”，匹配成功，继续向右匹配，直到匹配到结尾的“””，匹配成功，由于此时已匹配到字符串的结尾，所以“.*”结束匹配，将控制权交给正则表达式最后的“””。</li>
<li>“””取得控制权后，由于已经在字符串结束位置，匹配失败，向前查找可供回溯的状态，控制权交给“.*”，由“.*”让出一个字符，也就是字符串结尾处的“””，再把控制权交给正则表达式最后的“””，由“””匹配字符串结尾处的“””，匹配成功。</li>
</ol>
<p>此时整个正则表达式匹配成功，其中“.*”匹配的内容为“Regex”，匹配过程中进行了一次回溯。</p>
<p>接下来看一下非贪婪模式简单的匹配过程。</p>
<p>源字符串：”Regex”</p>
<p>正则表达式：”.*?”     </p>
<p><img src="https://pic3.zhimg.com/8513c71e07e001bde2ab3ce4b47f3712_b.png" alt="img"></p>
<p>  图2-2   看一下非贪婪模式的匹配过程。</p>
<ol>
<li><strong>首先由第一个“””取得控制权，匹配位置0位的“””，匹配成功，控制权交给“.*?”</strong>。</li>
<li><strong>“.*?”取得控制权后，由于“*?”是忽略优先量词，在可匹配可不匹配的情况下，优先尝试不匹配，由于“*”等价于“{0,}”，所以在忽略优先的情况下，可以不匹配任何内容。从位置1处尝试忽略匹配，也就是不匹配任何内容，将控制权交给正则表达式最后的“””。</strong></li>
<li><strong>“””取得控制权后，从位置1处尝试匹配，由“””匹配位置1处的“R”，匹配失败，向前查找可供回溯的状态，控制权交给“.*?”，由“.*?”吃进一个字符，匹配位置1处的“R”，再把控制权交给正则表达式最后的“””。</strong>  </li>
<li><strong>“””取得控制权后，从位置2处尝试匹配，由“””匹配位置1处的“e”，匹配失败，向前查找可供回溯的状态，重复以上过程，直到由“.*?”匹配到“x”为止，再把控制权交给正则表达式最后的“””。</strong></li>
<li><strong>“””取得控制权后，从位置6处尝试匹配，由“””匹配字符串最后的“””，匹配成功。</strong></li>
</ol>
<p>此时整个正则表达式匹配成功，其中“.*?”匹配的内容为“Regex”，匹配过程中进行了五次回溯。 </p>
<p>全文链接： <a href="http://blog.csdn.net/lxcnn/article/details/4756030" target="_blank" rel="noopener">正则基础之—</a></p>
<p>感谢原作者</p>
]]></content>
  </entry>
  <entry>
    <title>红警3 2v2 4：0 纪实</title>
    <url>/blog/2011/07/17/%E7%BA%A2%E8%AD%A63%202v2%204%EF%BC%9A0%20%E7%BA%AA%E5%AE%9E/</url>
    <content><![CDATA[<p>5：45</p>
<p>丁一</p>
<p>开始我们新一轮的征程</p>
 <br>

 

<h4 id="第一战-生死一线-绝地制胜"><a href="#第一战-生死一线-绝地制胜" class="headerlink" title="第一战 生死一线 绝地制胜"></a>第一战 生死一线 绝地制胜</h4> <br>

<p>打开红警三，战役逼近，苏维埃进行曲已经奏响。</p>
<p>我的昵称依旧叫Li Ming，</p>
<p>张钰祥的昵称依旧是Danny。</p>
<p>颜色依旧是我们的必胜色：黄色和绿色。</p>
<p>阵营：我—苏联，张钰祥—帝国</p>
<p>战役开始，四人都在紧锣密鼓地建造基地。兵营完成，侦查熊派出，防空步兵进驻敌附近的楼，发现离我最近的红色苏联造了两个船场（傻着呢），并出了几辆磁暴快艇与牛蛙，我也加紧点磁暴与牛蛙发展好海军。战事首先在张钰祥侧打响，我发现红色派其小股海军也去攻打张钰祥，基地空虚，恰好我小股海军初具规模，于是我立即调海军编队，闪击其两个船厂，扫平其海面设施，接着，趁其不备，磁暴快艇从其薄弱处登陆，一举炸平其主基地、兵营、矿场，一直到一切基础设施。（我一直纳闷他海军怎么一直没回防，是不是被张钰祥灭了）最后，我的双刃直升机编队调来炸掉其核电厂，他被击败。可是喜悦还没有持续，张钰祥被击败，被日本的将军战列舰群。</p>
<p>现在成了1v1，敌将军战列舰群接着就驶来我的基地，我见势立即将基地车迁往内陆高地。只见他的一大群将军在海边徘徊干瞪着我而无用武之地，哈哈我就笑了。可是丝毫不敢放松警惕，抓紧在内陆发展，同时用陆军准备扫平他已经被张钰祥打得残破的基地，可是当我的陆军开到他的基地，发现他基地还有一个将军，结果我的陆军在他的一艘将军对地强大的火力覆盖下无可奈何，最终几乎全军覆灭。他将将军群调回基地防守，发展陆军，企图攻我基地，我意识到，只有用空军了，于是，造机场出双刃，去炸其船厂，差点炸毁，不料被其天狗击落。为夺取制空权，我只好造米格战斗机与天狗对抗，可是，同时他狂造天狗，我米格战机被击落，最终制空无望，同时，他也不断以小股兵来侵袭，我只能造些小恐怖来应对，结果恐怖造多了，多余的我放在他基地旁一小岛（他视野外）上待命，双刃也躲在那里。接着，没有钱了，战车厂也被他炸毁，我总共的财产就剩一个主基地，一个机场，一个矿场，一辆矿车，一个小电厂，一个防空炮，三个小恐怖，几架双刃，和几个在楼里的防空兵，失败几乎已经注定，应该可以认输了。可是，只要还有机会，就不认输，何况可以断定他也肯定没钱了。我用小恐怖侦查照亮视野，用轨道坠落砸他的船厂，用磁力卫星吸走他的矿车，可这些都是杯水车薪。可是，就在此时，他的全部天狗变身去打我的矿车，我的矿车差点被打暴，还好我还有恐怖，以及我事先专门安的防空炮，他的天狗被全歼。机会啊，他这时没任何防空单位，我立即派仅有的几架双刃从南面小岛直扑其基地，一举炸掉他的战车厂，接着开始炸已经快被他修好的船厂，不好的是，他船厂出了一个海翼（防空），这样我的双刃就危险了，不过，我的磁力卫星恰好好了，我往潜着的海翼上一放，海翼一浮出水面就被吸走（太惊险了），这样，随着他在海与陆上所向披靡的将军战列舰群眼睁睁地看着其船厂的崩塌，他大势已去，我扫平他的矿场，他最终意想不到地战败了。这把赢得可谓惊心动魄。</p>
<p>小结：嘿，小日本将军舰很猛么，哥两架双刃就能把你给废了，谁让你为了阴张钰祥把将军舰造那么多的。不过，这也是我有史以来最惊险，最有技术含量的一场战役。也为今天开了一个好头。</p>
<p>（未完）­</p>
]]></content>
  </entry>
  <entry>
    <title>纸飞机</title>
    <url>/blog/2010/12/05/%E7%BA%B8%E9%A3%9E%E6%9C%BA/</url>
    <content><![CDATA[<p>纸飞机、我的勇气<br>越过湿地、穿过密林</p>
<p>没有什么可以阻挡我的足迹<br>没有什么可以击垮我的信心与毅力</p>
<p>绝不哭泣、这是对我的终极磨砺<br>绝不放弃、坚持是最终属于我的胜利</p>
<p>没有风助我一臂、那我就冲向荆棘<br>没有人和我一起、那我就顶天立地</p>
<p>做我自己、我必无敌</p>
<p>我的纸飞机、我的勇气</p>
<p>我就是、程达瑞  </p>
]]></content>
  </entry>
  <entry>
    <title>腾讯游戏实习生面试总结</title>
    <url>/blog/2019/03/05/%E8%85%BE%E8%AE%AF%E6%B8%B8%E6%88%8F%E5%AE%9E%E4%B9%A0%E7%94%9F%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h4 id="初试"><a href="#初试" class="headerlink" title="初试"></a>初试</h4><h6 id="面试官问到的主要问题："><a href="#面试官问到的主要问题：" class="headerlink" title="面试官问到的主要问题："></a>面试官问到的主要问题：</h6><ol>
<li>数组与链表的主要优缺点分别是什么？如何整体复制一个数组？</li>
<li>主要的排序方法有哪些？排序1000个数你会用哪种排序方法？快速排序在什么情况下为最坏情况，最坏情况下时间复杂度为多少？</li>
<li>你对游戏引擎的理解？作为一个游戏引擎必须的部分有哪些？</li>
<li>你是否了解游戏引擎背后的机制，选一个部分举例说明？</li>
<li>UDP和TCP协议在网络游戏中的应用？网络游戏中采取什么方式保证数据的可靠同步？你是否使用过reliable-UDP？</li>
<li>谈谈你对渲染管线的理解，渲染管线全流程是什么样的？</li>
<li>你知道哪些光照模型，分别有哪些特点？</li>
<li>以你所做的项目深入，你怎么确定地形上植被的真实分布？你是否了解到有现有插件做到随机地图的生成。</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>致女朋友</title>
    <url>/blog/2013/06/14/%E8%87%B4%E5%A5%B3%E6%9C%8B%E5%8F%8B/</url>
    <content><![CDATA[<p>是不是每个像我这样的男生，心里都有一个一直陪伴着你的女朋友呢。</p>
<p>那些每年一起过情人节的兄弟们，你们还好么，现在是不是有妹子了呢？</p>
<p>没有妹子的，你们看了这篇日志会不会也有同样的感受呢。</p>
<br>

<p>我也是突然就想写下这篇日志的。</p>
<p>刚才去操场上跑了十圈，一圈估计是400米吧。很久都没有这样跑过了吧，跑完坐在操场的假草皮上，就坐在足球场的白边线上，看着黑下来的天空，看着空荡荡的操场，操场的围栏，外面的树木，就想着我要是有个女朋友，她会和我坐在一起，一起坐在球场的白线上，我会给她说我今天好高兴啊，我今天终于发现一个人也可以蛮高兴的，好久没有长跑了，在跑步的时候，我就觉得我自己是一个英雄，至少是自己的英雄，哈哈。然后我唱着《开天窗》，是谁说半夜不能吃便当，唱着《知足》，怎么去拥抱一夏天的风，就好像你在一旁听着，又好像你听不见。</p>
<p>我好喜欢你啊。</p>
<p>每当看到喜欢的景色，每当做着想做的事，你都会出现在我身边，听我说，看我笑，目光沿着我手指的方向，让我偷偷给你拍照。</p>
<p>其实你一直就这样在我的生活中，形影不离，你说我是不是个自恋狂呢。</p>
<p>其实说实话，我一直以来对朋友的依赖都很大，不过还好之前我运气一直都不错，每次都能遇见那么些跟我一样，可以和我一起傻不啦叽一起走的兄弟。以前做什么事情都有朋友，也一直把友情看的挺重，见到个朋友也特开心，笑的跟个花一样的，当然这只是我自己想象的，笑起来估计挺二。</p>
<p>总之就是有些离不开朋友。</p>
<p>这可能是我现在最大的弱点了。</p>
<p>人总是要经受住孤独的，每个人都有不同的路，我们终究要各奔西东，终究要一个人奋斗，一个人吃饭，一个人上课，一个人做所有的事，一天下来一直都是一个人，其实这都是很正常的，之前一直地抱怨这些，说这些孤独的感受，其实也改变不了什么。或者一天到晚拿个手机一直刷，微信人人微博空间贴吧，看看有没有人找我说话，生怕漏掉了哪一个人给我的留言，生怕没有及时回复你们的话。离不开手机，是从什么时候开始的呢，从我感受到经不起孤独的那一天开始，大概高中就开始了，不过那时只是在家用，高三扔下了半年手机与世隔绝的感觉，但是其实每天上学的时候那朋友还是一抓一大把的，所以一直都没能摆脱对朋友的依赖。那天把QQ状态改成了Q我吧，刘文婷还截图发了个感觉我好可怜，其实我原本根本没想到这一点，我只是偶然间想起了还有这个状态觉得挺好玩，还能置顶多好多帅多拉风是吧。她反倒把我给提醒了，挂一天也没人跟我说话，看起来是挺可怜的，不过我还是觉得挺好玩的，我看别人都不用就我一个人用，嗯不错。</p>
<p>一个人，独行侠，这才叫真正的霸气是吧，只不过一般人都做不到，我觉得我也只是徒有其表而内心挣扎，学会孤独，尤其对我来说，真是个很难的课题。其实以前孤独的时候，一直是有个你在身边的，你特别好，总让我感觉我还有力量，后来写了个《再见王子》，好像就把你给抛弃了，抛弃在家乡了，也不是，说好的要并着你的勇气一起坚持呢？那还是抛弃了。</p>
<p>前一段时间的我，肯定你也不会喜欢吧，我也不喜欢，但那就是我啊，没有经历这些哪来的收获与感悟，其实挺好的。你都看到了，我这一年的状态，你肯定想骂我，但你肯定会对我笑，因为你知道我是好人。你会说，景色没人看到，感受没人分享，其实也没啥，独行也有好的一面，不紧不慢，比较自由。</p>
<p>一个人，一个人，一个人，没有志同道合，没人跟我说想说的话，没人和我听一样的歌，没人想组乐队，没人和我打羽毛球，没人跟我跑步做引体向上，没人热衷于玩红警三，没人喜欢拍照，没人乐于旅行。他们都完全被绩点学分或是LOL所困。</p>
<p>只听见你对我说，这些都不能是你活的不够精彩的理由，一个人就不能奋斗了？一个人就不能快乐了？一个人就不能做自己想做的事了？什么屁话。</p>
<br>



<p>远离家乡，没有朋友，没有亲人，也没有那熟悉的土地和槐树香。</p>
<p>天地间仿佛就剩下了我一个人，我就笑了。</p>
<p>那又怎样，你不是一直都在呢么。</p>
]]></content>
  </entry>
  <entry>
    <title>致最衰败的城市——兰州</title>
    <url>/blog/2014/03/15/%E8%87%B4%E6%9C%80%E8%A1%B0%E8%B4%A5%E7%9A%84%E5%9F%8E%E5%B8%82%E2%80%94%E2%80%94%E5%85%B0%E5%B7%9E/</url>
    <content><![CDATA[<p>总归要为兰州写一篇文章，但没想到是用这样的标题。</p>
<p>出了兰州，我才对这座城市了解更深。我知道有很多人和我一样，离开兰州之后，才开始关注兰州的新闻，兰州的建设，以及关于兰州的一切琐碎事，我们会用近乎赤诚的心，搜寻点滴，不漏蛛丝马迹，维持着我们与这座城市微妙而又近乎痴狂的联系。</p>
<p>说到新闻，我就经常搜一些“兰州地铁最新进展”之类的东西，当然，如我所料，铺天盖地的无非是“兰州地铁10月开建（2012）”“有望年内开工（2012）”“将于今年6月全线开工（2013）”“有望明年2月正式开工（2013）”“兰州轨道交通本月中旬全线开工（2014.3）”之类的消息，更有甚者“第一条轨道线计划2010年建设，2014年建成（2007）”，随之而来的，一种失望，一声叹息。</p>
<p>后来会在贴吧上看一些兰州的新闻和数据，比听记者说会来的真实一些，然而有一则真实的数据却着实让我心头战栗，1978年改革开放前夕，兰州的地区生产总值（GDP）21.8亿元，名列全国20名左右，在省会城市中位列中游，而到2010年左右，兰州的GDP排名竟直接跌破全国前100。我不由地感叹，兰州的经济衰落速度，堪比坠崖。30余年来，兰州的经济指标不仅先后被郑州、太原、长沙、昆明、南宁、南昌、福州、合肥、乌鲁木齐、呼和浩特等十余个省会城市反超，而且更是被数以十计的非省会城市竞相秒杀。我只能说，惜哉，痛哉。回顾历史上兰州的几次辉煌，秦汉文明，已太过遥远，那时黄土高原还是一片郁郁葱葱的森林；隋唐盛世，也暂且不提，丝绸之路的繁华往来早已成为往事。我们就且从清朝看起，从清中期1764年，陕甘总督迁兰州府，兰州开始总督甘陕，抚控西北，“节制三秦，怀柔西域”，成为整个西北地区的中心城市；到清末洋务运动，兰州织呢局（中国第一家机器毛纺织厂）、甘肃制造局（今兰通厂）纷纷建立，黄河上第一座近代公路桥梁“第一桥”（今中山桥）建成通车，甘肃法政学堂（今兰州大学）成立；再到新中国初期，“共和国长子”——兰炼、兰化建厂，兰州成为新中国第一个石化重工业基地；最后到近年来，GDP在全国100位左右徘徊，城市综合实力逐年被大量城市超越，甚至连曾经周边毫不起眼的“小弟弟”城市们也都已经接连发出挑衅，跃跃欲试，兰州，已经俨然不像一个西北第二大城市的样子。我不禁要问，兰州，你去哪了？可是兰州还在这儿啊。不禁想起当年在外上学的姐回来给我说：“每次出去，就发现那儿（指她学校所在城市）又有了新的变化，每次回兰州，却发现和半年前还是一个样。”当时我就觉得，好像真是这么一回事，现在回头看，“我说我怎么觉得自己以前一直生活在一个安定平和、幸福而不多变的城市之中呢。”可见，在全国各大城市都在飞速发展的时候，兰州却一直都在缓步徐行，兰州近几十年来的衰败，有目共睹。</p>
<p>兰州的衰败是有很多原因的，地形因素便是其中之一，黄河河谷带状盆地城市，这是我对兰州地形的定义。去过兰州的人都知道，兰州市区特别的“长”，以至于别的城市的市区图都是方或长方的，而兰州市区图是“奏折”型的。东西长，南北窄，是黄河赋予这座城市与生俱来的特点，以至于你在市区的几乎任何一个地点，都能看见山的踪影，他们属于兰州的“南北两山”，就因为这个，每当我离开兰州而到达一个平原上的城市时，心中都会有些许不安，一眼看不到尽头的平原，没有了山给予我厚重的安全感。因为我早已习惯了，一抬头就能看见一堵山，走两步就能看到黄河的日子。就这样，从某种程度而言，兰州是被“挤”死的，两山夹一河夹成了三明治，兰州就是里面的生菜，该用的地用完了，能用的地也用完了，怎么办？我们可以看到兰州市区内高楼密度相比其他城市还是非常大的，两个字，“逼的”，别的城市有的是发展空间，而兰州没有，殊不知在兰州还时不时地开展着真人版的“愚公移山”，那把楼建得更密集就是情理之中的事了。传言兰州市部分地段人口密集程度超过香港，传言的真实性还有待考证，但是形象性我觉得还是蛮形象的。许多南方的朋友总是固执地认为，兰州地处西北，应该缺水，却不知兰州这座城市，水资源丝毫不愁，土地资源却令人堪忧，想在市区周边找块地来大肆开发一下，实属不易，这也就成就了兰州这座西北“千年老二”的城市，唯独房价出类拔萃，直指第一。</p>
<p>地形的影响还不止于此，更在于交通，市区的交通就不用赘述了，东西贯穿的就那么几条道，不堵才怪，不是有个笑话，一个西固的哥们大清早叫一个东岗的哥们：“快过来我请你吃饭”，然后他们吃的是晚饭。据我观察，兰州是修路最频繁的城市之一，当然不是修新路，是挖开重修，而且刚修好的路一般过两个月就又有“补丁”出现了，为啥？车太多，压的，尤其是大车。兰州去年开始施行8吨以上大车禁入市区，可是为什么还会有车偷偷地入？一是还有很多工厂在市区内，这个暂且不说，二是过境车辆不过市区你让他怎么过？过境交通体系的不健全，使老城倍受交通压力。兰州恐怕是全国为数不多的没有绕城高速的城市之一，为什么没有，为什么不建？因为没钱，当然这只是一个因素，更主要的是地形，纵观兰州周边的高速高铁，我们可以明显地发现，这些工程的桥隧比都普遍高达75%左右，这个数据要是放到平原地区简直就高得不可思议，这意味着什么，这意味着这些高速只有四分之一甚至不到的路程是在平地上直接修的，其余都要打洞或者建桥，要知道建这样一条高速，同里程所需投资和工期都比平原之上要高很多，这样一来，没有钱似乎就变得很正常了。</p>
<p>地形还不是兰州衰败的主要原因，兰州衰败的另一大因素是老国企的衰落。作为一个90后出生的人，我对兰州众多老国企兴衰的了解，“兴”来自父母口中，“衰”则是我亲眼所见。我出生在省建预制厂的职工家庭，虽然后来这个厂子几经易名，但是都无法改变他衰败的事实。后来经常会看到厂门口两侧的竖牌加了又加，我知道，那是厂领导又把地租给别人了，再后来，干脆在从前一大片厂区的入口处起了一个富丽堂皇的名字，“工业园”，一个多么让人哭笑不得的字眼，其实只能充满讽刺地证明，曾经辉煌一时的老厂早已支离破碎。事到如今，我只能望着那些窗户全破，墙面也黑乎乎的老厂房，想象着当中热火朝天，齿轮滚滚的景象；只能看着墙面上偶尔残存的“文革”式字体，描绘出当时工厂工人下班时车水马龙的喧闹；只能透过奶奶厨柜里那只印着“甘肃省建预制厂企业整顿合格纪念”的瓷碗，看到父母语气中的骄傲；也只能看着厂门口“十人合抱”的老槐树，看着他枝繁叶茂。厂子里的人都说，老槐树死了，这厂子就再没有活过来。回想老槐树死的那一年，正值90年代，厂子的衰落，和兰州的衰落几近同步。已经数不清兰州有多少名噪一时的老国企，那些名字从老一辈人口中说出时总显得如数家珍，单就我所知道的，兰炼兰化排除在外，兰棉厂、三毛厂、兰高阀、玻璃厂、洗衣粉厂、兰州制桶厂、西固食品厂、兰石厂、兰通厂、二通厂、三通厂、一毛厂、二毛厂、四毛厂、客车厂、阀门厂、504，还有春风电视机厂，一个个揪心的名字，我相信这还只是兰州众多老国企之中的冰山一角，这些企业大都早已不复往日辉煌，破产或是名存实亡。有一次我有些好奇地问我妈：“那个1872年建厂的兰通厂怎么样了，是不是都应该被当做文物保护起来了？”“那厂子跟预制厂差不多，半死不活的，工人们也全待家里发不出来工资着呢。”一个时代的远去，势不可挡，昔日的辉煌，遥不可及，时光给了兰州一记响亮的耳光，呼呼生风。这座以重工业为主，产业结构蹩脚的老城，失败似乎在半个多世纪前就已经埋下伏笔，综合实力极度下降，GDP从20到100，多么痛的领悟。</p>
<p>除了这两个因素以外，我认为最致命最核心的一个因素还是在于人才流失。兰州，这座黄土高原之上的城市，人才的流失远比他湿陷性黄土的流失要严重得多。有人说，十年内，从兰州大学流失的高水平人才，完全可以再办一所兰州大学。兰州，留不住人。兰州的小孩普遍从小被灌输着一个思想：“要去东南沿海大城市，要去东南沿海大城市，要去东南沿海大城市……”满脑子的“东南沿海大城市”，仿佛“只要出兰州，我就成功啦！”。不妨说说，其实原来我也有这样的心态。“离开兰州”是每个家长、老师挂在嘴边的“别人家孩子”，闪闪发光，成功的标志。无论你去做些什么，无论你过的怎么样，只要你离开兰州，你就会高人一等。事实上也的确这样，有本事的出兰州，没本事的留兰州，这几乎已经成为一个定律。于是兰州就这样培养人才，失去人才，培养人才，失去人才，周而复始，兰州也就几近变身一个向外输送人才，向内吸纳庸才的集散地。虽然占着一所985综合类大学，但是高端人才的流失，还是使兰州在最宝贵的资源上丧尽优势。当然这也是有其中复杂原因的，首先便是缘于兰州私企、外企的缺失，大部分公司都是工资低、待遇差，这样一来，高端人才就算是想留兰州都难。兰州这座城市居住起来确实非常幸福舒适，换句官腔来说就是“宜居”，但是当“留兰州”与“好待遇”不可兼得时，不少人还是会选择“好待遇”，“人往高处走，水往低处流”，东部地区对人才的吸夺也是很正常的事情。但是，人才的流失还有一个更深层次的原因，那就是深深根植于兰州人心中的一种自卑情绪。有人说兰州人好面子，特别在意别人对自己的看法，这其实是自卑的一种体现。其实，兰州人更在意别人对兰州的看法。不知道有多少人和我一样，一出兰州，便急于向别人宣传兰州多好多好，兰州不是大沙漠，我也不是没水喝，那里回民真不多，兰州大学真不错等等。为什么我们会有这样的举动？为啥？都是因为自卑，因为我害怕啊，我被外地人对于兰州近乎无知的了解吓怕了，我害怕别人以为兰州是大沙漠，以为兰州人没水喝。按理说，心理学上讲，一个人缺什么就会炫耀什么，可是兰州什么都不缺啊？是的，兰州什么都不缺，但就是缺一个他应得的、正常的、与之相符的名誉，这也正是我们急于这样做的原因。我们害怕的是别人误解了兰州，因为遍布全国各地（除了兰州）的那些所谓的“兰州拉面”早已把兰州的形象毁的是一干二净，殊不知那些面馆大多和兰州没有半毛钱关系，因为它们根本就不是兰州人开的。出门在外的兰州人自卑，而没出过兰州的人更自卑。我们从小就对这座城市恶言相向，骂兰州成为了一种习俗。太多没出过兰州的人幻想着外地多繁华多高端，于是兰州在他们的眼中就显得一无是处，丑陋不堪。他们只想着如何脱离苦海，逃离兰州，却何曾了解他们的幻想太美好太天真。城里的人想着出去，城外的人想着回来，兰州人的自卑仿佛踏入了一个死循环。而兰州人对这座城市的失望与绝望，就像一剂不温不火的毒药，迷倒了整座城市的神经。如果你是一个兰州人或者曾经在兰州生长过的人，不妨停止妄自菲薄，重拾对兰州的自信，改自卑为谦卑，骂兰州也好，夸兰州也罢，“君子讷于言而敏于行”，兰州就在那里，兰州的衰败就在那里，就看你怎么做。</p>
<p>不可否认，兰州的衰落还有政府、政策以及其他多重的原因，在这里就不一一细说，但是兰州衰落的速度为何如此之快？这就不得不提到“兰州速度”。在许多兰州市民的字典中，“兰州速度”就是慢的代名词，还不只是慢，是非常慢、相当慢、超级慢，慢到简直没法在慢前面加一个合适的程度副词。不止是早晚高峰时段的车速慢，更主要的是城市的开发建设慢。堪称“世界公路建设史之最”（最慢）的南山路，很多很多很多年前就提上日程了，很多很多年前就听说在建了，很多年前就说有望完工了，结果现在还在建。2003年兰州红山根体育场拆除，随即要在崔家大滩启动建设兰州奥体中心，国务院都已经批复同意，结果到现在（11年后的2014年）还连根羽毛都没有建起来，唯一的成果，就只有地铁路线图上一个堂而皇之的站名奥体中心站赫然在目。就是这样的速度，怪不得会有兰州人在谈论到地铁的时候调侃地说：“我这辈子估计是坐不上了，就看我未来的儿子（或女儿，还不确定）能不能坐上了。”兰州的每一个工程，永远像是患了重度拖延症一样，拖了又拖，令人咬牙切齿，触目惊心。兰州铁路局的火车还偶尔早点，但兰州的建设好像还真没按期完过工。这神一般的“兰州速度”，让每个兰州人对其恨之入骨，一如其爱之弥深。也正是这样的速度，让兰州的衰落速度“一马当先”，真可谓“兰州速度”也。</p>
<p>有些网友辩解说，“兰州虽然GDP落后于人，但是科教、文体、医疗卫生方面还是无法轻易被赶超。”，没错，正所谓“百足大虫，死而不僵”，这些软实力确实无法轻易被超越。可是10年后、20年后呢？兰州大学近年来为什么会衰落？为什么在当年美国《科学》杂志中排名全国第六，而在最新武书连排名中滑落全国第27？还不是因为兰州！兰州经济发展的好，兰大会衰落吗？倘若回到史上“天下称，富庶者无如陇右”之时，兰州地区的科教文体等软实力会差么？现在的兰州，就像一个家道中衰的豪门子弟，面对着一群土豪暴发户，倘若不趁早发力发展，迟早有那么一天，土豪很轻易地变成了高富帅，而兰州，则成了永远扶不起的穷屌丝。</p>
<p>最近几年，兰州好像也逐渐在苏醒、发力。地铁、会展中心、元通大桥、深安大桥、金雁大桥、红楼、金茂、兰州中心、兰渝铁路、中川城际、宝兰客专、西客站、还有每个兰州人津津乐道的第五个国家级新区——兰州新区。兰州新区的获批，一度被视为均在兰州生活工作过多年的胡锦涛、温家宝卸任前送给兰州人民的一个礼物。可是我们能抓住机遇么？建设的显然还是显示出兰州的风格——“慢半拍”。结果，2014年1月，国家在西部连批两个国家级新区：陕西西咸新区和贵州贵安新区。这下傻眼了，这消息无异于当头棒喝，敲醒了沉浸在获批国家级新区的喜悦中的兰州人民，兰州新区西北唯一国家级新区的优势全无，竞争压力很大。说实话，如果我不是兰州人，要投资，我应该会选择西咸，同样是国家级新区，为什么不选择在相对富庶便利的关中平原而要选择在黄土高原呢？也许我目光短浅，这样看来，兰州的崛起依旧举步维艰。</p>
<p>1925年，国父孙中山逝世，在其临终留下的《总理遗教》中念念不忘“中国的国都，须建在兰州”，足以见得兰州战略地位的重要。新中国“一五”、“二五”期间布局大量工业于兰，也可见当时国家领导对于兰州战略地位的重视。但是，改革开放以后，随着计划经济的解体以及国家的全面对外开放，随着东部地区的迅速发展和西北地区的全面落后，兰州，还剩下什么？是不是只剩下一个“战略地位”的空壳？</p>
<p>兰州发展的上一个黄金时代已经远去，兰州近几十年来的衰败已是历史必然，兰州正处于他的低谷，兰州能否重返往日辉煌还尚未可知，但是兰州期待着触底反弹，兰州的发展已经刻不容缓。</p>
<p>从兰州出来的乐队低苦艾说：“我们每年都会回来，和你们在这个破败的城市里相聚。”但是，“我爱兰州。” </p>
<p>我几乎从每一个兰州人脸上读到他们对这座城市不离不弃、有血有肉的热爱。</p>
<p>“我在黄河边长大，我想有一天我也会在这里老去。”</p>
<p>兰州的崛起还有一线希望，因为我知道有太多太多和我一样一腔热血热爱兰州的人。</p>
<p>但是兰州的悲哀在于，热爱兰州的你，此时在做些什么呢？</p>
 <br>

<p>（19岁少年拙见，见识鄙陋，文中纰漏百出，且不含任何讽刺、抨击、批判之意，仅抒发个人思想与情绪耳，望以一己之力而助兰州，若有得罪，望诸位见谅，切勿断章取义。）</p>
]]></content>
  </entry>
  <entry>
    <title>记心路历程</title>
    <url>/blog/2020/03/21/%E8%AE%B0%E5%BF%83%E8%B7%AF%E5%8E%86%E7%A8%8B/</url>
    <content><![CDATA[<p>小时候梦想着长大写歌，后来也尝试写过小说，表达自我。</p>
<p>后来写了歌，做了MV，感觉自己不是从小学音乐，也天赋不足，这条路追不上别人的脚步。而且音乐这个形式用于表达稍微有点单薄。</p>
<p>后来就在想，我的天赋是逻辑与深入的思考，怎么和艺术作品结合呢？</p>
<p>首先我想到的是设计，然后做了Web前端开发，这是技术领域和艺术沾点边的部分。</p>
<p>入门以后发现，自己还需要更深入地学习技术。同时也发现，游戏确实是这个世纪新出现的一种更强大的新兴艺术形式。</p>
<p>我觉得用自己的擅长去实现自己的艺术想法是非常棒的一件事。</p>
<p>这就是我选择游戏这个方向的原因。</p>
<p>我在说我的心路历程。</p>
<p><a href="https://postimg.cc/v4YT2Hpx" target="_blank" rel="noopener"><img src="https://i.postimg.cc/x1HmCX55/20200321024316.png" alt="20200321024316.png"></a></p>
]]></content>
  </entry>
  <entry>
    <title>软件工程思考题</title>
    <url>/blog/2019/07/06/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E6%80%9D%E8%80%83%E9%A2%98/</url>
    <content><![CDATA[<p><strong>软件设计原则</strong></p>
<ol>
<li><p>论述一下“针对接口编程”的好处。</p>
<p>信息隐藏原则要求<strong>接口与实现分离</strong>，<strong>接口</strong>可以理解为一个类所提供的所有服务。<strong>实现</strong>就是类自身实现服务的方式。<strong>不必</strong>是因为没有必要知道内情就可以协作工作；<strong>不应</strong>是因为如果类的实现细节让客户知道，第一增加客户的负担，导致程序的可理解性降低；第二可能使客户的某些行为依赖于这些实现细节，导致若类内部实现发生变化，会迫使客户跟着变化。</p>
<p>信息隐藏非常重要的原因在于，它可以使各个子系统之间脱耦，从而允许它们独立地被开发、优化、使用、阅读及修改。</p>
<p>信息隐藏可以促进软件的复用，由于每个模块都不依赖于其他模块而存在，因此每个模块都可以独立地在其他的地方使用。</p>
</li>
<li><p>论述一下“优先使用对象组合”的好处。</p>
<p>若类B想获得类A的一些功能，不要首先想到让B去继承A，而是应当让B拥有A的一个对象。</p>
<p>这么做简明易用。B类对A类的其他方法与继承情况没兴趣，能使用所需的特定方法就成。</p>
<p>如果要继承，虽然也能使用特定方法，但不得不与整个继承体系紧紧地绑在一块了。</p>
</li>
<li><p>论述一下“抽象”与“软件的可重用性”的关系。</p>
<p>抽象化是一种使软件更具有一般性、灵活性、可理解性和可重用性的主要技术。</p>
<p>抽象化存在于多种不同的形式和层次中，是软件构思者与设计者的先行原则。</p>
<p>抽象化是任何重用技术的本质特征。但是，抽象化具有艰难的技巧性，并且是一个软件系统获得成功的主要障碍。</p>
</li>
</ol>
<h5 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h5><ol>
<li>对于某个模式，问“何种情形下会考虑使用此模式”？</li>
<li>给出某种情形，问“采用何种模式比较适合？为什么？”</li>
<li>精确画出某个模式的结构图。</li>
</ol>
<h5 id="软件体系结构"><a href="#软件体系结构" class="headerlink" title="软件体系结构"></a>软件体系结构</h5><ol>
<li><p>软件体系结构的作用</p>
<p>软件体系结构是软件设计过程的一个阶段，它关心的是如何将复杂的软件系统划分为<strong>主&#x2F;子系统</strong>、以及如何规范子系统的<strong>构成</strong>和<strong>性能</strong>。</p>
<p>一个外向目标：建立满足<strong>最终用户</strong>的系统需求；</p>
<p>一个内向目标：即那里满足<strong>后期设计者</strong>需要的、易于系统实现、维护和扩展的系统部件构成。</p>
<ul>
<li><p>提高认识和理解体系结构，可以使系统的高层次关系的到全面表达和深刻理解；</p>
</li>
<li><p>获得正确的体系结构常常是软件系统设计成功的关键；</p>
</li>
<li><p>体系结构对于复杂系统的高层次性能分析至关重要；</p>
</li>
<li><p>熟练掌握体系结构的概念和描述，可以使软件设计者之间、设计者和用户之间快速方便地交流知识、经验；</p>
</li>
<li><p>在体系结构的全局思想指导下的系统维护、扩充和升级，不会因为修改和扩充而破坏整体的完整和一致性。</p>
</li>
</ul>
</li>
<li><p>MVC模式</p>
<p><strong>模型：</strong>模型用于管理应用程序域的行为和数据，并响应为获取其状态信息（通常来自视图）而发出的请求，还会响应更改状态的指令（通常来自控制器）。包含了应用问题核心数据、逻辑关系和计算功能。控制器依据输入&#x2F;输出的需要调用这些操作，模型还为视图获取显示数据而提供了访问其数据的操作。</p>
<p><strong>视图：</strong>视图用于管理信息的显示。以不同的表达形式显示模型的数据和状态。每个视图有一个更新操作，它们可以被变化-传播机制所激活。当视图的更新操作被调用时，它还会反过来获得来自模型的数据。</p>
<p><strong>控制器：</strong>控制器用于解释用户的鼠标和键盘输入，以通知模型和或视图进行相应的更改。以事件触发的方式接收用户输入。控制器如何获得事件依赖于界面的运行平台。控制器通过事件处理过程对事件进行处理，并为每个输入事件提供了相应的操作服务，把事件转化成对模型或视图的激发操作。</p>
<p>用户输入导致模型变化，并触发变更-传递机制的过程：</p>
<ol>
<li>控制器在事件处理中接受用户输入事件，解释事件，并激活模型的相应服务方法；</li>
<li>模型执行所请求的服务，导致其内部数据和状态的变化；</li>
<li>模型找到在其中注册了的视图和控制器，并调用它们的update()方法，对它们进行通知；</li>
<li>每个注册了视图从模型中读取已经改变的数据，并更新其在视图中的显示；</li>
<li>每个注册的控制器从模型中读取已经改变的数据，根据设定关系允许或者禁止某些功能。</li>
</ol>
</li>
<li><p>C&#x2F;S结构</p>
</li>
</ol>
<h5 id="应用框架"><a href="#应用框架" class="headerlink" title="应用框架"></a>应用框架</h5><ol>
<li><p>论述与其它软件复用技术的异同。</p>
<ul>
<li><p>与类库的对比</p>
<p>相同点：都是可复用一组的类。</p>
<p>不同点：</p>
<ul>
<li><p>类库中的一组类往往提供了一些软件的通用功能；而框架的这组类往往是针对某一个特定的应用领域。</p>
</li>
<li><p>类库中的那些类之间往往关系松散，很少存在相互协作的关系；而框架中的一组类一定是代表了一个整体结构，它们之间的协作非常紧密。</p>
</li>
<li><p>使用者使用类库时往往自己来定义程序的控制结构，自己去主动调用类库中的类方法；而框架使用者写的代码只能被框架调用。</p>
</li>
<li><p>如果说类库像一堆零散砖头，而框架则就接近建筑的半成品了。</p>
</li>
</ul>
</li>
<li><p>与设计模式对比</p>
<p>相同点：都是软件复用的形式。</p>
<p>不同点：</p>
<ul>
<li><p>设计模式是比框架更小的体系结构元素，一个框架包括了多个设计模式，而反之绝非如此。</p>
</li>
<li><p>设计模式比框架更抽象：框架能够用代码表示，能被直接执行和复用；而设计模式在每一次被复用时，都需要被实现，才能表示为代码。</p>
</li>
<li><p>框架比设计模式更加特例化：框架总是针对一个特定的应用领域；而设计模式几乎能被应用于任何领域。</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>论述一下“框架”与“模版方法模式”、“钩子方法”、“凝点”、“热点”等概念之间的联系。</p>
<p>从框架的复用机制来看，框架有三种类型：白盒、黑盒和灰盒三种，其中白盒和黑盒是两个极端，灰盒介于白盒、黑盒之间。</p>
<p>白盒框架包含一些抽象类（未完成的类），这些类中包含若干空方法，称之为<strong>钩子方法</strong>（Hook Methods）。框架应用者必须继承（Inheritance）这些未完成的类，并在子类中复写钩子方法，提供特定于具体需求的有意义的实现。所以白盒框架的<strong>热点</strong>机制是继承和钩子方法。</p>
<p>我们把某领域的程序族中反复出现的<strong>不变部分</strong>识别并“固化”到框架中，术语叫框架的“<strong>凝点</strong>”（Freeze Spots）。</p>
<p>另一种重要任务是要把程序族中<strong>可变部分</strong>识别出来，在框架中给它们留下一些“空位”（Placeholder），术语称之为框架的“<strong>热点</strong>”（Hot Spots）。这些空位是留给应用程序员填写的，以支持特殊应用的特殊需求。</p>
<p>凝点是框架提供了软件复用的根源，热点使软件复用成为可能。</p>
</li>
</ol>
<h5 id="软件重构"><a href="#软件重构" class="headerlink" title="软件重构"></a>软件重构</h5><ol>
<li><p>论述“软件重构”是如何与“软件设计”相互补充来解决过度设计问题的？</p>
<p>设计阶段，人们总是预先仔细设计，力求得到一个灵活的解决方案，希望它能够承受所能预见的所有需求变化。</p>
<p>过度设计问题：灵活的解决方案比简单的解决方案要复杂得多，所需的成本很高，最终得到的软件通常也会更难以维护。如果在所有可能出现变化的地点都建立起灵活性，整个系统的复杂度和维护难度将很难估计。但是，你无法预测到底哪些灵活性派不上用场，为了获得自己想要的灵活性，你不得不加入比实际需要更多的灵活性。</p>
<p>有了重构，你就可以通过一条不同的途径来应付变化带来的风险。你仍旧需要思考潜在的需求变化，仍旧需要考虑灵活的解决方案。但是你不必再逐一实现这些解决方案，而是应该问问自己：“把一个简单的解决方案重构成这个灵活的方案有多大难度？”如果答案是“相当容易”，那么你就实现目前的简单方案就行了。</p>
<p>使用重构，你仍然坐预先设计，但是不必一定找到完美的解决方案，只需要得到一个足够合理的解决方案就够了。</p>
</li>
<li><p>论述重构技术的意义和作用。</p>
<p>重构的意义：</p>
<ul>
<li>重构改进设计</li>
<li>重构使软件更容易理解</li>
<li>重构有助于找到bugs</li>
<li>重构有助于提高编程速度</li>
</ul>
<p>需要重构的程序结构：</p>
<ul>
<li>重复的代码</li>
<li>过长函数</li>
<li>过大的类</li>
<li>过长的参数列表</li>
<li>发散式变化</li>
<li>依恋情结</li>
<li>switch语句</li>
</ul>
</li>
</ol>
<h5 id="面向组件的软件开发"><a href="#面向组件的软件开发" class="headerlink" title="面向组件的软件开发"></a>面向组件的软件开发</h5><ol>
<li><p>描述一下“面向对象技术”的缺陷。</p>
<p>整体性的(Monolithic)：而不是有明显的组件构成。</p>
<p>封闭性的(Closed)：而不能再扩展。</p>
<p>私有性的(Proprietary)：而不能在用于第三方。</p>
<ul>
<li><strong>接口与实现的分离还不够彻底</strong>：类与子类的概念承担了太多的责任，用“类”来标示组件的接口，必然牵扯进很多实现方面的东西，使得“接口”与“实现”分割得不太彻底。</li>
<li><strong>重代码复用，轻复合机制</strong>：在对象技术应用的早期，复用功能的技术主要使用“继承”机制，而缺乏将现有对象“复合”在一起以完成新功能的认识。</li>
<li><strong>对象并不是天生为复用而设计的</strong>：被自然设计出来对象一般是私有性质的，不能被用在其它项目中。其根源在于：对象的接口机制只能保证其信息的单向对外隐藏，使得其客户不知实现细节；但是对象的实现却对其外部环境做了很多假设，即对象的外部环境对对象的实现没有进行信息隐藏，这导致此对象不能适应其它的运行环境。</li>
</ul>
</li>
<li><p>软件组件都有哪些特性？</p>
<p><strong>更严格的接口与实现分离</strong>：</p>
<ul>
<li>没有任何暴露在外的实现细节。</li>
<li>只要保持组件的接口不变，组件的内部实现可以自由替换，而客户不受影响。</li>
<li>有些组件甚至更进一步，具有“pluggable”实现，即组件实际工作的代码可以在软件运行时动态确定，主要技术手段是通过组件的配置设置。</li>
</ul>
<p><strong>明确的环境依赖、反向控制</strong>：</p>
<ul>
<li>组件不能对它使用的外在的运行环境做出过多的假设。一个反例是，组件需要某种服务，但它以实现类型保存着实现此种服务的对象。如果组件的运行必须得到外界环境的服务，这种对环境的依赖性必须明确化。</li>
<li>为了避免对环境的依赖，有些组件被设计成不直接与环境打交道，而是通过“反向控制模式”，即：组件的容器(Container)负责打理组件运行所需的一切，组件处于被动状态：被请求时才运作。这也叫“好莱坞原则”。</li>
</ul>
<p><strong>内省、可视化编辑</strong>：</p>
<p>组件一般会提供一种机制，可以让外界在一定范围内配置其功能。而对象则绝没有这种能力。通常这种机制是通过可视化图形配置工具来提供的。</p>
</li>
<li><p>组件是如何做到对外信息隐藏的？</p>
<ul>
<li>更严格的接口与实现分离</li>
<li>明确的环境依赖、反向控制</li>
</ul>
</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>记老游戏</title>
    <url>/blog/2015/10/25/%E8%AE%B0%E8%80%81%E6%B8%B8%E6%88%8F/</url>
    <content><![CDATA[<p>开一篇帖子记录之前玩过的游戏。</p>
<p>主要收录原则：</p>
<ol>
<li>我认可并会向人推荐的游戏；</li>
<li>我已通关或了解游戏全貌；</li>
<li>该游戏在当时给我以深刻感动或该游戏相关回忆令人难忘。</li>
</ol>
<p>希望将满足以上三条的游戏完整回忆并记录。</p>
<br>

<h5 id="赤色要塞"><a href="#赤色要塞" class="headerlink" title="赤色要塞"></a>赤色要塞</h5><ul>
<li>英文名：Jackal</li>
<li>发行商：KONAMI</li>
<li>发行时间：1988</li>
<li>运行平台：FC</li>
<li>游戏类型：ACT</li>
</ul>
<p><img src="http://a3.qpic.cn/psb?/dab198f8-463e-4f73-82ef-fd284ba9efd6/tBSDuc08vl3OTnavWdSHB7TI.6l.xsS8ewWV.Z0yBNY!/b/dGIBAAAAAAAA&ek=1&kp=1&pt=0&bo=8wDcAAAAAAABAAg!&t=5&tl=3&su=0243552641&tm=1552114800&sce=0-12-12&rf=2-9" alt="img"></p>
<p>这个游戏其实严格来说我并没有通关，而是我爸妈通关。之所以收录，其实是因为那时（大约2000年左右）每天晚上坐在父母中间，看他们欢乐地打游戏，我一个人就在那一直傻乎乎地看，跟着他们一起精神紧绷。还记得他们那段时间好像每晚都要打游戏，而且挑选了好几个游戏准备通关，而这一个貌似是打得时间最长的，所以我印象也就最深。游戏难度不低，我最终是后来在模拟器上无敌模式下才通关的（也就是说，我游戏还没我爸妈打得好），主要原因是最终关（如果我没记错的话是第六关）“蚊子”式直升机太神出鬼没而且子弹快而准确，最终BOSS巨型坦克也是比较难打，总之，我记得我爸妈刷了无数遍游戏都在第六关死掉。</p>
<p>一家三口在一起精神紧绷打游戏的时光，估计是再很难有了，转眼间再过些年也就到了当初父母的年纪，想一想父母当年也是和我们一样生龙活虎的年轻人啊。</p>
<p><strong>综合评分：7.4（品质一般）</strong></p>
<p>评分理由：FC时代的经典之作，和魂斗罗、绿色兵团、沙罗曼蛇并誉为“四强”，可双人游戏，解救人质送往机场的有趣设定，发光人质升级弹药，在当时来说是一部短小精悍的游戏作品。总体的游戏性必然不如后来的游戏，但是已经是很多人心目中童年不可复制的经典。</p>
<br>

<h5 id="玩具兵大战：即时战略版"><a href="#玩具兵大战：即时战略版" class="headerlink" title="玩具兵大战：即时战略版"></a>玩具兵大战：即时战略版</h5><ul>
<li>英文名：Army Men RTS</li>
<li>发行商：3DO</li>
<li>发行时间：2002</li>
<li>运行平台：PC</li>
<li>游戏类型：RTS</li>
</ul>
<p><img src="http://a4.qpic.cn/psb?/dab198f8-463e-4f73-82ef-fd284ba9efd6/6K.pcdf7vAF6Y3pkC9AYRNJSf1hbKgn5dHNbaNWktaw!/b/dJMAAAAAAAAA&ek=1&kp=1&pt=0&bo=WALEAQAAAAAFALw!&t=5&tl=3&su=0105304657&tm=1552114800&sce=0-12-12&rf=2-9" alt="img"></p>
<p>第一部令我沉迷的PC游戏，当然印象比较深刻，以至于后来都比较喜欢即时战略类游戏。第一次接触到这个游戏是在我爸同学他家，从此以后便夜不能寐（说的有点夸张），由于当时家里还没有买电脑，所以天天期待着被我爸带去他同学家玩（其实去了也是看着我爸玩， 然后我爸玩累了再让我玩一会儿，嗯我爸也是为了蹭电脑玩而去的），其实没玩几次这游戏就被同学家哥哥卸载了。还有一件印象比较深刻的是，我第一次进网吧的时候（被我姐带进去的），居然玩的就是这个游戏（你们想象一下一个三年级小孩在网吧打单机游戏的画面），然后赖在里面迟迟不想回家，当然最后还是被我姑给拽回去了（这事我爸妈至今估计也不知道），我才玩了两个小时啊。由于我每次都只能玩一两个小时，所以我玩了无数遍1-3关（网吧无法存档），偶然能玩一下第5关，然后还日思夜想去我姐家玩，其实就是想让她带我去网吧。直到有一天，我家买了电脑，我立即安了这个游戏，本以为终于能快速通关了，结果当时是上小学每周末我才回一次家，每次回家也就能玩几个小时（父母在家，玩多了你懂的），于是就演变成了我天天盼周末的节奏。记得有一次周末要停几天电，结果我拉了两天的脸，我妈问我你咋了，我说我玩不了游戏了，我妈的反应居然是安慰我（后来细思极恐啊），当然这种事后来再没发生过，后来都是我妈催我关电脑甚至扬言要打我的节奏。</p>
<p><strong>综合评分：8.2（值得一玩）</strong></p>
<p>评分理由：非常有意思的即时战略类游戏，主线任务共15关，是一个带领一堆阳光健康的绿色的塑料兵人打下一个由邪恶的黄色兵人控制的房子的故事，从花园打到地下室，再从厨房打到卧室。游戏中的资源就是塑料和电力，用这些东西造兵、造基地、造直升机、造坦克之类的，类似红警2，有兵种克制，个人认为游戏性与画面质感均不输于红警2，还有一关是掩护乐高玩具（平民）撤退的非常有趣，就是联机游戏性欠佳。</p>
<br>

<h5 id="模拟人生2"><a href="#模拟人生2" class="headerlink" title="模拟人生2"></a>模拟人生2</h5><ul>
<li>英文名：The Sims 2</li>
<li>发行商：EA</li>
<li>发行时间：2004</li>
<li>运行平台：PC</li>
<li>游戏类型：SIM</li>
</ul>
<p><img src="http://a2.qpic.cn/psb?/dab198f8-463e-4f73-82ef-fd284ba9efd6/.Y62dXIDRC8Sto5LRopGbdAk4iC1XPq1MtVX.s5J6GQ!/b/dGUBAAAAAAAA&ek=1&kp=1&pt=0&bo=VQOAAgAEAAMFAPA!&t=5&tl=3&su=0110146401&tm=1552114800&sce=0-12-12&rf=2-9" alt="img"></p>
<p>没错，下面是第二部让我沉迷的PC端游戏，居然是模拟人生系列，同样是从另外一个我爸同学家的哥哥那你学到的。这个游戏在后来看觉得特别无聊，不过也毕竟是曾经沉迷过的游戏（其实我觉得是因为这游戏太费时间了），就收录进来说一下。当初我玩这个游戏的时候我是直接自定义了一个家庭，就是一个一家三口，把其中的爸爸设置成了我爸的名字，妈妈设置成了我妈的名字，而小孩，也设成了我的名字（想想也是逗比），然后因为这个事还被我爸骂了一顿说我泄露个人信息。 更那啥的是，我还给那个男的找了份和我爸一样的工作，我也是够了。玩这个游戏印象最深的片段同时也是这个游戏中我最有成就的地方，就是游戏中的这个小孩被我逼着学习成绩A+，最后收获了很多东西，还有什么摇钱树什么的，那个摇钱树居然真能收钱。而这个小孩是怎么得到A+的呢？因为我天天逼着他写作业，只要每天把作业逼着写完，按时去学校，过好几天就A+了。然而我发现逼他写作业特别困难，动不动写着写着就要撒尿，要不然就是要玩游戏，有时候还必须得他妈妈来辅导才能写，更可气的是有时候睡眠值过低写着写着直接就在地板上睡着了，叫都叫不醒，只能等他睡会再抓起来摁着写。我当时就想，这特么写个作业怎么这么困难，要死要活的，我怎么就没这么困难（我当时刚上初中）。结果上高中以后，我才发现，我就是模拟人生中那小孩的翻版（写着写着就地板上睡着了那种），原来模拟人生做的如此真实，顿时这个游戏在我心目中的形象就高大了起来（逗）。</p>
<p><strong>综合评分：7.6（可以尝试）</strong></p>
<p>评分理由：模拟人生系列游戏作为模拟游戏的重要一作，其地位还是值得肯定的，游戏中的元素也很丰富，也有很多官方发行的资料包，如果喜欢此类的同学大可好好得创造一个自己的角色好好地玩一下。但是我觉得这个游戏太费时间，同时其中的游戏人物一天中的大部分时间都会浪费在做饭、洗澡、撒尿、睡觉、工作（现在看好像还挺真实的）上面，玩起来实在是个漫长的过程，主要我对模拟类游戏的兴趣，经此一役，已经玩腻了。</p>
<br>

<h5 id="欢乐奇兵"><a href="#欢乐奇兵" class="headerlink" title="欢乐奇兵"></a>欢乐奇兵</h5><ul>
<li>英文名：Happy Tank</li>
<li>发行商：智冠科技</li>
<li>发行时间：2003</li>
<li>运行平台：PC</li>
<li>游戏类型：STG</li>
</ul>
<p><img src="http://a3.qpic.cn/psb?/dab198f8-463e-4f73-82ef-fd284ba9efd6/PAvOLUzNhL5NNT1GN.6t*tQtpN9mieG*NnCbmv*jDBE!/b/dJIAAAAAAAAA&ek=1&kp=1&pt=0&bo=9AF3AQAAAAABAKQ!&t=5&tl=3&su=0209919745&tm=1552114800&sce=0-12-12&rf=2-9" alt="img"></p>
<p>这个游戏也是我最开始接触的PC端游戏之一，同样是在再另外一个我爸同学家的哥哥（你爸同学家的哥哥有多少个？）那里第一次玩到的。游戏内容说白了就是类似坦克大战的形式，同样也有各种道具可以吃，比如导弹、穿甲弹、快弹、双弹、无敌、隐身等等，而且还有更有意思的炮弹种类比如超声波、榴弹。初始情况下有三辆坦克可以选，分别是毛头机甲、淑女机甲、老爷机甲，各有各的特点，到后来还可以解锁另外两辆坦克：猛男和铁嘴。其实推荐这个游戏的最关键原因是，这是我最推荐的一款PC端双人游戏，是两个人在一台电脑上玩的那种，左右分屏，男女老少咸宜。第一次通关是曾经跟一起长大的发小在他家玩，真的是很美好的回忆。总之，这游戏必须双人玩，堪称好基友并肩作战必备游戏之一。</p>
<p><strong>综合评分：8.0（值得一玩）</strong></p>
<p>评分理由：好基友并肩作战必备游戏之一，很有趣，可以视作儿时坦克大战的延伸。一共24关， 难度较低，游戏元素简单，居家必备。</p>
<br>

<h5 id="使命召唤5：战争世界"><a href="#使命召唤5：战争世界" class="headerlink" title="使命召唤5：战争世界"></a>使命召唤5：战争世界</h5><ul>
<li>英文名：Call of Duty : World at War</li>
<li>发行商：Activision</li>
<li>发行时间：2008</li>
<li>运行平台：PC</li>
<li>游戏类型：FPS</li>
</ul>
<p><img src="http://a2.qpic.cn/psb?/dab198f8-463e-4f73-82ef-fd284ba9efd6/n38qi5rLiiHcEkuLnNq6QtvhZJRXi3nH5BIXJ5opi.E!/b/dF0BAAAAAAAA&ek=1&kp=1&pt=0&bo=AASAAqAFhAMFAIc!&t=5&tl=3&su=084544977&tm=1552114800&sce=0-12-12&rf=2-9" alt="img"></p>
<p>时光辗转来到了2011年，在一个略微昏暗的冬天，有一种快过年的气氛，我此刻和张钰祥同学窝在丁一网吧的一个相对独立的小角落里（如果没记错的话应该是001-012号机），打开了Call of Duty的联机模式，开始了两个人协作的战斗。游戏的剧情比较跳跃，时而是扮演美国大兵在南太平洋杀鬼子，时而是扮演苏联小哥打德国，总之是以二战为主题的一作。这是我第一次玩使命召唤系列的游戏，其实也是第一次较长时间玩第一人称射击游戏，感觉很不错，以至于通关后还想找续作来玩。由于我有比较严重的3D眩晕症，所以连续玩FPS类游戏1小时左右就会有点想吐（现在玩《我的世界》都想吐），然而使命召唤5是唯一一部让我没什么难受感觉的游戏，或许是有队友并肩作战的缘故吧。关于这个游戏的记忆，有苏联战场上的波波沙冲锋枪，还有太平洋战场上的百式冲锋枪（捡日本人的，把子在侧面，扫起来感觉很爽的样子），印象最深刻的一幕是，你会扮演那个最终在德国国会大厦插上苏联红旗的士兵，然而在插旗的那个台阶下面还藏着最后一名德国士兵，你走过去他会突然跳起来想捅死你（吓死你），但是你的队友会帮你把他解决了。</p>
<p><strong>综合评分：8.2（值得一玩）</strong></p>
<p>评分理由：好基友并肩作战必备游戏之二，第一人称射击游戏玩家心目中的佳作，同时在此作品中可以大略感受到二战中恐怖残酷的性质。然而本人对FPS类游戏兴趣不大，这基本是我完整玩下来的唯一一部FPS。</p>
<br>

<h5 id="命令与征服：红色警戒3"><a href="#命令与征服：红色警戒3" class="headerlink" title="命令与征服：红色警戒3"></a>命令与征服：红色警戒3</h5><ul>
<li>英文名：Command &amp; Conquer: Red Alert 3</li>
<li>发行商：EA</li>
<li>发行时间：2008</li>
<li>运行平台：PC</li>
<li>游戏类型：RTS</li>
</ul>
<p>（图片暂空）</p>
<p>关于这个游戏，我只想先用一句大家听了可能会觉得特装逼的话来表达。于我而言，这个游戏已经不是一款游戏，是青春。能说的事情太多，先占坑，等大家的评论，看完大家的评论我再来填。</p>
<p><strong>综合评分：9.8（关乎信仰）</strong></p>
<p>评分理由：</p>
<br>

<h5 id="双星物语"><a href="#双星物语" class="headerlink" title="双星物语"></a>双星物语</h5><ul>
<li>英文名：ZWEI!!</li>
<li>发行商：FALCOM</li>
<li>发行时间：2001</li>
<li>运行平台：PC</li>
<li>游戏类型：ARPG</li>
</ul>
<p><img src="http://a2.qpic.cn/psb?/V10Olrhs0pLC9e/sbWIJczMAoar6e8rfcipn.9KyrLvjv*bn.VNgZ9Rdnc!/b/dFMGBmBvJAAA&ek=1&kp=1&pt=0&bo=gALgAQAEAAMBCkk!&t=5&tl=3&su=0234323809&tm=1552114800&sce=0-12-12&rf=2-9" alt="img"></p>
<p>FALCOM出品的经典ARPG游戏，已于2009年出品续作加强版《双星物语 2+》，但我还是觉得一代比较耐玩（可能由于本人3D眩晕的缘故）。作品主要讲述的是一个浮游大陆上古老而宁静的村庄——布克村神庙中各元素神像神秘失窃，由游戏主人公皮皮洛和布库尔姐弟俩前往各种属性的迷宫探险打怪找回，并最终打败大魔王的故事。其中姐姐皮皮洛使用魔法攻击，弟弟布库尔使用刺剑攻击，二者可以随时切换，迷宫中也可以拿到风、地、水、火、光、暗属性的六块宝玉以及各种奥义，从而使出各种不同属性的魔法。同时，还可以领养一只宠物（我选的猫）参战，在足够多的Combo之后会积累单人特技、双人合体技、三人（只）合体技，在关键的时刻可以使用。游戏主角通过吃食物来升级，多个低级食物可以在村子旅馆里换成大餐以补充更多经验值。游戏还有以宠物为主角的外置小游戏，在小游戏中获取的宠物道具会自动放在主游戏里。这个游戏还有很多可以收集的东西，有收集癖的同学也能玩很嗨。总之，对这个游戏的印象就是游戏元素丰富，画风优良，偶尔需要智商，嗯，BGM也不错，是一款不可错过的佳作。</p>
<p><strong>综合评分：9.2（高分神作）</strong></p>
<p>评分理由：游戏元素丰富，画风优良，非常有意思，每个迷宫都会有评分，整个游戏通关之后还可以再玩二周目，完美主义者能玩很久，绝对是一款精致的ARPG佳作。需要注意的是，游戏中彩蛋众多，如果不看攻略，可能会遗漏掉某些隐藏物品。</p>
<br>

<h5 id="恋爱物语2"><a href="#恋爱物语2" class="headerlink" title="恋爱物语2"></a>恋爱物语2</h5><ul>
<li>英文名：Eberouge 2</li>
<li>发行商：Fujitsu</li>
<li>发行时间：1998</li>
<li>运行平台：PC</li>
<li>游戏类型：GalGame</li>
</ul>
<p><img src="http://a2.qpic.cn/psu?/ab6390a9-102a-41db-9d88-fc914ecd4447/qcewGibpu4CyXANdo.YfzbgHX.vN9O3XTaRqaRESslQ!/b/YekYn3zihwAAYgYqonxwiAAA&ek=1&kp=1&pt=0&bo=ngL2AQAAAAABBEg!&t=5&tl=3&su=1194293601&tm=1552114800&sce=0-12-12&rf=2-9" alt="img"></p>
<p>作为我第一次玩通的GalGame，《恋爱物语2》在当初也确实给了我一种莫名的幸福感动，以至于玩完之后的感想就是，“好想找个女朋友啊”，现在还能回想起当时成功和攻略女生牵手时呆萌的心情。记的最清楚的可能是玛鲁（我攻略的女生是玛鲁）在和我一起出去到海边玩的时候说的“这样想想好像是有些罗曼蒂克哦”，当时我脸就红了（这句话有什么可脸红的吗？），你可以尽情想象一下半夜对着个屏幕脸红的情景。当时应该是2011年上半年，我记得玩过不久就和我前前女友在一起了，然后我居然给她说了这个游戏，于是乎她就跑去玩了而且还问我喜欢里面的哪个女生，我说“玛鲁啊”，然后她好像不怎么喜欢玛鲁的样子。这个游戏总体有一定的可玩性，就是大家熟悉的要修各种课程使自己变得更优秀，然后去找你喜欢的女生玩并触发相关剧情之类的。但是最后获得HAPPY END的条件很坑爹，为了避免气候变暖使瓦尔大陆被毁灭（什么鬼），你必须和全部5个女生都搞好关系（就是所谓的暖男，你懂的）并且和她们一起创造出友情的结晶——5个“光球”，否则就会因为最后瓦尔大陆毁灭而获得BAD END。我第一次玩的时候完全不知道这设定，然后就和玛鲁一个人关系特别好，于是到最后就世界毁灭了。在我看来，要么感情专一导致世界毁灭，要么狠心做中央空调保卫世界平安，二者不可兼得，于是这游戏太难了。</p>
<p><strong>综合评分：8.2（值得一玩）</strong></p>
<p>评分理由：第一次玩的时候有些感动，又带一点憧憬。但是由于游戏发行年代较老，画风现在看来简直不忍直视，而且好像没有BGM（可能是被我关了），游戏HAPPY END的条件太烦人。给出这个分数，还是出于对于当时心情的纪念吧。</p>
<br>

<h5 id="雪之少女"><a href="#雪之少女" class="headerlink" title="雪之少女"></a>雪之少女</h5><ul>
<li>英文名：Kanon</li>
<li>发行商：Key</li>
<li>发行时间：1999</li>
<li>运行平台：PC</li>
<li>游戏类型：GalGame</li>
</ul>
<p><img src="http://a4.qpic.cn/psb?/dab198f8-463e-4f73-82ef-fd284ba9efd6/tjExe*TWfpDxMapdYp.qr2KUYr.g8pLTY2lZphxzNw0!/b/dIMAAAAAAAAA&ek=1&kp=1&pt=0&bo=PgLCAQAAAAABANg!&t=5&tl=3&su=0102474593&tm=1552114800&sce=0-12-12&rf=2-9" alt="img"></p>
<p>著名的Key社三部曲（Kanon、AIR、CLANNAD）中的首部作品，我也是玩了以后才知道，据说会很催泪什么的，而我玩完并没有什么太强烈的感觉（我的情绪表现向来不激烈）。那时是2013年1月，我妈正做手术住院，也是我每天在思考一些有关意义的问题很迷茫的一段时间，就在那段时间里，我玩完了Kanon，那些平凡普通而又有一些离奇的故事，但是共通的特点就是，它们都是些温暖的故事。巧的是，这部作品正好是三部曲中以冬为主色调的一部（所谓冬之Kanon），而我当时也正好是冬天，如果我没记错的话，那年冬天下了很多的雪，正是因为这部作品，所以那年冬天在我的记忆里是这么多年最独特的感觉。其实对于这部游戏最深的记忆在于它的BGM，没错，我玩完之后找到原声带听了一整个2013年的冬天，经常是单曲循环或者专辑内随机播放。那段时间正好是我很多观念发生转变的时间，坐在43上，看着车轮压过白色的雪，听着原声带，想到游戏中早上总是睡不醒的表妹水濑名雪，莫名地有一种温暖的力量，生活在每一个当下，人生不过如此吧。虽然Key社的游戏作品中总有些离奇的幻想和太多的不合逻辑之处，但是这并不妨碍它作为一个美好的幻想而存在，人人都很温柔的冬季漫长的北方小镇，也许正是Kanon这部作品想要给我们带来的温柔乡吧，一个在日常充满残酷理性的生活背后温暖自己给自己充电的温柔乡。</p>
<p>名雪平时回答我的时候的那句“嗯”总是明亮而充满肯定，就因为这个，我之后半年对别人的回应都变得积极起来，我想这就是这个游戏对我最明显的改变吧。</p>
<p><strong>综合评分：8.6（强烈推荐）</strong></p>
<p>评分理由：Key社处女作，为我们描绘出一个冬季漫长的北方小镇以及其中发生的充满幻想的温暖故事，1999年首发，实为GalGame经典一作。其实我觉得这部游戏中我最欣赏的亮点还是BGM，BGM的风格很到位，能让人整个冬天都沉浸在游戏所塑造氛围之中，建议在冬天玩。当然剧情有些地方由于大胆的幻想而显得不合逻辑，这也是很多游戏与动漫作品的通病。总之，感谢Key社的创作，感谢Key社的神之BGM，给我带来了一个记忆中不一样的冬天。另外，该作于2002年被东映动画改编为电视动画（不推荐），2006年被京都动画重新改编为电视动画，当然还是推荐游戏原作。</p>
<br>

<h5 id="火焰之纹章：圣魔之光石"><a href="#火焰之纹章：圣魔之光石" class="headerlink" title="火焰之纹章：圣魔之光石"></a>火焰之纹章：圣魔之光石</h5><ul>
<li>英文名：Fire Emblem: The Sacred Stones</li>
<li>发行商：Nintendo</li>
<li>发行时间：2004</li>
<li>运行平台：GBA</li>
<li>游戏类型：SRPG</li>
</ul>
<p><img src="http://a2.qpic.cn/psb?/dab198f8-463e-4f73-82ef-fd284ba9efd6/hGBRozry*h31qTLmL92r1ryoOba15bz9JU4LVZWgImw!/b/dF0BAAAAAAAA&ek=1&kp=1&pt=0&bo=*gSAAlYFrAIDAKA!&tl=1&su=0238841825&tm=1552114800&sce=0-12-12&rf=2-9" alt="img"></p>
<p>SRPG中最受推崇的经典，当属任天堂旗下的火焰纹章系列，而圣魔之光石则是其在GBA平台上三部曲中的最后一作。坦白来说，这种类型的游戏，是我的菜。我是在2011年暑假玩这个游戏的，到现在你还可以看到我相册里一堆我打出来的人物属性截图，当然我硬盘里还备份着我的游戏存档。作为一个战略战棋类游戏爱好者，无论你让我怎么评价这个游戏，我都会告诉你“太棒了”。游戏中有多种职业以及转职后的高级职业，其中我最喜欢的当属“贤者”——理属性魔法的精通者，理属性魔法在三种魔法中具有中等威力&#x2F;较高命中&#x2F;最高必杀率的特性，而且名字都很好听（暴露了我喜欢的真实理由），比如雷暴&#x2F;终末之冬，以及最后的双圣器之『风刃』艾克斯迦利瓦，怎么听怎么炫酷，况且还那么好用（我培养了塞勒夫和露忒两个高属性贤者）。还有更关键的一点是，战斗动画中他们使出必杀的时候，在胸前划出一个六芒星，随即眼前一道硕大的闪电劈下来（使用雷暴），对面的怪基本上就被瞬秒了，简直是帅，以至于后来我在现实生活中都会想象着在胸前划一个六芒星然后一道闪电劈死对面是怎样的一种景象。类似的我很喜欢的职业还有“剑圣”和“勇者”，因为他们的必杀都非常的帅。这个游戏可玩性非常强，剧情也是跌宕起伏，隐藏的彩蛋丰富，随机性也非常高，但这么多优秀的特性，还不足以概括这个游戏的精华，因为它还有一个精妙的设计，里面的人物一旦死亡，就是真正意义上的死亡，后面的游戏中就再也都无法使用。你能想象一下你辛辛苦苦培养到20级的人才因为你的一步疏漏而被对方秒了后你的心情吗？所以你必须精打细算，步步为营，必须像一个思路深邃精密的象棋手，考虑好每一步所可能带来的后果，因为，在你悉心培养的将士面前，你根本没有悔棋的机会。《刀剑神域》这部动画为什么好看，很大程度上是由于游戏中角色死亡会导致现实中自己的死亡，对死亡的恐惧所带来的真实感使人惊心动魄全情贯注，而火焰纹章系列也是很好的利用了这一点，对于将士死亡的敬畏，使玩家获得了更好的游戏体验，再加上各方面的优秀设计，成就了其一代游戏经典的地位。最后说一下BGM，那熟悉的主旋律我到现在还会哼，以8位机音质，做出这么好听的作品，不可不谓之曰“神”，正如游戏本身以极低的像素，但还是刻画出一个个生动而富有个性的人物形象，做出了各方面都很完美的作品。一直以来因为原声带不是很好找，所以没有弄到手机上，直到今天在网易云音乐上找到了火焰纹章系列的主题曲，打开一听，有种热泪盈眶的冲动，就像见到一个好久不见的老朋友，毕竟也是曾令我感动过的游戏啊。</p>
<p><strong>综合评分：9.4（高分神作）</strong></p>
<p>评分理由：GBA平台上的良心大作，BGM、剧情、人物刻画、游戏性等各方面均表现得非常出色，虽然画质在现在看来很是复古，但绝对是一部值得收藏的经典，高分力荐。</p>
<br>

<p><em>正文部分完</em></p>
<p><em>附录部分将收录不全满足但部分满足收录原则的游戏进行评分并陈述评分理由。</em></p>
<hr>
<p><strong>附录：</strong></p>
<br>

<h5 id="真三国无双5"><a href="#真三国无双5" class="headerlink" title="真三国无双5"></a>真三国无双5</h5><ul>
<li>英文名：Shin Sangokumusou 5</li>
<li>发行商：KOEI</li>
<li>发行时间：2007</li>
<li>运行平台：PC</li>
<li>游戏类型：ACT</li>
</ul>
<p><strong>综合评分：7.9（可以尝试）</strong></p>
<p>评分理由：玩起来很爽，还可以和基友一起双人游戏，感觉非常棒，而且还可以顺便了解一下三国历史知识，就是游戏模式沿袭各种无双，比较单调。</p>
 <br>

<h5 id="极品飞车14"><a href="#极品飞车14" class="headerlink" title="极品飞车14"></a>极品飞车14</h5><ul>
<li>英文名：Need for Speed：Hot Pursuit</li>
<li>发行商：EA</li>
<li>发行时间：2010</li>
<li>运行平台：PC</li>
<li>游戏类型：RAC</li>
</ul>
<p><strong>综合评分：8.3（值得一玩）</strong></p>
<p>评分理由：最喜欢的赛车游戏，出色的音乐更是其亮点。极品飞车系列中可玩性最强的几部作品之一。</p>
<br>

<h5 id="命令与征服：红色警戒2"><a href="#命令与征服：红色警戒2" class="headerlink" title="命令与征服：红色警戒2"></a>命令与征服：红色警戒2</h5><ul>
<li>英文名：Command &amp; Conquer: Red Alert 2</li>
<li>发行商：EA</li>
<li>发行时间：2000</li>
<li>运行平台：PC</li>
<li>游戏类型：RTS</li>
</ul>
<p><strong>综合评分：7.7（可以尝试）</strong></p>
<p>评分理由：风靡一时的即时战略游戏，几乎人人皆知，但其相较红警3而言游戏平衡性欠佳，偏重娱乐性。</p>
 <br>

<h5 id="瘟疫公司"><a href="#瘟疫公司" class="headerlink" title="瘟疫公司"></a>瘟疫公司</h5><ul>
<li>英文名：Plague Inc.</li>
<li>发行商：Ndemic Creations</li>
<li>发行时间：2012</li>
<li>运行平台：PC</li>
<li>游戏类型：SLG</li>
</ul>
<p><strong>综合评分：7.5（可以尝试）</strong></p>
<p>评分理由：很有创意的一款游戏，模拟细菌或病毒的传播，目标是使人类灭绝，有引发大众思考的目的，玩法较为简单，值得尝试。</p>
<br>]]></content>
  </entry>
  <entry>
    <title>达瑞的2016半吊子小短文</title>
    <url>/blog/2016/01/01/%E8%BE%BE%E7%91%9E%E7%9A%842016%E5%8D%8A%E5%90%8A%E5%AD%90%E5%B0%8F%E7%9F%AD%E6%96%87/</url>
    <content><![CDATA[<p>汪汪汪：</p>
<br>

<p>时间来到了2015年12月31日18时36分，图书馆比以往空了一大片，学校莫名其妙在黑夜里开启了喷泉，校门外，没理发的达瑞走在包子铺旁的大街上，看着读秒的红绿灯和来往的生物，盘算着写一篇半吊子小短文。</p>
<br>

<p>“叫什么题目呢？”</p>
<p>“就叫半吊子小短文吧。”</p>
<p>“好呀好呀，就叫达瑞哥哥的半吊子小短文！”</p>
<p>“算了，这样太高调。但又要突出作者，就叫达瑞的半吊子小短文吧，哎不对，要加上时间，达瑞的2016半吊子小短文，嗯，就这样。”</p>
<br>

<p>有时渴望分享，但更享受自由。</p>
<br>

<p>“那今天就分享一下。”</p>
<p>达瑞看着红灯变绿心里响起昨天玩的游戏的背景乐走向镇江锅盖面馆。</p>
<br>

<p>过去的这一年，遇到了很多事。</p>
<br>

<p>一次多年未遇的飘浮：</p>
<p>我真的很久没有飘得如此厉害。</p>
<p>一次人生观念的猛击：</p>
<p>重塑了之前的观念体系。</p>
<p>一次跌落谷底的沉潜：</p>
<p>感受绝望与沉默。</p>
<p>一次精准华丽的转折：</p>
<p>我只是觉得运气太好罢了。</p>
<br>

<p>这些都过去了</p>
<p>于是有了如今的我</p>
<p>以上一句是废话</p>
<p>也许我学了4年生物的最大意义是</p>
<p>我深知，倘若水的键角偏离1度，也许所有的生命都不会存在。</p>
<p>我们存在，</p>
<p>是极小概率事件，</p>
<p>是多么微妙的巧合。</p>
<br>

<p>怎好意思不认真虚度？</p>
<br>

<p>接受这世界的随机性，</p>
<p>你已经抽到了最大的巧合。</p>
<br>

<p>新的一年</p>
<p>愿</p>
<p>有书有肉有手柄</p>
<p>有网有电有耳机</p>
<br>

<p>告别一整个庞杂宏大的2015</p>
<p>带着忘却或忘却不了的痕迹</p>
<p>周而复始</p>
<p>万象更新</p>
<p>2016</p>
<p>尽情享用而已</p>
<br>

<p>另：所有人发的新年快乐，我都没回，我懒而已。</p>
<br>

<p>喵喵喵</p>
<p>2016.01.01</p>
]]></content>
  </entry>
  <entry>
    <title>那些你再也回不去的时光</title>
    <url>/blog/2012/08/10/%E9%82%A3%E4%BA%9B%E4%BD%A0%E5%86%8D%E4%B9%9F%E5%9B%9E%E4%B8%8D%E5%8E%BB%E7%9A%84%E6%97%B6%E5%85%89/</url>
    <content><![CDATA[<p>高考后的暑假，就这样稀里糊涂地过去了，早就想写几篇日志，到现在才提起笔来，却发现自己已经不会写字了。</p>
 <br>


<p>要不是那一天又一遍听到《老男孩》，貌似我也并没有什么太大的感触。就好像这只是一个跟往常一样再普通不过的假期，就好像开学以后又要回到那个带了六年的讨厌的学校，就好像还是要天天坐着43，在车上想今天会不会不迟到。也许现在说出来会有些好笑，但是在心底里，更准确地说应该是潜意识里，我一直是这么认为的。就这样，离要走的日子越来越近，直到那一天听到那句“各自奔前程的身影匆匆渐行渐远”，我笑了，我突然意识到，有些事好像是再也不会发生了吧。</p>
  <br>

<p>一个假期究竟改变了多少，我只感觉到日复一日的颓废，我要去哪里，我要干什么，我是谁，这种问题在假期里总是懒得去回答，以前天天坐在43上却能思考得很多。有时候就觉得，坐公交车成了我的一种习惯，似乎我只有在公交车上才更能静下心来思考到很深，很多。真的不知道以后坐车的机会少了该怎么办，再也没有了，我的43。</p>
  <br>

<p>​      </p>
<p>有些事情你事前会觉得很重要，而事后却发现它原来并没有想象中那么重要，有些事情你当时会觉得再平常不过，而总有一天你会发现，它对你来说是多么的重要。</p>
  <br>

<p>我说的，前者是高考，而后者，则是这三年以来的高中生活。</p>
  <br>

<p>我承认我的高考很失败，而我也真心觉得，高考并没有想象之中的那么重要，它只是一个目标，而不是一个结果，真正让我觉得重要的，是那一年那一颗不知疲倦勇往直前的心，是那时每一天无比坚定的步伐，最重要的，是那时的那一种简单而纯粹的信念。</p>
  <br>

<p>要走了，我马上就要离开这个十八年来我一直未曾远离的城市。有时候还真的有些手足无措，还想着在阳光明媚的校园里打羽毛球挥洒汗水，那种感觉比球馆里爽得多，仿佛还可以在生物课上写化学，化学课上写数学，数学课上写物理，物理课上认真听讲，然后，被生物老师赶到教室后面罚站看风景。多么想再多不写几次作业被老师柴,多么想再迟到几次，多么想再上课偷吃方便面，多么想再假装上厕所，我大课间还是想去买袋洋芋，早饭还是想抢同桌的面包。原来总觉得我高中三年啥都没干，到现在才发现值得回忆的其实很多。只不过，好像也只能回忆了吧。</p>
  <br>

 

<p>仿佛每周六张钰祥还是会等在教室门口喊着：“nāi子，快些，等会没机子了！”，仿佛还是会带着轻快的心情迅速地收拾起书包，仿佛还是会出了校门一路狂奔，仿佛我们还能够很熟练地脱下校服，仿佛我们还能在吧台旁等得很耐心。学校到丁一的路只有那么一两百米，却承载了我们太多的快乐，“今天天气不错，适合上网。”“不上晚自习，真的假的？”“今天我咋这么烦的，玩会儿走。”“终于放假了，今晚包夜？”“你请客我就去。”“今天不会不给开吧？”“才五点半，走呗？”</p>
  <br>

 

<p>嘿，听见了么，那些，就是你再也回不去的，时光。</p>
]]></content>
  </entry>
  <entry>
    <title>面试问答汇总</title>
    <url>/blog/2019/11/09/%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/</url>
    <content><![CDATA[<h4 id="图形学相关"><a href="#图形学相关" class="headerlink" title="图形学相关"></a>图形学相关</h4><h5 id="渲染管线"><a href="#渲染管线" class="headerlink" title="渲染管线"></a>渲染管线</h5><p>顶点数据 &#x3D;&gt; 顶点着色器 &#x3D;&gt; 曲面细分 &#x3D;&gt; 几何着色器 &#x3D;&gt; 图元装配 &#x3D;&gt; 裁剪剔除 &#x3D;&gt; 光栅化 &#x3D;&gt; 片元着色器 &#x3D;&gt; 测试混合</p>
<h5 id="Unity轻量级渲染管线"><a href="#Unity轻量级渲染管线" class="headerlink" title="Unity轻量级渲染管线"></a>Unity轻量级渲染管线</h5><p>又称通用渲染管线，区别于Unity内置渲染管线，仅保留很小的C++内核，暴露出更多的接口来支持<strong>C#脚本自定义</strong>渲染管线。特点为注重性能，单通道前向渲染，Shader Graph支持。而Unity内置渲染管线则更加通用而功能强大。</p>
<h5 id="渲染为什么以三角形为基础"><a href="#渲染为什么以三角形为基础" class="headerlink" title="渲染为什么以三角形为基础"></a>渲染为什么以三角形为基础</h5><ul>
<li>任意三点必然共面。</li>
<li>三角形是最简单的多边形。</li>
<li>三角形经多种转换之后，仍然是三角形，对于仿射转换和透视转换成立。</li>
<li>几乎所有商用图形加速硬件都是为三角形光栅化而设计的。</li>
</ul>
<h5 id="变换矩阵的存储方式"><a href="#变换矩阵的存储方式" class="headerlink" title="变换矩阵的存储方式"></a>变换矩阵的存储方式</h5><ul>
<li>Direct3D：行优先存储(row-major)，变换时行向量右乘矩阵</li>
<li>OpenGL：列优先存储(column-major)，变换时列向量左乘矩阵</li>
<li>HLSL：列优先存储(column-major)</li>
<li>GLSL：列优先存储(column-major)</li>
</ul>
<h5 id="人物阴影渲染"><a href="#人物阴影渲染" class="headerlink" title="人物阴影渲染"></a>人物阴影渲染</h5><h5 id="两个立方体之间的阴影渲染"><a href="#两个立方体之间的阴影渲染" class="headerlink" title="两个立方体之间的阴影渲染"></a>两个立方体之间的阴影渲染</h5><h5 id="Shadow-Map的基本原理"><a href="#Shadow-Map的基本原理" class="headerlink" title="Shadow Map的基本原理"></a>Shadow Map的基本原理</h5><p>先从光源位置观察渲染一遍深度信息保存，第二遍渲染时将物体的坐标转换至光源观察坐标，和之前记录的深度比较，判断物体是否在阴影内。</p>
<h5 id="PBR主要参数"><a href="#PBR主要参数" class="headerlink" title="PBR主要参数"></a>PBR主要参数</h5><p>以Unity标准材质为例：</p>
<ul>
<li>Albedo 反射率（漫反射）</li>
<li>Metallic 金属度</li>
<li>specular 高光度（镜面反射）</li>
<li>Smoothness 光滑度</li>
<li>Occlusion 环境光遮蔽贴图</li>
<li>Normal 法线贴图</li>
<li>Emission 自发光贴图</li>
</ul>
<p>扩展链接：<a href="https://zhuanlan.zhihu.com/p/53086060" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/53086060</a></p>
<h5 id="光栅化的几种方法"><a href="#光栅化的几种方法" class="headerlink" title="光栅化的几种方法"></a>光栅化的几种方法</h5><p>线段扫描转换：</p>
<ul>
<li>数字微分画线算法DDA</li>
<li>Bresenham光栅化算法</li>
</ul>
<p>多边形填充：</p>
<ul>
<li>扫描线填充算法</li>
</ul>
<h5 id="BRDF的物理含义"><a href="#BRDF的物理含义" class="headerlink" title="BRDF的物理含义"></a>BRDF的物理含义</h5><p>双向反射分布函数：</p>
<p><strong>双向</strong>：入射方向和观察方向（分别为BRDF的两个输入）</p>
<p><strong>BRDF</strong>：描述了入射光线经过某个表面反射后如何在各个出射方向上分布</p>
<p>想象你有一个不透明的桌面，一个激光发射器。你先让激光向下垂直地射在那个桌面上，这样你就可以在桌面上看到一个亮点，接着你从各个不同的方向来观察那个亮点，你会发现亮点的亮度随着观察方向的不同而发生了改变。然后你站着不动，改变激光发射方向和桌面的夹角，你又会发现亮点的亮度发生了改变。这就是说，一个表面对不同的光线入射角和反射角的组合，拥有不同的反射率。BRDF就是用来对这种反射性质进行定义的。</p>
<p><a href="https://www.zhihu.com/question/20286038" target="_blank" rel="noopener">https://www.zhihu.com/question/20286038</a></p>
<h5 id="mipmap的用途"><a href="#mipmap的用途" class="headerlink" title="mipmap的用途"></a>mipmap的用途</h5><p>Mipmapping是贴图渲染中常用技术，为了<strong>加快渲染速度</strong>和<strong>减少图像锯齿</strong>，贴图被处理成由一系列被预先计算和优化过的图片组成的文件，被称为mipmap。</p>
<p>Mipmap中每一个层级的小图都是主图的一个特定比例的缩小细节的复制品，当贴图被缩小或者只需要从远距离观看时，mipmap就会转换到适当的层级。</p>
<p>Mipmap的一个重要用途就是渲染远距离纹理时进行范围查找，即远距离物体渲染时，一个像素通常对应着Texture上的一个范围而不是一个像素，mipmap事先缩小纹理，方便查找到该像素所对应的颜色，通常使用双线性插值后再在两个等级的mipmap间线性插值的三线性插值（Trilinear interpolation）来确定最终颜色。</p>
<p>Mipmap仅比原图多占用1&#x2F;3的空间。</p>
<h4 id="引擎相关"><a href="#引擎相关" class="headerlink" title="引擎相关"></a>引擎相关</h4><h5 id="游戏引擎主要模块"><a href="#游戏引擎主要模块" class="headerlink" title="游戏引擎主要模块"></a>游戏引擎主要模块</h5><p>渲染、物理、动画、AI、输入、内存管理、资源管理、编辑器、网络、UI</p>
<h5 id="可靠UDP的实现思路"><a href="#可靠UDP的实现思路" class="headerlink" title="可靠UDP的实现思路"></a>可靠UDP的实现思路</h5><p>最简单的方式是在应用层模仿传输层TCP的可靠性传输。</p>
<ul>
<li>1、添加TCP中的seq&#x2F;ack机制，确保数据发送到对端。</li>
<li>2、添加发送和接收缓冲区，主要是用户超时重传。</li>
<li>3、添加超时重传机制。</li>
</ul>
<p>详细说明：送端发送数据时，生成一个随机seq&#x3D;x，然后每一片按照数据大小分配seq。数据到达接收端后接收端放入缓存，并发送一个ack&#x3D;x的包，表示对方已经收到了数据。发送端收到了ack包后，删除缓冲区对应的数据。使用定时任务定时检查是否需要重传数据。</p>
<p>目前有如下开源程序利用UDP实现了可靠的数据传输：分别为<strong>RUDP、RTP、UDT</strong>。</p>
<h4 id="C-相关"><a href="#C-相关" class="headerlink" title="C#相关"></a>C#相关</h4><h5 id="C-拆装箱"><a href="#C-拆装箱" class="headerlink" title="C#拆装箱"></a>C#拆装箱</h5><p>装箱：值类型变量转变为引用类型Object存储在堆内存中</p>
<p>拆箱：引用类型Object转变为值类型存储在线程栈中</p>
<p><code>ArrayList</code>（每个元素为Object类型）中存取<code>Vector3</code>（值类型）时分别用到装拆箱操作。</p>
<h5 id="C-结构体与类的区别"><a href="#C-结构体与类的区别" class="headerlink" title="C#结构体与类的区别"></a>C#结构体与类的区别</h5><ol>
<li>结构体是值类型，类是引用类型</li>
<li>结构体不能被继承，但是结构体能够继承接口</li>
<li>结构体不能包含显式默认构造函数，没有析构函数；类有默认构造函数，有析构函数，可以使用abstract和sealed，有protected修饰符，必须使用new初始化。</li>
</ol>
<h5 id="委托与事件"><a href="#委托与事件" class="headerlink" title="委托与事件"></a>委托与事件</h5><p>（等我用到的时候再来写）</p>
<h4 id="C-相关-1"><a href="#C-相关-1" class="headerlink" title="C++相关"></a>C++相关</h4><h5 id="指针常量和常量指针"><a href="#指针常量和常量指针" class="headerlink" title="指针常量和常量指针"></a>指针常量和常量指针</h5><p>*前面的是对被指向对象的修饰，*后面的是对指针本身的修饰。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> p;      <span class="comment">// p 为整型常量</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span>* p;     <span class="comment">// p 为指向整型常量的指针</span></span><br><span class="line"><span class="keyword">int</span> <span class="keyword">const</span>* p;     <span class="comment">// p 为指向整型常量的指针</span></span><br><span class="line"><span class="keyword">int</span>* <span class="keyword">const</span> p;     <span class="comment">// p 为指向整型变量的指针常量</span></span><br></pre></td></tr></table></figure>

<h5 id="智能指针"><a href="#智能指针" class="headerlink" title="智能指针"></a>智能指针</h5><p>（暂留）</p>
<h5 id="new的两个阶段"><a href="#new的两个阶段" class="headerlink" title="new的两个阶段"></a>new的两个阶段</h5><ol>
<li>调用<code>operator new (sizeof(A))</code></li>
<li>调用<code>A:A()</code></li>
<li>返回指针</li>
</ol>
<p>事实上，分配内存这一操作就是由<code>operator new(size_t)</code>来完成的，如果类A重载了operator new，那么将调用<code>A::operator new(size_t )</code>，否则调用全局<code>::operator new(size_t )</code>，后者由C++默认提供。</p>
<h5 id="动态链接库和静态链接库区别"><a href="#动态链接库和静态链接库区别" class="headerlink" title="动态链接库和静态链接库区别"></a>动态链接库和静态链接库区别</h5><p>二者的区别在于编译过程中的链接阶段。</p>
<p>静态链接是指把调用的函数链接到可执行文件中，成为可执行文件的一部分。换句话说，函数代码就在程序的exe文件中，该文件包含了运行时所需的全部代码。当多个程序都调用相同函数时，内存中就会存在这个函数的多个拷贝，这样就浪费了宝贵的内存资源。</p>
<p>动态链接所调用的函数代码并没有被拷贝到应用程序的可执行文件中去，而是仅仅在其中加入了所调用函数的描述信息。仅当应用程序被装入内存开始运行时，才在应用程序与相应的DLL之间建立链接关系。当要执行所调用DLL中的函数时，根据链接产生的重定位信息，才转去执行DLL中相应的函数。一般情况下，如果一个应用程序使用了动态链接库，系统保证内存中只有DLL的一份复制品。</p>
<p>动态链接库和静态链接库的相同点是它们都实现了代码的共享。</p>
<p>静态链接库lib文件将导出声明和实现都放在lib中。编译后所有代码都嵌入到宿主程序。该lib中不能再包含其他动态链接或者静态链接的库了。</p>
<p>动态链接库lib文件相当于一个h文件，是对实现部分（dll文件）的导出声明。一个dll文件中可以包含其他动态链接库或者静态链接库。</p>
<p><strong>静态库特点：</strong></p>
<ol>
<li>静态库对函数库的链接是放在编译时期完成的。</li>
<li>程序在运行时与函数库再无瓜葛，移植方便。</li>
<li>浪费空间和资源，因为所有相关的目标文件与牵涉到的函数库被链接合成一个可执行文件。</li>
</ol>
<p><strong>动态库特点：</strong></p>
<ol>
<li>动态库把对一些库函数的链接载入推迟到程序运行的时期。</li>
<li>可以实现进程之间的资源共享。（因此也称为共享库）</li>
<li>将一些程序升级变得简单。</li>
<li>甚至可以真正做到链接载入完全由程序员在程序代码中控制（显式调用）。</li>
</ol>
<h4 id="算法相关"><a href="#算法相关" class="headerlink" title="算法相关"></a>算法相关</h4><p>（暂时不写）</p>
<h4 id="项目相关"><a href="#项目相关" class="headerlink" title="项目相关"></a>项目相关</h4><h5 id="毛笔写字效果"><a href="#毛笔写字效果" class="headerlink" title="毛笔写字效果"></a>毛笔写字效果</h5><h5 id="夜视效果"><a href="#夜视效果" class="headerlink" title="夜视效果"></a>夜视效果</h5>]]></content>
  </entry>
  <entry>
    <title>黄金时代</title>
    <url>/blog/2015/09/24/%E9%BB%84%E9%87%91%E6%97%B6%E4%BB%A3/</url>
    <content><![CDATA[<blockquote>
<p>借我一个暮年， </p>
<p>借我碎片， </p>
<p>借我瞻前与顾后， </p>
<p>借我执拗如少年。 </p>
<p>借我后天长成的先天， </p>
<p>借我变如不曾改变。 </p>
<p>借我素淡的世故和明白的愚， </p>
<p>借我可预知的险。 </p>
<p>借我悲怆的磊落， </p>
<p>借我温软的鲁莽和玩笑的庄严。 </p>
<p>借我最初与最终的不敢，借我不言而喻的不见。 </p>
<p>借我一场秋啊，可你说这已是冬天。</p>
<p>——樊小纯《借我》</p>
</blockquote>
<br>

<blockquote>
<p>高而能下，满而能虚，</p>
<p>富而能俭，贵而能卑，</p>
<p>智而能愚，勇而能怯，</p>
<p>辩而能讷，博而能浅，</p>
<p>明而能暗，是谓损而不极。</p>
<p>能习此道，惟至德者及之。</p>
<p>——刘向《说苑·敬慎》</p>
</blockquote>
<br>

<p>我愿做一个无比强大的人</p>
<p>不会因环境所恼</p>
<p>不会因情绪所惑</p>
<p>不会因爱而沉沦</p>
<p>而是独立、自信、有尊严的光芒矗立</p>
<p>在每一个大地山河与星空海洋</p>
<p>像诗人</p>
<p>又像无情的杀手</p>
<p>是柔软而坚不可摧的存在</p>
<p>这样就好了</p>
<br>

<p>我竟如此真实地存在</p>
<p>在这个美好的世界中</p>
<br>

<p>那就去吧，在你的</p>
<p>黄金时代</p>
]]></content>
      <categories>
        <category>生日</category>
      </categories>
  </entry>
</search>
